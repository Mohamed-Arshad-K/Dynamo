<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynaMEP</name>
    </assembly>
    <members>
        <member name="T:About.Information">
            <summary>
                Information All Package
            </summary>
        </member>
        <member name="M:About.Information.Author">
            <summary>
                About Author Package
            </summary>
            <returns></returns>
        </member>
        <member name="M:About.Information.VersionUpdate">
            <summary>zre
                Get Version Update
            </summary>
            <returns></returns>
        </member>
        <member name="M:About.Information.Contact">
            <summary>
                Contact with Author
            </summary>
            <returns></returns>
        </member>
        <member name="T:CAD.CADLinked">
            <summary>
            </summary>
        </member>
        <member name="M:CAD.CADLinked.GetCadLinked(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Get All Linked CADLinked Import instance In Model
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh">fresh Linked,Defaut True</param>
            <returns name="importinstance">All Linked Import In Model</returns>
            <returns name="importinstancename">Name Linked CADLinked Imported</returns>
        </member>
        <member name="M:CAD.CADLinked.CadLinkType(Revit.Elements.Element)">
            <summary>
            Get CAd Linked Type From Cad import instance
            </summary>
            <param name="importinstance"></param>
            <returns name="type">Cad Link Type</returns>
        </member>
        <member name="M:CAD.CADLinked.CadLinkTypeId(Revit.Elements.Element)">
            <summary>
            Get TypeID cad Import instance
            </summary>
            <param name="importinstance"></param>
            <returns name="TypeId">Cad Link Type Id</returns>
        </member>
        <member name="M:CAD.Document.GetDocument(System.String)">
            <summary>
            Init Document Cad
            </summary>
            <param name="file">file path of cad</param>
            <returns></returns>
        </member>
        <member name="M:CAD.Document.IsSupport(System.String)">
            <summary>
            Check File Is Support
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:CAD.Document.Texts(netDxf.DxfDocument)">
            <summary>
            Return Text In Cad
            </summary>
            <param name="Caddoc"></param>
            <returns></returns>
        </member>
        <member name="M:CAD.Document.MTexts(netDxf.DxfDocument)">
            <summary>
            Return DBmText In Cad
            </summary>
            <param name="Caddoc"></param>
            <returns></returns>
        </member>
        <member name="T:Excel.Read">
            <summary>
                Information All Package | Many thanks Author Package Excel
            </summary>
        </member>
        <member name="M:Excel.Read.SheetNames(System.IO.FileInfo)">
            <summary>
            Gets all of the sheet names stored in this excel workbook file.
            </summary>
            <param name="file">a file object (use File.FromPath)</param>
            <returns>names</returns>
        </member>
        <member name="M:Excel.Read.ReadFromFile(System.IO.FileInfo,System.String,System.Boolean,System.String)">
             <summary>
             Reads the entire content of an excel sheet. 
             </summary>
             <param name="file">a file object (use File.FromPath)</param>
             <param name="sheetName">the sheet's name as a string</param>
             <param name="byColumn">reads the data by columns(default) or by rows</param>
             <param name="range">you can limit the content you'd like to read, by providing a valid excel address range, such as "A1:C5"</param>
             <returns></returns>
            <returns name="data">The excel sheet content</returns>
             <search>excel read</search>
        </member>
        <member name="M:Excel.Read.NamedRanges(System.IO.FileInfo,System.String)">
            <summary>
            Gets all of the named ranges stored in an excel file. If the worksheet parameter is blank,
            only ranges registered in the workbook will be fetched.
            </summary>
            <param name="file">a file object (use File.FromPath)</param>
            <param name="sheetName">the name of the sheet as a string</param>
            <returns>names</returns>
        </member>
        <member name="T:Excel.NamedRange">
            <summary>
            A placeholder class used to display named ranges nicely in Dynamo
            </summary>
        </member>
        <member name="M:Excel.NamedRange.ToString">
            <summary>
            standard dynamo preview
            </summary>
        </member>
        <member name="M:Excel.NamedRange.GetRangeAddress">
            <summary>
            fetches the address of a range as a basic string
            </summary>
        </member>
        <member name="T:Geometry.Curves">
            <summary>
            All Problem with Curve
            </summary>
        </member>
        <member name="M:Geometry.Curves.ToLine(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Convert curve to Line
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.DeconstructPolyCurve(Autodesk.DesignScript.Geometry.PolyCurve)">
            <summary>
            Deconstruct PolyCurve
            </summary>
            <param name="polycurve"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.IsParallel(Autodesk.Revit.DB.PlanarFace,Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            judge whether a face and a line are parallel
            </summary>
            <param name="planarFace"></param>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.PointOnCurve(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Check point have in curve ?
            </summary>
            <param name="point"></param>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.PointOnPlane(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Plane)">
            <summary>
            See Point have in plane
            </summary>
            <param name="point"></param>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.Intersection(Autodesk.DesignScript.Geometry.Curve,Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Return the 2D intersection point between two unbounded lines defined
            in the XY plane by the start and end points of the two given curves.
            By Magson Leone.Return null if the two lines are coincident,
            in which case the intersection is an infinite line, or non-coincident
            and parallel, in which case it is empty.
            </summary>
            <param name="curve1"></param>
            <param name="curve2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.Normal(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Return the normal of a Line in the XY plane.
            </summary>
            <param name="Curve"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Curves.SortCurves(System.Collections.Generic.IList{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Sorts curves to allow CurveLoop creation that means each curve end must meet next curve start.(Start To End)
            </summary>
            <param name="curves"></param>
            <returns></returns>
        </member>
        <member name="T:Geometry.Face">
            <summary>
            All Problem With Face
            </summary>
        </member>
        <member name="M:Geometry.Face.PlanarFaces(System.Collections.Generic.List{Autodesk.Revit.DB.Face})">
            <summary>
            Get PlanarFace From faces
            </summary>
            <param name="faces"></param>
            <returns name="PlanarFaces"></returns>
        </member>
        <member name="M:Geometry.Face.IsVertical(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Judge Whether The Given Face IsVertical
            </summary>
            <param name="planarFace">planarFace to be judged</param>
            <returns name="bool">is horizontal</returns>
        </member>
        <member name="M:Geometry.Face.IsHorizontal(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            judge whether the given planarFace is horizontal
            </summary>
            <param name="planarFace">planarFace to be judged</param>
            <returns name="bool">is horizontal</returns>
        </member>
        <member name="M:Geometry.Face.IsEqual(System.Double,System.Double)">
            <summary>
            judge whether the subtraction of two doubles is less than 
            the internal decided precision
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.Origin(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Get Origin planarFace
            </summary>
            <param name="planarFace"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.Area(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Get Area planarFace
            </summary>
            <param name="planarFace"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.Normal(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Get Normal planarFace
            </summary>
            <param name="planarFace"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.Surface(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Returns a copy of this planarFace's surface.
            </summary>
            <param name="planarFace"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.MaterialElement(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Get Material Element planarFace
            </summary>
            <param name="planarFace"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.Line(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Get Line In planarFace
            </summary>
            <param name="planarFace"></param>
            <returns name="Lines[]" ></returns>
        </member>
        <member name="M:Geometry.Face.Vertex(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            get all points proximate to the given planarFace api not surface
            </summary>
            <param name="planarFace">planarFace to be calculated</param>
            <returns name="points" ></returns>
        </member>
        <member name="M:Geometry.Face.DistanceMinToPoint(System.Collections.Generic.List{Autodesk.Revit.DB.PlanarFace},Autodesk.Revit.DB.XYZ)">
            <summary>
            Return A Face Nearest With Point Input
            </summary>
            <param name="planarFaces"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Face.MidPoint(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Return an arbitrary point on a planar planarFace,
            namely the midpoint of the first mesh triangle.
            </summary>
            <returns name="point"></returns>
        </member>
        <member name="M:Geometry.Face.CreateTransformFromPlanarFace(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            Create a Transform from a PlanarFace
            </summary>
            <param name="planarFace"></param>
            <returns></returns>
        </member>
        <member name="T:Geometry.Geometry">
            <summary>
                Used to process geometry and objects
            </summary>
        </member>
        <member name="M:Geometry.Geometry.CrossMatrix(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            multiplication cross of two XYZ as Matrix
            </summary>
            <param name="Point1"></param>
            <param name="Point2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Geometry.GetPolygon(Autodesk.Revit.DB.EdgeArray)">
            <summary>
            Return a polygon as a list of XYZ points from an EdgeArray. If any of the edges are curved,we retrieve the tessellated points, i.e. an approximation determined by Revit.
            </summary>
            <param name="edgeArray"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Geometry.RealString(System.Double)">
            <summary>
            Return a string for a real number
            formatted to two decimal places.
            </summary>
        </member>
        <member name="M:Geometry.Geometry.AngleString(System.Double)">
            <summary>
            Return a string representation in degrees
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Geometry.CreateCutPlaneSolid(Revit.Elements.Element)">
            <summary>
            Create Cut Plane Solid
            </summary>
            <param name="floorPlan"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Geometry.ProjectOnto(Autodesk.Revit.DB.Plane,Autodesk.Revit.DB.XYZ)">
            <summary>
            Project a point to plane
            </summary>
            <param name="plane"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Geometry.SignedDistanceTo(Autodesk.Revit.DB.Plane,Autodesk.Revit.DB.XYZ)">
            <summary>
            
            </summary>
            <param name="plane"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Geometry.DotMatrix(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Dot product of two Point as Matrix
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="T:Geometry.Line">
            <summary>
            Geometry Line
            </summary>
        </member>
        <member name="M:Geometry.Line.IsVertical(Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            judge whether two lines are vertical
            </summary>
            <param name="Line1"></param>
            <param name="Line2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Line.IsRectangular(System.Collections.Generic.IList{Autodesk.DesignScript.Geometry.Line})">
            <summary>
            judge whether given 4 lines can form a rectangular
            </summary>
            <param name="Line"></param>
            <returns>is rectangular</returns>
        </member>
        <member name="M:Geometry.Line.StartPoint(Autodesk.Revit.DB.Line)">
            <summary>
            Return start point of line 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Line.EndPoint(Autodesk.Revit.DB.Line)">
            <summary>
            Return End Point Of line 
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Line.Midpoint(Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Return the midpoint of a Line.
            </summary>
            <param name="line"></param>
            <returns name="point"></returns>
        </member>
        <member name="T:Geometry.Points">
            <summary>
            
            </summary>
        </member>
        <member name="M:Geometry.Points.PointToXyz(Autodesk.DesignScript.Geometry.Point)">
            <summary>
                Get the XYZ coordinates of a plane in one node.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.ToPoint(Autodesk.Revit.DB.XYZ)">
            <summary>
            Convert XYZ To Point
            </summary>
            <param name="XYZ"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.Midpoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Return the midpoint between two points.
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.TransformPoint(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Transform)">
            <summary>
            Transform old coordinate system in the new coordinate system 
            </summary>
            <param name="point">The Autodesk.Revit.DB.XYZ which need to be transformed</param>
            <param name="transform">The value of the coordinate system to be transformed</param>
            <returns>The new Autodesk.Revit.DB.XYZ which has been transformed</returns>
        </member>
        <member name="M:Geometry.Points.PointInsidePlane(Autodesk.Revit.DB.PlanarFace,Autodesk.Revit.DB.XYZ)">
            <summary>
            check A Point have Inside a Plane
            </summary>
            <param name="planeFace"></param>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.SubPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Subtraction of two Autodesk.Revit.DB.XYZ as Matrix
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.PlusPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Plus of two Point as Matrix
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.Sum(Autodesk.DesignScript.Geometry.Point[])">
            <summary>
            Calculate Sum Vertex Point(x,y,z)
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.MultiplyPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Multiply of two Point as Matrix
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.Multiply(Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Multiplies the specified point with a scalar.
            </summary>
            <param name="p"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.DivPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Div of two Point as Matrix
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.Toline(System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Converts a series of point into Lines
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.DynamoPointToRevitPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Convert Dynamo Point To Revit Point
            </summary>
            <param name="point"></param>
            <returns name ="point">revit point xyz</returns>
        </member>
        <member name="M:Geometry.Points.RevitPointToDynamoPoint(Autodesk.Revit.DB.XYZ)">
            <summary>
            Convert Revit Point To Dynamo Point
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.IsSamePoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Check Point Same
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.GetPoint(Autodesk.Revit.DB.PlanarFace)">
            <summary>
            get all points proximate to the given planarFace api not surface
            </summary>
            <param name="planarFace">planarFace to be calculated</param>
            <returns name ="point"></returns>
        </member>
        <member name="M:Geometry.Points.ProjectOnto(Autodesk.DesignScript.Geometry.Plane,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Project given 3D Geometry point onto plane.
            </summary>
        </member>
        <member name="M:Geometry.Points.IsPointOnLine(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Check See Point Have In Line
            </summary>
            <param name="p">Point</param>
            <param name="a">Line Start Point</param>
            <param name="b">Line End Point</param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.IsInner(Autodesk.Revit.DB.XYZ,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line})">
            <summary>
            Evaluate whether the point belongs in boundary
            </summary>
            <param name="point"></param>
            <param name="boundary">boundary</param>
            <returns name="bools"></returns>
        </member>
        <member name="M:Geometry.Points.CompareByDistance(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Compare if the distance between two points is less than distance
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.Move(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,System.Double)">
            <summary>
            Move Point to new location by length
            </summary>
            <param name="point">point want move</param>
            <param name="vector">vector direction</param>
            <param name="len"> length want go to</param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.MaxPoint(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Return A Point Max In List Point (Sort XYZ)
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.Minpoint(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Return A Point Min In List Point (Sort XYZ)
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Points.ClosestPointTo(Autodesk.DesignScript.Geometry.Point,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Return a point closest with point1 from list points(Fix Geometry Scale Geometry Not Correct)
            </summary>
            <param name="point"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="T:Geometry.Polygon">
            <summary>
            
            </summary>
        </member>
        <member name="T:Geometry.Surface">
            <summary>
            All problem with surface in geometry
            </summary>
        </member>
        <member name="M:Geometry.Surface.Top(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            Get Top Surface From Geometry
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Surface.Bottom(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            Return Bottom Surface from Geometry
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Surface.Vertical(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            Return Side Surface Vertical from Geometry
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Surface.ToFaces(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Convert Surface Dynamo To API Faces[Can Null With Face Design]
            </summary>
            <param name="surface"></param>
            <returns name="planarFace"></returns>
        </member>
        <member name="M:Geometry.Surface.Vertices(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            Return Vertices Of Surface
            </summary>
            <param name="surface">surface loft or patch</param>
            <returns name="points"></returns>
        </member>
        <member name="T:Geometry.Vector">
            <summary>
            Geometry 3D Vector
            </summary>
        </member>
        <member name="M:Geometry.Vector.Negate(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Construct a new vector which is the inverse of this vector.
            </summary>
            <param name="vector"></param>
            <returns>A new vector which is the inverse of this vector.</returns>
        </member>
        <member name="M:Geometry.Vector.Multiply(Autodesk.DesignScript.Geometry.Vector,System.Double)">
            <summary>
            Multiply a vector and a scalar.
            </summary>
            <param name="vector">The vector to multiply</param>
            <param name="a">The scalar value to multiply</param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Dot(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Return DotProduct of two Vector
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Cross(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Cross Product Vector
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Length(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Return Length Vector
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Average(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Compute the average of two Vector
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Subtract(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Subtract two vectors
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Add(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Add two vectors
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Multiply(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Multiply two vectors
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Divide(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Multiply two vectors
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Normalized(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Return a new vector which is the unitized version of this vector
            </summary>
            <param name="vectors"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.AngleTo(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            The angle in degrees from this vector to the provided vector.
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.IsAlmostEqualTo(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Determine whether two vectors ae almost equal
            </summary>
            <param name="vector"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.IsZero(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Check Vector Have Length = 0
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.Equals(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Is this vector equal to the provided vector?
            </summary>
            <param name="vector1"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.Vector.ByPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            From A Vector By Point 
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Lib.CadConvert.ToGeometryPoint(netDxf.Vector3)">
            <summary>
            Convert Point Cad To Point Dynamo
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Lib.CadConvert.ToGeometryPoint(netDxf.Vector2)">
            <summary>
            Convert Point Cad To Point Dynamo
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:DynaMEP.Lib.ParameterUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:DynaMEP.Lib.ParameterUtils.getValue(Autodesk.Revit.DB.Parameter)">
            <summary>
            Get Value Parameter For All Case
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Lib.ParameterUtils.setValue(Autodesk.Revit.DB.Parameter,System.Object)">
            <summary>
            Set Value Parameter For All Case
            </summary>
            <param name="p">parameter need set</param>
            <param name="value">value need set</param>
        </member>
        <member name="M:DynaMEP.Lib.ParameterUtils.GetAllParameters(Autodesk.Revit.DB.Element,System.Boolean)">
            <summary>
            
            </summary>
            <param name="el"></param>
            <param name="isIncludeTypePara"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Revit.ElementFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <summary>
            
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Revit.ElementFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:DynaMEP.Revit.Pipesfilter">
            <summary>
            Pipes filter 
            </summary>
        </member>
        <member name="M:DynaMEP.Revit.CategoryFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <summary>
            
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Revit.CategoryFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <summary>
            
            </summary>
            <param name="reference"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:DynaMEP.Sample">
            <summary>
            </summary>
        </member>
        <member name="M:DynaMEP.Sample.XYZ(System.Double,System.Double,System.Double)">
            <summary>
                Input double, Return List Point
            </summary>
            <param name="x">Double</param>
            <param name="y">Double</param>
            <param name="z">Double</param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.Sample.Dlinecenter(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
                Return Point CenterPoint to start Point and end Point
            </summary>
            <param name="statPoint">Value Point Start Input</param>
            <param name="endpoint">Value Point End Input</param>
            <returns name="muiltiout">Element</returns>
        </member>
        <member name="M:DynaMEP.Sample.SplitObjects(System.Collections.Generic.List{System.Int32})">
            <summary>
                Return Number Event and odds in list
            </summary>
            <param name="list"></param>
            <returns name="Number"></returns>
        </member>
        <member name="T:DynaMEP.RevitElements">
            <summary>
            </summary>
        </member>
        <member name="M:DynaMEP.RevitElements.GetCategory(Revit.Elements.Element)">
            <summary>
               Get Category Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynaMEP.RevitElements.GetId(Revit.Elements.Element)">
            <summary>
            Get Element By Id
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:DynaMEP.Systems.Convert">
            <summary>
            
            </summary>
        </member>
        <member name="T:List.String">
            <summary>
            </summary>
        </member>
        <member name="M:List.String.SplitOnWhitespace(System.String)">
            <summary>
            Splits the str on whitespace.
            </summary>
            <param name="input">The input str.</param>
            <returns>Array of strings.</returns>
        </member>
        <member name="M:List.String.ChangeCase(System.String)">
            <summary>
                Change Case Update In Dynamo
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.ToTitle(System.String)">
            <summary>
                Change Case String to Title Include Nulls to null
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.ToUpper(System.Object)">
            <summary>
                Change Case String to Upper Include Nulls to null
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.ToLower(System.Object)">
            <summary>
                Change Case String to Lower Include Nulls to null
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.ToNumber(System.String)">
            <summary>
                Converts a str to an integer or a double.
            </summary>
            <param name="str">String to be converted.</param>
            <returns name="number">Integer or double-type number.</returns>
            <search>2number,str2number,strtonumber,string2number,stringtonumber,int,double,cast</search>
        </member>
        <member name="M:List.String.ConvertHexToString(System.Byte[],System.String)">
            <summary>
            Convert Hex To String
            </summary>
            <param name="Bytes"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.ConvertStringToHex(System.String)">
            <summary>
            Convert String to Hex
            </summary>
            <param name="HexString"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:List.String.IsNumber(System.String)">
            <summary>
            Check Character Is Number
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.IsAlphabetic(System.String)">
            <summary>
            Method of Character class determines whether the specified character is an alphabet or not.
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.IsPunctuation(System.String)">
            <summary>
            Indicates whether a Unicode character is categorized as a punctuation mark.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.IsAlphanumeric(System.Object)">
            <summary>
            Analysis if a char is alphanumeric (that is a letter or a numbers). Returns true if thisChar contains either a number or a letter.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.ContainsNumber(System.String)">
            <summary>
            Check Number Is Contain In String
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.NumberInString(System.String)">
            <summary>
            Return Number Join In String Example : (hello 23 my 28) return [2328]
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.NumberInStrings(System.String)">
            <summary>
            Return Number split In String : Example : (hello 23 my 28) return [23,28]
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.Normalize(System.String)">
            <summary>
            Returns a new str whose textual value is the same as this str, but whose binary representation is in the specified Unicode normalization form.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:List.String.RemoveInvalidChars(System.String)">
            <summary>
            Remove Char Invalid
            </summary>
            <param name="str">string</param>
            <returns></returns>
        </member>
        <member name="T:List.Number">
            <summary>
            
            </summary>
        </member>
        <member name="M:List.Number.MaxValue(System.Collections.Generic.List{System.Double})">
            <summary>
            return ListNumber max in list ListNumber
            </summary>
            <param name="listNumber"></param>
            <returns></returns>
        </member>
        <member name="M:List.Number.MinValue(System.Collections.Generic.List{System.Double})">
            <summary>
            return ListNumber min in list ListNumber
            </summary>
            <param name="listNumber"></param>
            <returns></returns>
        </member>
        <member name="F:List.Number.PRECISION">
            <summary>
            
            </summary>
        </member>
        <member name="M:List.Number.IsEqual(System.Double,System.Double)">
            <summary>
            judge whether the subtraction of two doubles is less than 
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="T:List.List">
            <summary>
            
            </summary>
        </member>
        <member name="M:List.List.RemoveNulls(System.Collections.Generic.List{System.Object})">
            <summary>
            Remove All Nulls in list, Nulls to empty list not flatten, Level Of Lst Not Change
            </summary>
            <param name="obj">list object</param>
            <returns name="list[]">list not null</returns>
        </member>
        <member name="T:MEP.CableTrays">
            <summary>
                Create CableTray In MEP Model ByTwoPoints
            </summary>
        </member>
        <member name="M:MEP.CableTrays.ByTwoPoints(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element,Autodesk.Revit.DB.Level)">
            <summary>
                Create Cable Tray By Curve
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="cabletrayType"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.CableTrays.ByCurve(Autodesk.Revit.DB.Curve,Revit.Elements.Element,Autodesk.Revit.DB.Level)">
            <summary>
                Create Cable Tray By Curve
            </summary>
            <param name="curve"></param>
            <param name="cabletrayType"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:MEP.Connectors">
            <summary>
                Get Connector Element MEP
            </summary>
        </member>
        <member name="M:MEP.Connectors.GetFabricationConnectorName(Autodesk.Revit.DB.Document,System.Int32)">
            <summary>
            Get Fabrication Connector Name From MEP Fabrication
            </summary>
            <param name="doc">default document current</param>
            <param name="ConnectorId"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Connector(Autodesk.Revit.DB.ConnectorManager)">
            <summary>
            Return list connector from connector manager
            </summary>
            <param name="ConnectorManager">connector manager from Element MEP</param>
            <returns name="connector">connector element</returns>
        </member>
        <member name="M:MEP.Connectors.Connect(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            connect from two element Pipe/Duct/cable tray
            </summary>
            <param name="element1"></param>
            <param name="element2"></param>
            <exception cref="T:ArgumentException"></exception>
        </member>
        <member name="M:MEP.Connectors.GetConnectorClosestTo(System.Collections.Generic.List{Autodesk.Revit.DB.Connector},Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Get Connector Closest To
            </summary>
            <param name="connectors"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.IsConnected(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Ids(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Angle(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Get Angle Connector
            </summary>
            <param name="connectors"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Owner(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Sharp(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Connector Sharp Round/Rectangular
            </summary>
            <param name="connector"></param>
            <returns name="Shape"></returns>
        </member>
        <member name="M:MEP.Connectors.Description(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
             Get Connector Description
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Location(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Get Location Connector
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Radius(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Get Connector Radius
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.System(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
             Get Connector System
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.SystemType(Autodesk.Revit.DB.Connector)">
            <summary>
            Return Connector System Type MEP(Wrap API)
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.SystemType(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
             Get Connector System Type (DynamoType)
            </summary>
            <param name="doc">default document current</param>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.ConnectorSystemType(Autodesk.Revit.DB.Connector)">
            <summary>
            
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.GetOpenConnectorClosestTo(Autodesk.Revit.DB.ConnectorSet,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Get connector from connector set or any iterable closest to an XYZ point
            </summary>
            <param name="connectorrset"></param>
            <param name="point"></param>
            <returns name="connector"></returns>
        </member>
        <member name="M:MEP.Connectors.ConnectorDim(Autodesk.Revit.DB.Connector)">
            <summary>
            Return dimension for this connector:diameter if round, else height.
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Closest(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Get Connector closet from two element MEP
            </summary>
            <param name="element1"></param>
            <param name="element2"></param>
            <returns name="Connector"></returns>
        </member>
        <member name="M:MEP.Connectors.CheckDirection(Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>
            Check see direction two connector have parallel with ?
            </summary>
            <param name="connector1"></param>
            <param name="connector2"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.StartConnector(Revit.Elements.Element)">
            <summary>
            Return Start Connector Pipe/Duct/Cable tray/conduit
            </summary>
            <param name="element"></param>
            <returns name="Connector"></returns>
        </member>
        <member name="M:MEP.Connectors.EndConnector(Revit.Elements.Element)">
            <summary>
            Return End Connector Pipe/Duct/Cable tray/conduit
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Connectors.Disconnect(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>
            Disconnect Connector
            </summary>
            <param name="doc">default document current</param>
            <param name="connector1"></param>
            <param name="connector2"></param>
            <returns></returns>
        </member>
        <member name="T:MEP.Ducts">
            <summary>
            </summary>
        </member>
        <member name="M:MEP.Ducts.GetInsulation(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Get Duct Insulation
            </summary>
            <param name="doc">default document current</param>
            <param name="Duct"></param>
            <returns></returns>
            <exception cref="T:ArgumentNullException"></exception>
        </member>
        <member name="M:MEP.Ducts.AddInsulation(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element,System.Double)">
            <summary>
                Create Duct Insulation
            </summary>
            <param name="duct"></param>
            <param name="ductInsulationType"></param>
            <param name="Thickness"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Ducts.AllDuctTypes(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Return All Duct ductInsulationType And Name ductInsulationType Duct
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Ducts.AllInsulationTypes(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Return All Duct Insulation In Document
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Ducts.AllInsulation(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Return All Duct Insulation In Document
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Ducts.AllSystemTypes(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Retrieves the duct systems type in the directory tree
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Ducts.ConnectAirTerminalOnDuct(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Connect AirTerminal To Duct
            </summary>
            <param name="Duct"></param>
            <param name="Airterminal"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Ducts.Shape(Revit.Elements.Element)">
            <summary>
            Return Sharp Duct In Model MEP
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:MEP.Fitting">
            <summary>
            All Problem with fitting(Support MEP)
            </summary>
        </member>
        <member name="M:MEP.Fitting.CreateUnionByConector(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>
            Create A Fitting By two end connector
            </summary>
            <param name="doc">default document current</param>
            <param name="connector1"></param>
            <param name="connector2"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Fitting.CreateUnion(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Create A Fitting  By Two Element MEP(Duct,Pipe,Cable Tray, Conduits)
            </summary>
            <param name="element1">element can connect with fitting(Duct,Pipe,...)</param>
            <param name="element2">element can connect with fitting(Duct,Pipe,...)</param>
            <returns name="fittings">new fitting from element create</returns>
        </member>
        <member name="M:MEP.Fitting.CreateTransition(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Connector,Autodesk.Revit.DB.Connector)">
            <summary>
            Connect Two Element MEP ,Create New Transition Fitting Between.
            </summary>
            <param name="doc">default document current</param>
            <param name="connectors1"></param>
            <param name="connectors2"></param>
            <returns></returns>
        </member>
        <member name="T:MEP.Pipes">
            <summary>
            </summary>
        </member>
        <member name="M:MEP.Pipes.AllPipeTypes(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Return All Pipe Type And Name Type Pipe
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Pipes.AddInsulation(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element,System.Double)">
            <summary>
                Create Pipe Insulation
            </summary>
            <param name="doc">default document current</param>
            <param name="elements"></param>
            <param name="pipeInsulationType"></param>
            <param name="insulationThickness"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Pipes.GetInsulation(Revit.Elements.Element)">
            <summary>
            Get Pipe insulation in document
            </summary>
            <param name="Pipe"></param>
            <returns></returns>
            <exception cref="T:ArgumentNullException"></exception>
        </member>
        <member name="M:MEP.Pipes.AllInsulation(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
              Get All Pipe Insulation In Document
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Pipes.AllInsulationType(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Get All Insulation Type In Document
            </summary>
            <param name="doc"></param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:MEP.Pipes.FindConnectedTo(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            Find out the connector which the pipe's specified connector connected to.
            The pipe's specified connector is given by point.
            <param name="pipesElement"></param>
            <param name="Point"></param>
            <returns name="connector">Connector whose origin is conXYZ</returns>
        </member>
        <member name="M:MEP.Pipes.FindConnector(Autodesk.Revit.DB.Plumbing.Pipe,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Find out a connector from pipe with a specified point.
            </summary>
            <param name="pipe">Pipe to find the connector</param>
            <param name="conXYZ">Specified point</param>
            <returns>Connector whose origin is conXYZ</returns>
        </member>
        <member name="M:MEP.Pipes.SegmentSizes(Autodesk.Revit.DB.Document)">
            <summary>
            List all the pipe segment sizes in the given document.
            </summary>
            <param name="doc">default document current</param>
        </member>
        <member name="M:MEP.Pipes.AllSystemtype(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Return All Pipe SystemType In Project
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh">fresh to update new element created</param>
            <returns name="system type">system type of pipe system</returns>
        </member>
        <member name="T:PointCloud.PointCloud">
            <summary>
            </summary>
        </member>
        <member name="M:PointCloud.PointCloud.GetAllPointCloud(System.Boolean)">
            <summary>
                Return All PointCloud In Model
            </summary>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.GetAll(System.Boolean)">
            <summary>
                Return All PointCloud In Model
            </summary>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.GetScanPC(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return String GetScan And ScanOrigin
            </summary>
            <param name="pointCloudInstances">PointCloud Instance In Model</param>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.Origin(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return Origin PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns name="point"></returns>
        </member>
        <member name="M:PointCloud.PointCloud.Determinant(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return Origin Determinant PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.Isidentity(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return IsIdentity PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.IsConformal(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return IsConformal PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.IsTranslation(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return IsTranslation PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.Scale(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return Scale PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns></returns>
        </member>
        <member name="M:PointCloud.PointCloud.Basis(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Return Basis PointCloud
            </summary>
            <param name="pointCloudInstances"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Annotations">
            <summary>
            Annotation MEP
            </summary>
        </member>
        <member name="T:RevitModel.BoundingBox">
            <summary>
            All problem with bounding box
            </summary>
        </member>
        <member name="M:RevitModel.BoundingBox.Corners(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Return the four point corners of the given 
            bounding bounding box in the XY plane at the minimum 
            Z elevation in the order lower left, lower 
            </summary>
            <param name="boundingBox"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.ElementInside(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Return All Element Inside Bounding box
            </summary>
            <param name="boundingBox"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.GetCrossingBox(Autodesk.DesignScript.Geometry.BoundingBox,Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Gets the intersection bounding box between the boundingBox1 and the boundingBox2.
            </summary>
            <param name="boundingBox1"></param>
            <param name="boundingBox2"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.MakeModelCurve(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Make Model Curve From Bounding Box
            </summary>
            <param name="boundingBox"></param>
            <returns name="modelCurve"></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.Center(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
                Gets the center point of bounding box.
            </summary>
            <param name="boundingBox"></param>
            <returns>Center Point bounding boundingBox</returns>
        </member>
        <member name="M:RevitModel.BoundingBox.Length(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
                Gets the boundingBox's length on y axis direction.
            </summary>
            <param name="boundingBox"></param>
            <returns>length on y axis direction</returns>
        </member>
        <member name="M:RevitModel.BoundingBox.Width(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
                Gets the boundingBox's width on x axis direction.
            </summary>
            <param name="boundingBox"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.Height(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
                Gets the boundingBox's height on z axis direction.
            </summary>
            <param name="boundingBox"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.Scale(Autodesk.DesignScript.Geometry.BoundingBox,System.Double)">
            <summary>
            Scale bounding box
            </summary>
            <param name="boundingBox"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.ScaleBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ,System.Double)">
            <summary>
            Use Wrap API
            </summary>
            <param name="boundingBox"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.BoundingBox.IsOverlap(Autodesk.DesignScript.Geometry.BoundingBox,Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Check if two bounding boxes overlap
            </summary>
            <param name="bounndingbox1"></param>
            <param name="bounndingbox2"></param>
            <returns name="bool"></returns>
        </member>
        <member name="T:RevitModel.CategorySelectionFilter">
            <summary>
            CategorySelectionFilter
            </summary>
        </member>
        <member name="M:RevitModel.CategorySelectionFilter.#ctor(System.String)">
            <summary>
            CategorySelectionFilter
            </summary>
            <param name="cat"></param>
        </member>
        <member name="M:RevitModel.CategorySelectionFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <summary>
            AllowElement
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.CategorySelectionFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <summary>
            AllowReference
            </summary>
            <param name="refer"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Ceiling.Sloop(Revit.Elements.Element)">
            <summary>
            Return sloop of ceiling
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Documents">
            <summary>
            Call document
            </summary>
        </member>
        <member name="M:RevitModel.Documents.Current">
            <summary>
            Return Document Current
            </summary>
            <returns name="doc">
                document
            </returns>
        </member>
        <member name="M:RevitModel.Documents.GetAllFamilies(Autodesk.Revit.DB.Document)">
            <summary>
            Retrieve all families used by the family instances
            and annotation symbols in the given document.
            Return a dictionary mapping the family name
            to the corresponding family object.
            </summary>
        </member>
        <member name="M:RevitModel.Documents.ElementIndocument(Autodesk.Revit.DB.Document)">
            <summary>
            Get All Element Have In Document Model
            </summary>
            <param name="doc">default document current</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Documents.BuiltInCategory(Autodesk.Revit.DB.Document)">
            <summary>
            Get All BuiltInCategory From Document
            </summary>
            <param name="doc">default document current</param>
            <returns name="BuiltInCategory"></returns>
        </member>
        <member name="M:RevitModel.Documents.ElementFromBuiltInCategory(Autodesk.Revit.DB.Document,System.Collections.IList)">
            <summary>
            Get Element From BuiltInCategory
            </summary>
            <param name="doc">default document current</param>
            <param name="BuiltInCategory"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Element">
            <summary>
                Element In Levels
            </summary>
        </member>
        <member name="M:RevitModel.Element.ToList2(System.Collections.Generic.IEnumerable{Revit.Elements.Element})">
            <summary>
            Convert Element To List with single Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.PickPoint(System.Boolean)">
            <summary>
            Return Point Picked
            </summary>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.PickPointOrders(System.Boolean)">
            <summary>
            Return a list points pick order
            </summary>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SelectOrderByCategory(System.Boolean,Revit.Elements.Category)">
            <summary>
                Select Element By Order
            </summary>
            <param name="refresh"></param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.RemoveNulls(Revit.Elements.Element)">
            <summary>
            Remove All Nulls in list
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.IsFlip(Revit.Elements.Element)">
            <summary>
                Return FamilyInstance Instance Flip Or Un flip
            </summary>
            <param name="FamilyInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FlipdWorkPlane(Revit.Elements.Element,System.Boolean)">
            <summary>
            Flip Work plane FamilyInstance instance
            </summary>
            <param name="Familyinstance"></param>
            <param name="flip"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FlipHand(Revit.Elements.Element)">
            <summary>
            Flip Hand Family instance
            </summary>
            <param name="Familyinstance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FlipFacing(Revit.Elements.Element)">
            <summary>
            FlipFacing Family instance
            </summary>
            <param name="Familyinstance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FlipWorkPlane(Autodesk.Revit.DB.FamilyInstance,System.Boolean)">
            <summary>
                Flip Work plane FamilyInstance
            </summary>
            <param name="element"></param>
            <param name="bools"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.ShowElement(Revit.Elements.Element)">
            <summary>
                Show Element Selected To Near Center Screen
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.IsolateElementsTemporary(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
                Isolate Element In view
            </summary>
            <param name="element"></param>
            <param name="views"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.HideElement(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
                Hide Element In View
            </summary>
            <param name="element"></param>
            <param name="Views"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.UnHideElement(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
                Hide Element In View
            </summary>
            <param name="element"></param>
            <param name="Views"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetSelecttion(System.Boolean)">
            <summary>
                Return Element Selected Current , bool to fresh
            </summary>
            <param name="fresh">True Or False to fresh</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.AllElementInView(Revit.Elements.Element)">
            <summary>
            Return All Element In view
            </summary>
            <param name="view">view</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.AllElementInActiveView(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Return All Element In Active Have fresh
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.DeleteElement(Revit.Elements.Element)">
            <summary>
            Delete Element In Document
            </summary>
            <param name="element"></param>
            <returns name="ElementId" >Id Element Deleted</returns>
        </member>
        <member name="M:RevitModel.Element.Pin(Revit.Elements.Element,System.Boolean)">
            <summary>
                Set Pin or Unpin For Element
            </summary>
            <param name="Elements"></param>
            <param name="Option">Set True to Pin</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.IsPin(Revit.Elements.Element)">
            <summary>
                Check Element Pin or Unpin
            </summary>
            <param name="Elements"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetType(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
                Get the Type in this element
            </summary>
            <param name="doc">default document current</param>
            <param name="element"></param>
            <returns>type of element</returns>
        </member>
        <member name="M:RevitModel.Element.ElementsOfCategoryInDocument(Autodesk.Revit.DB.Document,Revit.Elements.Category)">
            <summary>
                Return All Element Of CateGory in Document
            </summary>
            <param name="doc">default document current</param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SetParameterValueByName(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Set Parameter Value By Name Smarter
            </summary>
            <param name="element">element want get parameter</param>
            <param name="parameterName">parameter name want set</param>
            <param name="values">value need set[object]</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Element.FilterByParameterValue(System.Collections.Generic.IEnumerable{Revit.Elements.Element},System.String,System.Object)">
            <summary>
                Return Filter By Parameter Value
            </summary>
            <param name="elements"></param>
            <param name="parameterName"></param>
            <param name="parameterValue"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FilterByCategory(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Category)">
            <summary>
                Filter Element By Category
            </summary>
            <param name="element"></param>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FilterByPhaseCreated(System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
                Filter Element By Phase Created
            </summary>
            <param name="element"></param>
            <param name="phase"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.ById(Autodesk.Revit.DB.Document,System.Int32)">
            <summary>
            Retrieve an elements by its ElementId
            </summary>
            <param name="doc">default document current</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FilterByType(System.Collections.Generic.IEnumerable{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
                Filter a list of elements by the type (e.g. wall type, family type, etc) of the elements.
            </summary>
            <param name="elements"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.IsInPlace(Revit.Elements.FamilyInstance)">
            <summary>
                Check FamilyInstance Instance Is InPlace
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FindNeighbourElements(Revit.Elements.Element,Revit.Elements.Element,System.Double)">
            <summary>
                Find neighbor elements for base elements using it`s bounding box with some additional offset
            </summary>
            <param name="element">revit element</param>
            <param name="view">view have element need  find</param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.FindSimilarElements(Revit.Elements.Element)">
            <summary>
                Find Similar Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.ElementIntersect(Revit.Elements.Element)">
            <summary>
            Find All Element InterSect With Element Input
            </summary>
            <param name="element"></param>
            <returns name= "elementIntersect"></returns>
        </member>
        <member name="M:RevitModel.Element.AddInsulation(Revit.Elements.Element,Revit.Elements.Element,System.Double)">
            <summary>
            Add Insulation In Element (Duct/Pipe)
            </summary>
            <param name="element">duct or pipe</param>
            <param name="insulationType">insulation type duct or type pipe</param>
            <param name="thickness">thickness want create</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.RemoveInsulation(Revit.Elements.Element)">
            <summary>
            Delete Insulation Element MEP, Return true is Element Deleted
            </summary>
            <param name="Element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.LocationCurve(Revit.Elements.Element)">
            <summary>
            Get Location Curve Element Or Location Family Instance
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.ElementDescription(Revit.Elements.Element)">
            <summary>
            Return a string describing the given elements:
            .NET type name,
            category name,
            family and symbol name for a family instance,
            elements id and elements name.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetNonTemplate3dView(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Return 3D view which is not a template
            </summary>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetPointCenter(Revit.Elements.Element)">
            <summary>
            Return a point center elements
            </summary>
            <param name="Element"></param>
            <returns name="Point"></returns>
        </member>
        <member name="M:RevitModel.Element.ParameterExits(Autodesk.Revit.DB.Document,Revit.Elements.Element,System.String)">
            <summary>
            Check Parameter in Element Include ParameterType
            </summary>
            <param name="element"></param>
            <param name="parametername"></param>
            <param name="doc">default document current</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.ByParamter(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Return All elements have Parameter Name in model
            </summary>
            <param name="doc">default document current</param>
            <param name="parametername"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.BoundingBoxXYZ(Revit.Elements.Element)">
            <summary>
            Return BoundingBox Element
            </summary>
            <param name="elements"></param>
            <returns name="boundingbox">bounding box element</returns>
        </member>
        <member name="M:RevitModel.Element.SelectOrderedElements(System.Boolean)">
            <summary>
            Help You Select element order step by step click 
            </summary>
            <param name="fresh">Set True To Select Order Element</param>
            <returns name="elements"></returns>
        </member>
        <member name="M:RevitModel.Element.SelectLinkedElement(System.Boolean)">
            <summary>
            Select Element In LinkedElement, Return Element In Linked elements
            </summary>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SelectLinkedElements(System.Boolean)">
            <summary>
            Select Element In LinkedElement, Return Element In Linked elements
            </summary>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.CopyElementToSamePlace(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Create A Element Same Place With Element
            </summary>
            <param name="doc">default document current</param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.CopyElementToLocation(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Copy Element To New Location
            </summary>
            <param name="element"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SelectByID(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
             Same With Select by ID In Revit
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SelectByCategory(Autodesk.Revit.DB.Document,Revit.Elements.Category)">
            <summary>
            Select Element Filter by Category
            </summary>
            <param name="doc">default document current</param>
            <param name="category">CateGory Element</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.PickObjectByCategory(Revit.Elements.Category,System.Boolean)">
            <summary>
            Select Element by Category Sub List Order PickObject
            </summary>
            <param name="Categories"></param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.Parameter(Revit.Elements.Element)">
            <summary>
            Get Parameter Include Parameter And Parameter Type
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.Faces(Revit.Elements.Element)">
            <summary>
            Get Face Element RevitAPI Return Face Not Surface Geometry Dynamo
            </summary>
            <param name="element"></param>
            <returns name = "Faces"></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Element.PlanarFaces(Revit.Elements.Element)">
            <summary>
            Return PlanarFaces(Face) Of Element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SolidRevit(Revit.Elements.Element)">
            <summary>
            Get Solid Geometry Revit Not Geometry Dynamo
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SolidDynamo(Revit.Elements.Element)">
            <summary>
            Get Solid Geometry Geometry Dynamo Not Geometry Revit
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetInsulation(Revit.Elements.Element)">
            <summary>
            Return Insulation from element input
            </summary>
            <param name="element">element have insulation</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.Split(System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Split Element MEP and None MEP
            </summary>
            <param name="elements">Element Need Split</param>
            <param name="points">Point At Parameter</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SplitElement(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Document)">
            <summary>
            Split Element MEP Or None MEP
            </summary>
            <param name="e"></param>
            <param name="p"></param>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.Direction(Revit.Elements.Element)">
            <summary>
            Get Direction From Element MEP
            </summary>
            <param name="element"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Element.IsParallel(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Check Two Element MEP is Parallel(Pipe/Duct/Cable Tray)
            </summary>
            <param name="element1"></param>
            <param name="element2"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.UnjoinGeometry(Autodesk.Revit.DB.Document,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Un join Geometry Element
            </summary>
            <param name="doc">default document current</param>
            <param name="elementFirst"></param>
            <param name="elementSecond"></param>
        </member>
        <member name="M:RevitModel.Element.JoinGeometry(Autodesk.Revit.DB.Document,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Join Geometry Element
            </summary>
            <param name="doc">default document current</param>
            <param name="elementFirst"></param>
            <param name="elementSecond"></param>
        </member>
        <member name="M:RevitModel.Element.IsJoined(Autodesk.Revit.DB.Document,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Check See Element Is Joined
            </summary>
            <param name="doc">default document current</param>
            <param name="elementFirst">element first want check </param>
            <param name="elementSecond">element second want check</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.IsHidden(Revit.Elements.Element)">
            <summary>
            Return All Element Hidden in view
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.Level(Autodesk.Revit.DB.Document,System.Collections.Generic.IEnumerable{Revit.Elements.Element})">
            <summary>
            Return Level Of Element
            </summary>
            <param name="doc">default document current</param>
            <param name="element"></param>
            <returns name="level">Level</returns>
        </member>
        <member name="M:RevitModel.Element.Rotate(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector,System.Int32)">
            <summary>
            Rotate Element With Origin  | Family Instance Axis Z and other option with Axis
            </summary>
            <param name="Element"></param>
            <param name="Exit"></param>
            <param name="Degrees"></param>
            <returns>Element with new location Rotated</returns>
        </member>
        <member name="M:RevitModel.Element.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move element to new location
            </summary>
            <param name="element">element</param>
            <param name="point">point want move to this</param>
            <returns>bool true if moved</returns>
        </member>
        <member name="M:RevitModel.Element.GetPointList(Revit.Elements.Element)">
            <summary>
                Gets the element's point set base on distance.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetEdgeList(Autodesk.Revit.DB.Element)">
            <summary>
                Gets the element's edge list.
            </summary>
            <param name="elm"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetSolidList(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ViewDetailLevel)">
            <summary>
                Gets the element's valid solid list.
            </summary>
            <param name="elm"></param>
            <param name="lvl"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.GetSolidList(Autodesk.Revit.DB.GeometryElement,System.Int32)">
            <summary>
                Gets the element's valid solid list.
            </summary>
            <param name="ge"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.WrapElement(Revit.Elements.Element)">
            <summary>
            Convert Element DynamoRevit to Element RevitAPI
            </summary>
            <param name="element">Revit.Element.Element</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.UnWrapElement(Autodesk.Revit.DB.Element)">
            <summary>
            Convert Element Revit API to Element Dynamo Revit
            </summary>
            <param name="element">Autodesk.Revit.DB.Element</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.CopyElementToNewLocation(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean)">
            <summary>
            Copy Element To New Location(Can Use For Group)
            </summary>
            <param name="element">element want copy</param>
            <param name="point">point want move</param>
            <param name="RemoveElementOld">True To Delete Element LocationOld</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.CopyToLevel(System.Collections.Generic.IEnumerable{Revit.Elements.Element},Revit.Elements.Element)">
            <summary>
            Copy Element To New Level
            </summary>
            <param name="element"></param>
            <param name="level"></param>
            <returns name="elements"></returns>
            <exception cref="!:ArgumentNullException"></exception>
        </member>
        <member name="M:RevitModel.Element.Connectors(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
                Returns every connectors on an elements in model.If not return Empty List
            </summary>
            <param name="elements">Element in MEP Model</param>
            <returns name="connector">Connectors is Element</returns>
        </member>
        <member name="M:RevitModel.Element.ConnectorManager(Revit.Elements.Element)">
            <summary>
            Get Connector Manager Element
            </summary>
            <param name="element"></param>
            <returns name="Connectormanager"></returns>
            <exception></exception>
        </member>
        <member name="M:RevitModel.Element.RemovePaint(Revit.Elements.Element)">
            <summary>
            Remove Paint Element
            </summary>
            <param name="Element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.HasMaterial(Revit.Elements.Element)">
            <summary>
            Check Element Has Material
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.SelectOrderedFaceElements(System.Boolean)">
            <summary>
            Select Ordered Face Elements
            </summary>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.OverrideColorInView(DSCore.Color,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Override the element's color in the view.
            </summary>
            <param name="color"></param>
            <param name="element"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Element.Branches(Autodesk.Revit.DB.ConnectorManager)">
            <summary>
            Return Branches Of ConnectorManager
            </summary>
            <param name="connectorManager"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.ElementType">
            <summary>
            All Problem with element type
            </summary>
        </member>
        <member name="M:RevitModel.ElementType.Element(Revit.Elements.Element)">
            <summary>
            Get Element From Element Type / Rev Link Type ,...
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Export">
            <summary>
            Any Event for export model 
            </summary>
        </member>
        <member name="M:RevitModel.Export.ExportPCF(Autodesk.Revit.DB.Document,Revit.Elements.Element,System.String,System.String)">
            <summary>
            Export File To PCF
            </summary>
            <param name="doc">default document current</param>
            <param name="elementFab">MEP Fabrication</param>
            <param name="folder">Folder To Save File</param>
            <param name="name">File Name</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Export.ExportDWG(System.String,System.String,Revit.Elements.Element)">
            <summary>
            Export View to DWG
            </summary>
            <param name="Directory">folder to export</param>
            <param name="filename">name want save file</param>
            <param name="view">view want export to dwg(Can 3D)</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Export.ExportViewToFBX(System.String,System.String,Revit.Elements.Element)">
            <summary>
                Export View3D to FBX
            </summary>
            <param name="Directory"></param>
            <param name="filename"></param>
            <param name="View3DExport"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Export.ExportNWC(System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Revit.Elements.Element)">
            <summary>
            Export Revit To NWC
            </summary>
            <param name="folder">Folder to Export</param>
            <param name="name">Name NWC File Want Export</param>
            <param name="exportLinks">True to want include export Revit Linked</param>
            <param name="ExportElementIds">True to Want Export ElementID</param>
            <param name="NavisCoordinates">input 0 to Internal Coordinates, 1 to Share Coordinates, Default ShareCoordinates </param>
            <param name="ExportUrls">Default False</param>
            <param name="view3D">If not input, Automatic Create View3D and Export All Model</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Export.ExportIFC(Autodesk.Revit.DB.Document,System.String,System.String,System.String)">
            <summary>
            Export Model Format IFC
            </summary>
            <param name="doc">default document current</param>
            <param name="folder"></param>
            <param name="name"></param>
            <param name="fileVersion"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Export.ScheduleToCsv(Revit.Elements.Element,System.String)">
            <summary>
            Export Schedule To CSV
            </summary>
            <param name="schedule">View Schedule</param>
            <param name="PathDirectory">Default Path Document</param>
            <returns name="ExportedPath"></returns>
        </member>
        <member name="T:RevitModel.Family">
            <summary>
            
            </summary>
        </member>
        <member name="T:RevitModel.FamilyInstance">
            <summary>
            All Problem with Family instance
            </summary>
        </member>
        <member name="M:RevitModel.FamilyInstance.Family(Revit.Elements.Element)">
            <summary>
            Return Family From Family instance
            </summary>
            <param name="familyinstance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.GetAllFamilyInstance(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Get All FamilyInstance In Model
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.GetFamilyParameter(Revit.Elements.Element)">
            <summary>
            Get All Share FamilyInstance Parameter
            </summary>
            <param nameType="Element"></param>
            <param name="familyinstance">family instance in document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.IsShared(Revit.Elements.Element)">
            <summary>
            Check FamilyInstance Is Share, Return True Or False
            </summary>
            <param nameType="Element"></param>
            <param name="familyinstance">family instance in document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.OmniClassNumber(Revit.Elements.Element)">
            <summary>
            Return OmniClass Number FamilyInstance 
            </summary>
            <param nameType="element"></param>
            <param name="familyinstance">family instance in document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.OmniClassTitle(Revit.Elements.Element)">
            <summary>
            Return Omni Class Title FamilyInstance
            </summary>
            <param nameType="element"></param>
            <param name="familyinstance">family instance in document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.PartType(Revit.Elements.Element)">
            <summary>
            Return Part Type FamilyInstance Instance
            </summary>
            <param nameType="element"></param>
            <param name="familyinstance">family instance in document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.SetFamilyShared(Revit.Elements.Element,System.Boolean)">
            <summary>
            Set FamilyInstance Shared Or No Shared
            </summary>
            <param nameType="element"></param>
            <param name="familyinstance">family instance in document</param>
            <param name="setShared">bool</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.DuplicateFamilyType(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate A FamilyInstance Type In FamilyInstance
            </summary>
            <param name="familyinstance"></param>
            <param name="nameType"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.DeleteFamilyType(Revit.Elements.Element,System.String)">
            <summary>
            Delete FamilyInstance Type In FamilyInstance
            </summary>
            <param name="familyinstance"></param>
            <param name="nameType"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.RenameFamilyType(Revit.Elements.Element,System.String,System.String)">
            <summary>
            Change A Name FamilyInstance Type Old To Name FamilyInstance Type New
            </summary>
            <param name="familyinstance">family instance in document</param>
            <param name="oldName">old name of family instance</param>
            <param name="newName">new name of family instance</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.RenameFamily(Revit.Elements.Element,System.String)">
            <summary>
            Rename A FamilyInstance To New Name
            </summary>
            <param name="familyinstance">family instance in document</param>
            <param name="newName">new name of family instance</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.ChangefamilyType(Revit.Elements.Element,System.String)">
            <summary>
            Change FamilyInstance Type Current To Type FamilyInstance New
            </summary>
            <param name="familyinstance"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.FamilyInstanceByName(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Get FamilyInstance Instance By Name
            </summary>
            <param name="doc">default document current</param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.GetInstancesBySymbol(Autodesk.Revit.DB.FamilySymbol)">
            <summary>
            Get FamilyInstance Instance By SymBol
            </summary>
            <param name="FamilySymbol"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.PointReference(Revit.Elements.Element)">
            <summary>
            Get FamilyInstance Point Reference Create Dim
            </summary>
            <param name="familyinstance"></param>
            <returns name = "Point"></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.Reference(Revit.Elements.Element)">
            <summary>
            Get FamilyInstance Reference Create Dimmention
            </summary>
            <param name="Familyinstance"></param>
            <returns name="Reference"></returns>
        </member>
        <member name="M:RevitModel.FamilyInstance.FamilyInstanceByPoint(Autodesk.Revit.DB.Document,Autodesk.DesignScript.Geometry.Point,Revit.Elements.FamilyType)">
            <summary>
            Create Family Instance Not Delete Family Without Deleting The Previous Element
            </summary>
            <param name="doc">default document current</param>
            <param name="point">point place family </param>
            <param name="familyType">family want place</param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Grid">
            <summary>
            All Problem with grid
            </summary>
        </member>
        <member name="M:RevitModel.Grid.Convert3DTo2D(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Convert grid 3D to 2D 
            </summary>
            <param name="view">View FloorPlan Or Section </param>
            <param name="GridorLevel">Grid or Level Grid</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Grid.Convert2DTo3D(Revit.Elements.Views.View,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Convert grid 2D to 3D 
            </summary>
            <param name="view">View FloorPlan Or Section </param>
            <param name="GridorLevel">Grid or Level Grid </param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Grid.Bubble(System.String,System.Collections.Generic.List{Revit.Elements.Element},Revit.Elements.Views.View)">
            <summary>
            Set Bubble Grid Or Level Left/Right/All/None Quickly 
            </summary>
            <param name="BubbleType">Bubble Type Selection</param>
            <param name="Grid">Element Grid</param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Grid.Curve(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Get Curve From Grid In View
            </summary>
            <param name="grid">Grid Need Get Curve</param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Group">
            <summary>
            all problem with group
            </summary>
        </member>
        <member name="M:RevitModel.Group.Create(System.String,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Create Group Element
            </summary>
            <param name="name">Name Group want create</param>
            <param name="element">element need create group</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Group.Rotate(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector,System.Int32)">
            <summary>
            Rotate Group Not Change Origin Group
            </summary>
            <param name="Group"></param>
            <param name="Exit"></param>
            <param name="Degrees"></param>
            <returns>Element with new location Rotated</returns>
        </member>
        <member name="T:RevitModel.Levels">
            <summary>
            Check All Case Of Levels
            </summary>
        </member>
        <member name="M:RevitModel.Levels.LevelHasView(Revit.Elements.Level)">
            <summary>
                Check to see if the level has a view created for it.
            </summary>
            <param name="Level">level in document</param>
            <returns name="result">Does it have a level?</returns>
            <search>
                Level.HasView
            </search>
        </member>
        <member name="M:RevitModel.Levels.GetAllLevel(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Return All Level In Document
            </summary>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Levels.Curve(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Get Curve From Level In View
            </summary>
            <param name="level"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Levels.LowLevel(Autodesk.Revit.DB.Document,System.Double)">
            <summary>
            Level equal or below given elevation
            </summary>
            <param name="doc">revit document default document current</param>
            <param name="elevation">Elevation in meters [m]</param>
        </member>
        <member name="M:RevitModel.Levels.HighLevel(Autodesk.Revit.DB.Document,System.Double)">
            <summary>
            Level equal or above given elevation
            </summary>
            <param name="document">Revit document</param>
            <param name="elevation">Elevation in meters [m]</param>
        </member>
        <member name="M:RevitModel.Levels.LowLevel(Revit.Elements.Level)">
            <summary>
            Level below given elevation
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.LinkedElement">
            <summary>
            </summary>
        </member>
        <member name="M:RevitModel.LinkedElement.GetLinkInstance(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Return All Linked In Model Levels.Input True False to fresh.
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh">fresh to get document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.IsLoaded(Revit.Elements.Element)">
            <summary>
            Check File Revit Loaded In Project
            </summary>
            <param name="RevitLinkInstance">Revit Link</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.Unload(Revit.Elements.Element)">
            <summary>
            Unload Link Revit instance
            </summary>
            <param name="RevitLinkInstance"></param>
            <returns name="RevitLinkType"></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.Insert(Autodesk.Revit.DB.Document,System.String,System.Boolean,System.String)">
            <summary>
             Insert file path link revit to model
            </summary>
            <param name="doc">default document current</param>
            <param name="path">Path rvt to Link</param>
            <param name="linkoptions">Link Option To Link, Default Origin to Origin</param>
            <param name="pin">Set Pin Rvt linked instance</param>
            <returns name="revitlinkinstance"></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.ToProjectBasePoint(Revit.Elements.Element)">
            <summary>
            Move Revit Link Instance Reposition To Project Base Point
            </summary>
            <param name="RevitLinkInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.ToInternalOrigin(Revit.Elements.Element)">
            <summary>
            Move Revit Link Instance Reposition To Internal Origin
            </summary>
            <param name="RevitLinkInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.GetTransform(Revit.Elements.Element)">
            <summary>
            Return Correct Transform Revit Linked Instance
            </summary>
            <param name="linkedDocInstance"></param>
            <returns name="transform"></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.GetOrigin(Autodesk.Revit.DB.Transform)">
            <summary>
            Return Origin Link instance
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.GetCoordinateSystem(Autodesk.Revit.DB.Transform)">
            <summary>
            Return CoordinateSystem linkedDocInstance
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.LinkedElement.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Move Link instance to new location
            </summary>
            <param name="revitlinkinstance">linkedInstance</param>
            <param name="point">point want move to this</param>
            <returns>bool true if moved</returns>
        </member>
        <member name="T:RevitModel.Parameter">
            <summary>
            Use For Parameter In Model
            </summary>
        </member>
        <member name="M:RevitModel.Parameter.CreateBySharedParameter(Autodesk.Revit.DB.Document,System.String,System.Boolean,System.String[],System.String)">
            <summary>
            Creates a project parameter based on the definition of a shared parameter.
            </summary>
            <param name="doc">default document current</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="instance">Set to true to create an instance parameter, false to create a type parameter.</param>
            <param name="categories">The categories to add this parameter to, by their built in parameter name.</param>
            <param name="parameterGroup">The parameter group for this parameter.</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Parameter.LoadSharedParameterFromFile(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Load Share Parameters from the text file, return true if loaded
            </summary>
            <param name="doc">default document current</param>
            <param name="filePath"></param>
            <returns>
            return true if succeeded; otherwise false
            </returns>
        </member>
        <member name="M:RevitModel.Parameter.AddShareParameterToFamily(Revit.Elements.Element,System.String,System.String,System.Boolean)">
            <summary>
            Add Share Parameter To Family, You Can Input From Family instance or Family Not Place In Model
            </summary>
            <param name="element"></param>
            <param name="parameterName"></param>
            <param name="builtinParameterGroup"></param>
            <param name="instance"></param>
            <returns name="logs"></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Parameter.Transfer(Revit.Elements.Element,Revit.Elements.Element,System.String)">
            <summary>
            Transfer Data Parameter From Element Source To Element Target
            </summary>
            <param name="elementtarget"></param>
            <param name="elementsource"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Parameter.RemoveShareParameterToFamily(Revit.Elements.Element,System.String)">
            <summary>
            Remove Share Parameter To Family, You Can Input From Family instance or Family Not Place In Model
            </summary>
            <param name="element"></param>
            <param name="parameterName"></param>
            <returns name="logs"></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RevitModel.Parameter.DeleteSharedParameters(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
             Delete all shared parameters from document
            </summary>
        </member>
        <member name="M:RevitModel.Parameter.DeleteNonSharedProjectParam(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Delete Parameter None Share Project Parameter In Document
            </summary>
            <param name="doc">default document current</param>
            <param name="parametername"></param>
        </member>
        <member name="T:RevitModel.ProjectLocation">
            <summary>
            </summary>
        </member>
        <member name="M:RevitModel.ProjectLocation.Rename(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Rename Project Location In Document
            </summary>
            <param name="doc">default document current</param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.ProjectLocation.North(Autodesk.Revit.DB.Document)">
            <summary>
            Returns True North as a vector in the project coordinate system. The angle represents a right-handed rotation along the Z-axis to go from True to Project North.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Schedule">
            <summary>
            Fix All Problem with Schedule
            </summary>
        </member>
        <member name="M:RevitModel.Schedule.GetAllSchedule(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Get All Schedule Correct In View Created
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh">true or false to reset</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Schedule.CopyElement(Autodesk.Revit.DB.View,Autodesk.Revit.DB.View,Revit.Elements.Element)">
            <summary>
            Copy Schedule Or Legend To Other View Sheet
            </summary>
            <param name="vsource">Schedule Or Legend</param>
            <param name="vtarget">Schedule Or Legend</param>
            <param name="schedule"></param>
            <returns name="element"></returns>
        </member>
        <member name="T:RevitModel.Sheets">
            <summary>
            All Problem With Sheets
            </summary>
        </member>
        <member name="M:RevitModel.Sheets.AllTitleblock(Autodesk.Revit.DB.Document)">
            <summary>
            Get All Title Block In Document
            </summary>
            <param name="doc">default document current</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Sheets.Titleblock(Revit.Elements.Element)">
            <summary>
            Return All Title Block In Sheet
            </summary>
            <param name="viewsheet"></param>
            <returns name="titleblock"></returns>
        </member>
        <member name="M:RevitModel.Sheets.Size(Revit.Elements.Element)">
            <summary>
            Return Size Of Sheet
            </summary>
            <param name="viewsheet"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Sheets.All(Autodesk.Revit.DB.Document)">
            <summary>
            Get All Sheet In Document
            </summary>
            <returns name="Sheet"></returns>
        </member>
        <member name="M:RevitModel.Sheets.Create(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},Revit.Elements.Element)">
            <summary>
                Create Sheet In Revit
            </summary>
            <param name="sheetNames">sheet name want create</param>
            <param name="sheetNumbers">sheet number want create</param>
            <param name="titleBlock">title block want create [A0,A1,A2,A4...]</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Sheets.AddView(Revit.Elements.Views.Sheet,Revit.Elements.Views.View,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Add View To Sheet 
            </summary>
            <param name="sheet">sheet to place view</param>
            <param name="view">view want place</param>
            <param name="point">location to place</param>
            <returns name="viewport"></returns>
        </member>
        <member name="M:RevitModel.Sheets.ViewportLocations(Revit.Elements.Views.Sheet)">
            <summary>
            Return All Viewport Location in Sheet
            </summary>
            <param name="sheet">sheet in document</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Sheets.PlacedViews(Revit.Elements.Views.Sheet)">
            <summary>
            Return All View Placed on Sheet
            </summary>
            <param name="sheet">Sheet In Document</param>
            <returns name="views"></returns>
        </member>
        <member name="M:RevitModel.Sheets.Schedule(Revit.Elements.Element,System.Boolean)">
            <summary>
            Return All Schedule Added in Sheet
            </summary>
            <param name="sheet">sheet view</param>
            <param name="revision"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.TextNote.OutLine(Revit.Elements.Element)">
            <summary>
            Return Outline Text Note
            Only Support For Text Vertical And Horizontal
            </summary>
            <param name="textnote"></param>
            <returns name="rectangle"></returns>
        </member>
        <member name="M:RevitModel.TextNote.UpDirection(Revit.Elements.Element)">
            <summary>
            Return Up Direction Text note
            </summary>
            <param name="textnote"></param>
            <returns name="xyz"></returns>
        </member>
        <member name="M:RevitModel.TextNote.BaseDirection(Revit.Elements.Element)">
            <summary>
            Return Base Direction TextNote
            </summary>
            <param name="textnote"></param>
            <returns name="xyz"></returns>
        </member>
        <member name="M:RevitModel.TextNote.Coord(Revit.Elements.Element)">
            <summary>
            Return Point Coordinate Of TextNote
            </summary>
            <param name="textnote"></param>
            <returns name="xyz"></returns>
        </member>
        <member name="M:RevitModel.TextNote.Text(Revit.Elements.Element)">
            <summary>
            Return Text Of Text Note
            </summary>
            <param name="textnote">text note</param>
            <returns name="Name"></returns>
        </member>
        <member name="M:RevitModel.TextNote.Angle(Revit.Elements.Element,System.Boolean)">
            <summary>
            Return Angle Of TextNote By Direction Y (Angle 360)
            </summary>
            <param name="textnote">text note want check angle</param>
            <param name="round">round result angle</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.TextNote.Rotate(Revit.Elements.Element,System.Nullable{System.Double})">
            <summary>
            Rotate Text Note By Angle
            </summary>
            <param name="textnote">Element TextNote</param>
            <param name="angle">Angle Want Rotate</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.TextNote.Copy(Revit.Elements.Element,Revit.Elements.Element,System.Boolean)">
            <summary>
            Copy TextNote From View Current To View Other
            </summary>
            <param name="textnote">text note want copy</param>
            <param name="view">view target</param>
            <param name="copyleader">true to want copy leader of text note</param>
            <returns name="newtextnote"></returns>
        </member>
        <member name="M:RevitModel.TextNote.SetText(Revit.Elements.Element,System.String)">
            <summary>
            Change Text note to other value 
            </summary>
            <param name="Textnote">Text note change</param>
            <param name="Value">value need set</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.TextNote.Leaders(Revit.Elements.Element)">
            <summary>
            Return list leader of text note(Start,End,Anchor,Sharp)
            </summary>
            <param name="TextNote"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.TextNote.CreateLeaderStraight(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create Leader Straight
            </summary>
            <param name="Textnote"></param>
            <param name="Elbow"></param>
            <param name="End"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.TextNote.CreateLeaderArc(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create Leader Arc
            </summary>
            <param name="Textnote"></param>
            <param name="Elbow"></param>
            <param name="End"></param>
            <param></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Titleblock.Size(Revit.Elements.Element)">
            <summary>
            Return Size Of Title block
            </summary>
            <param name="titleblock">family instance</param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.ViewPort">
            <summary>
            All Problem With Viewport
            </summary>
        </member>
        <member name="M:RevitModel.ViewPort.BoxOutLine(Revit.Elements.Element)">
            <summary>
            Return List Line Rectangular Of Box Outline
            </summary>
            <param name="viewport"></param>
            <returns ></returns>
        </member>
        <member name="M:RevitModel.ViewPort.LabelOutLine(Revit.Elements.Element)">
            <summary>
            Return List Line Rectangular Of Label Outline Of Title Viewport
            </summary>
            <param name="viewport"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.ViewPort.Scale(Revit.Elements.Element)">
            <summary>
            ReTurn Scale Of Viewport Flowing With View Main
            </summary>
            <param name="viewport"></param>
            <returns name="scale"></returns>
        </member>
        <member name="M:RevitModel.ViewPort.View(Revit.Elements.Element)">
            <summary>
            ReTurn View Of Viewport
            Example ViewportA From ViewSectionA
            </summary>
            <param name="viewport"></param>
            <returns name="view">view of viewport</returns>
        </member>
        <member name="M:RevitModel.ViewPort.Location(Revit.Elements.Element)">
            <summary>
            ReTurn Center Location Viewport
            Example ViewportA From ViewSectionA
            </summary>
            <param name="viewport"></param>
            <returns name="point"></returns>
        </member>
        <member name="M:RevitModel.ViewPort.SetLocation(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Set New Location Viewport
            Example ViewportA From ViewSectionA
            </summary>
            <param name="viewport">viewport element</param>
            <param name="location">Location Want Place Viewport</param>
            <returns name="viewport"></returns>
        </member>
        <member name="T:RevitModel.Views">
            <summary>
            Thanks a Author Github
            </summary>
        </member>
        <member name="T:RevitModel.Views.ViewCrop">
            <summary>
            Struct to hold the crop element and crop region for a v
            </summary>
        </member>
        <member name="M:RevitModel.Views.CreateNavisView(Autodesk.Revit.DB.Document,System.Boolean,System.String)">
            <summary>
                Create View3D Navisworks
            </summary>
            <param name="doc">default document current</param>
            <param name="Run"></param>
            <param name="ViewName"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.CropView(Autodesk.Revit.DB.Document,Revit.Elements.Element,System.Boolean)">
            <summary>
                Crop View Element, Input True to Set And False to Un crop
            </summary>
            <param name="doc">default document current</param>
            <param name="View"></param>
            <param name="Crop"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.Rotate(Autodesk.Revit.DB.Document,Revit.Elements.Views.View,System.Double)">
            <summary>
            Rotates a v around its center point. It is equivalent to selecting the crop region and rotating it counter clockwise.
            </summary>
            <param name="doc"></param>
            <param name="view">The v to rotate.</param>
            <param name="degrees">Rotation angle in degrees. Everything visible in the v will be rotated clockwise by this amount.</param>
            <returns>The rotated v.</returns>
        </member>
        <member name="M:RevitModel.Views.GetViewCrop(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View)">
            <summary>
            Get the v crop element and crop region curves
            </summary>
            <param name="doc">default document current</param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.RotateCropElement(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,Autodesk.Revit.DB.Element,System.Double)">
            <summary>
            Rotates the crop region of a v by the amount specified
            </summary>
            <param name="doc">default document current</param>
            <param name="view"></param>
            <param name="cropElement"></param>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.GetRotation(Revit.Elements.Views.View)">
            <summary>
            Get the rotation of the crop element of a v. The rotation is expressed in degrees, counter clockwise.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.ResetRotation(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Resets the rotation of a v by setting its orientation to true north and then back to project north.
            </summary>
            <param name="doc">default document current</param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.CopyCrop(Autodesk.Revit.DB.Document,Revit.Elements.Views.View,Revit.Elements.Views.View)">
            <summary>
            Copies the crop region and rotation of one v and applies it to another. Useful for creating views with identical cropping at different levels in a project.
            </summary>
            <param name="doc">default document current</param>
            <param name="source">The source v.</param>
            <param name="target">The target v.</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.SetRotation(Autodesk.Revit.DB.Document,Revit.Elements.Views.View,System.Double)">
            <summary>
            Sets the rotation angle of a v around its center point. It is equivalent to resetting its rotation and then selecting the crop region and rotating it counter clockwise.
            </summary>
            <param name="doc">default document current</param>
            <param name="view"></param>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.GetCropElement(Autodesk.Revit.DB.Document,Revit.Elements.Views.View)">
            <summary>
            Returns the crop element for the view.
            </summary>
            <param name="doc">default document current</param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Views.SetCropBoxVisibility(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Set CropBox Visibility Viewport 
            </summary>
            <param name="doc">default document current</param>
            <param name="visible"> Set 1 to visible 0 to Unvisitable</param>
            <returns name="result"></returns>
        </member>
        <member name="M:RevitModel.Views.Active(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Get Active View In Document
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh">Set True False to Fresh Active View | default true</param>
            <returns>Active In document</returns>
        </member>
        <member name="M:RevitModel.Views.Duplicate(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Duplicate View
            </summary>
            <param name="doc">default document current</param>
            <param name="view"></param>
            <returns name="view"></returns>
        </member>
        <member name="M:RevitModel.Views.GetViewTemplateId(Revit.Elements.Element)">
            <summary>
            Get View TemplateId From ViewPlane
            </summary>
            <param name="viewPlan"></param>
            <returns name="Element"></returns>
        </member>
        <member name="M:RevitModel.Views.SetViewTemplateId(Revit.Elements.Element,Autodesk.Revit.DB.ElementId)">
            <summary>
            Set View Template
            </summary>
            <param name="viewPlan"></param>
            <param name="id"></param>
        </member>
        <member name="M:RevitModel.Views.OutLine(Revit.Elements.Element)">
            <summary>
            Return Point,Curve,Rectangular Of View Outline
            </summary>
            <param name="view"></param>
            <returns name="Lines"></returns>
        </member>
        <member name="M:RevitModel.Views.ExportImage(Revit.Elements.Element,System.String)">
            <summary>
            Export Image View (3D,Sheet,Plane,..)
            </summary>
            <param name="view"></param>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Warning">
            <summary>
            Thanks John_Pierson
            </summary>
        </member>
        <member name="M:RevitModel.Warning.GetWarningContain(Autodesk.Revit.DB.Document,System.String)">
            <summary>
                Get Warning Element By Contain Name Warning
            </summary>
            <param name="doc">default document current</param>
            <param name="Contains">Name Warning Want Get</param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Warning.GroupByName(System.Collections.Generic.List{Autodesk.Revit.DB.FailureMessage})">
            <summary>
                Return All Message Warning Group And Sort Element
            </summary>
            <param name="warning"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Warning.GetAll(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Return All Warning In Model
            </summary>
            <param name="doc">default document current</param>
            <param name="fresh"></param>
            <returns name="warning"></returns>
        </member>
        <member name="M:RevitModel.Warning.GetWarningsInfo(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                This node will get the warnings for the current document. Revit 2018 and up only!
            </summary>
            <param name="doc">default document current</param>
            <param name="toggle">Toggle to reset the collection.</param>
            <returns name="Warning Text">The description of the warning.</returns>
            <returns name="Failing Element">The elements that are failing.</returns>
            <search>
                warnings
            </search>
        </member>
        <member name="M:RevitModel.Warning.Description(Autodesk.Revit.DB.FailureMessage)">
            <summary>
                Provides the full description of the warning.
            </summary>
            <param name="warning">The warning to get the description of.</param>
            <returns name="description">The description.</returns>
        </member>
        <member name="M:RevitModel.Warning.Severity(Autodesk.Revit.DB.FailureMessage)">
            <summary>
                Possibles severity messages include, Warning, Error and Document Corruption.
            </summary>
            <param name="warning">The warning to get the severity of.</param>
            <returns name="severity">How bad is it doc? </returns>
        </member>
        <member name="M:RevitModel.Warning.FailingElements(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.FailureMessage)">
            <summary>
                Retrieves the elements that are failing for that warning instance.
            </summary>
            <param name="doc">default document current</param>
            <param name="warning">The warning to get the failing elements for.</param>
            <returns name="failingElements">All of the failing elements for that specific warning.</returns>
        </member>
        <member name="M:RevitModel.Warning.ById(Autodesk.Revit.DB.Document,System.String)">
            <summary>
                Create Performance Adviser Rule by Id
            </summary>
            <param name="doc">default document current</param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RevitModel.Warning.ByDescription(Autodesk.Revit.DB.Document,System.String)">
            <summary>
                Create Performance Adviser Rule by Id
            </summary>
            <param name="doc">default document current</param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="T:RevitModel.Worksharing">
            <summary>
            </summary>
        </member>
        <member name="M:RevitModel.Worksharing.GetAllWorkset(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
                Get All Workset In Model
            </summary>
            <param name="doc">default document current</param>
            <param name="Reset">Set True False to Reset</param>
            <returns name="WorksetName">Name Return to Workset</returns>
            <returns name="WorksetId">Id Return to Workset</returns>
        </member>
        <member name="M:RevitModel.Worksharing.WorksharingCreator(Revit.Elements.Element)">
            <summary>
                This node will output the username of the creator of the element if it is available. Keep in mind this only works
                with work shared documents!
            </summary>
            <param name="element">Element need Check</param>
            <returns name="CreatorName">The User Of</returns>
        </member>
        <member name="M:RevitModel.Worksharing.WorksharingInfo(Revit.Elements.Element)">
            <summary>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:Systems.Math">
            <summary>
            Process Math
            </summary>
        </member>
        <member name="M:Systems.Math.DegToRadius(System.Double)">
            <summary>
            Convert degree To Rad
            </summary>
            <param name="degreee"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Math.RadToDegrees(System.Double)">
            <summary>
                Utility method to convert an angle from radians to degrees
            </summary>
            <param name="radians">The angle (in radians) to be converted</param>
            <returns>Returns the input angle in Radians</returns>
        </member>
        <member name="M:Systems.Math.ToFeet(System.Double)">
            <summary>
            Convert Number To Feet
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Math.FootToMmString(System.Double)">
            <summary>
            Convert Foot To mm String
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Math.FootToMm(System.Double)">
            <summary>
            Convert a given length in feet to Millimeter.
            </summary>
        </member>
        <member name="T:Systems.Core">
            <summary>
            </summary>
        </member>
        <member name="M:Systems.Core.RevitPathInfo">
            
        </member>
        <member name="M:Systems.Core.RevitInfo">
            <summary>
                Return Info Application Revit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.DynamoInfo">
            <summary>
                Return Info Version Dynamo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.UserName">
            <summary>
                Return User Name PC
            </summary>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.ClipBoardTo(System.Collections.IList)">
            <summary>
                Copy object to System. Can copy elements from a 1D list, but not from 2D..nD!
                If List Level is used, then will the last item be available in the clipboard.
            </summary>
            <param name="element">element</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Systems.Core.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resize width and height image 
            </summary>
            <param name="image"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.SaveAsImage(System.String,System.Drawing.Bitmap)">
            <summary>
            Save Image as New Name
            </summary>
            <param name="path"></param>
            <param name="image"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Systems.Core.Exportmethod(System.String)">
            <summary>
            Export method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.GetFileFolder(System.String)">
            <summary>
            Get All File Have In Folder
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.GetImagesPath(System.String)">
            <summary>
            Return all Image format "jpg", "jpeg", "png", "gif", "tiff", "bmp", "svg" in folder
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.GetFilesFrom(System.String,System.String[],System.Boolean)">
            <summary>
            Get File From folder with filter
            </summary>
            <param name="searchFolder"></param>
            <param name="filters"></param>
            <param name="isRecursive"></param>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.WindowsVersion">
            <summary>
            Get Version Python
            </summary>
            <returns></returns>
        </member>
        <member name="M:Systems.Core.UnWrapElement(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Convert element to Wrap
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
    </members>
</doc>
