{
  "Uuid": "b76d6ba6-5304-461d-9154-5c22065de387",
  "IsCustomNode": true,
  "Category": "Synthesize.Packages.Springs.Revit.FamilyInstance",
  "Description": "You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest.",
  "Name": "SP.FamilyInstance.ByGeometry",
  "ElementResolver": {
    "ResolutionMap": {
      "PolyCurve": {
        "Key": "Autodesk.DesignScript.Geometry.PolyCurve",
        "Value": "ProtoGeometry.dll"
      },
      "Vector": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "CoordinateSystem": {
        "Key": "Autodesk.DesignScript.Geometry.CoordinateSystem",
        "Value": "ProtoGeometry.dll"
      },
      "Rectangle": {
        "Key": "Autodesk.DesignScript.Geometry.Rectangle",
        "Value": "ProtoGeometry.dll"
      },
      "Plane": {
        "Key": "Autodesk.DesignScript.Geometry.Plane",
        "Value": "ProtoGeometry.dll"
      },
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      },
      "FamilyInstance": {
        "Key": "Revit.Elements.FamilyInstance",
        "Value": "RevitNodes.dll"
      },
      "Cuboid": {
        "Key": "Autodesk.DesignScript.Geometry.Cuboid",
        "Value": "ProtoGeometry.dll"
      },
      "Sphere": {
        "Key": "Autodesk.DesignScript.Geometry.Sphere",
        "Value": "ProtoGeometry.dll"
      },
      "Category": {
        "Key": "Revit.Elements.Category",
        "Value": "RevitNodes.dll"
      },
      "List": {
        "Key": "DSCore.List",
        "Value": "DSCoreNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARgeometry",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "7971abd8ecd24e2fa28e52027545f3f6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0b97e37d672544b3af48744bda2ac53f",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARfamilyTemplatePath",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "487f04110bdf4764973dcae73f53aff1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e1feeead9ca44210bed4157324cdeb70",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARfamilyName",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "5923b814be994137acdd60f1a8177b72",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f55bbf452ba84252a93d862dae8e6d04",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARcategory",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "Revit.Elements.Category.ByName(\"OST_GenericModel\")",
        "Description": ""
      },
      "Id": "3ab553258be4494083412396cfdb6443",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "19a5e7fae48e4bf0ab5d696cfffafeaf",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARinstance",
      "Id": "325026eade93449a9cffbea72f2165f3",
      "Inputs": [
        {
          "Id": "a273da39d7644b03bbfc2f336392f62c",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARmaterialName",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "aff75132a3454885beeefdf45692a2f1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6e0d531aafff4dd1930d15ef5582257e",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARisVoid",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "5340671de4f14bcc946dd88da17a3e84",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3faae4045bcc4562802763a8a95ccf8c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARfamily",
      "Id": "e35db8a4f8ae40deae1cdf5ba7ae6bb5",
      "Inputs": [
        {
          "Id": "bb8f2aff36894416a26ebb5a0ca67abd",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res[0];\nres[1];",
      "Id": "fba20a1f96ab4c49b5cc89d6e5b024aa",
      "Inputs": [
        {
          "Id": "adedb53ad949425199102054db16a13f",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6e320065306d4164bb9badd2857b35b1",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "77a4e4989f4449d1a336a739eba9cbc7",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARsubcategoryName",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "9934ac47c94d4bb18e0da2ae0a86a302",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ea0304466cea45009711d82dd19c0c29",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2016, Dimitar Venkov\r\n# @5devene, dimitar.ven@gmail.com\r\n# Modified & Improved By Karam Baki, karam@aecedx.com\r\nimport clr\r\nimport System\r\nfrom System.Collections.Generic import *\r\n\r\nfrom itertools import repeat\r\n\r\npf_path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\r\nimport sys\r\nsys.path.append('%s\\IronPython 2.7\\Lib' %pf_path)\r\nimport traceback\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.DesignScript.Geometry import Point as DynPoint\r\nfrom Autodesk.DesignScript.Geometry import Line as DynLine\r\nfrom Autodesk.DesignScript.Geometry import Curve as DynCurve\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import StructuralType\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nimport random\r\nimport string\r\n\r\ndef random_char(y):\r\n       return ''.join(random.choice(string.ascii_letters) for x in range(y))\r\n\r\ndef tolist(obj1):\r\n\tif hasattr(obj1,'__iter__'): return obj1\r\n\telse: return [obj1]\r\n\r\ndef output1(l1):\r\n\tif len(l1) == 1: return l1[0]\r\n\telse: return l1\r\n\r\ndef PadLists(lists):\r\n\tlen1 = len(lists[0])\r\n\tfor i in xrange(1,len(lists)):\r\n\t\tlen2 = len(lists[i])\r\n\t\tif len2 == len1 : continue\r\n\t\telif len2 > len1: lists[i] = lists[i][:len1]\r\n\t\telse : lists[i].extend(repeat(lists[i][-1],len1 - len2))\r\n\treturn lists\r\n\t\r\ndef flatten(x):\r\n    result = []\r\n    for el in x:\r\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\r\n            result.extend(flatten(el))\r\n        else:\r\n            result.append(el)\r\n    return result\r\n    \r\ndef freeformfromimportinstance(famdoc,importedelement,opt1):\r\n\t#opt1 = Options()\r\n\t#opt1.ComputeReferences = True\r\n\tgeom = importedelement.get_Geometry(opt1)\r\n\tgeomfix = []\r\n\tfor e in geom:\r\n\t\tgo = e.GetInstanceGeometry()\r\n\t\tfor g in go:\r\n\t\t\tt1.EnsureInTransaction(famdoc)\r\n\t\t\tgeomfix.append(FreeFormElement.Create(famdoc,g))\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\treturn geomfix\r\n\r\ndef freesat(sat_path,famdoc,s1,doc):\r\n\t\tt1 = TransactionManager.Instance\r\n\t\tt1.EnsureInTransaction(famdoc)\r\n\t\tshapeImporter = ShapeImporter()\r\n\t\tinputsat = ShapeImporterSourceFormat.SAT\r\n\t\tconverted = shapeImporter.Convert(famdoc, sat_path)\r\n\t\ttogolist = []\r\n\t\tfor e in converted:\r\n\t\t\ttry:\r\n\t\t\t\ttogolist.append(FreeFormElement.Create(famdoc,e))\r\n\t\t\texcept:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tfor to in togolist:\r\n\t\t\t\t\t\tfamdoc.Delete(to.Id)\r\n\t\t\t\t\ttogolist = []\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\t\tbreak\r\n\t\tshapeImporter.Dispose()\r\n\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\tif len(togolist) == 0:\r\n\t\t\ts1 = tolist(s1)\r\n\t\t\topt1 = Options()\r\n\t\t\topt1.ComputeReferences = True\r\n\t\t\tfor xx in s1:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tRevit.Transaction.Transaction.Start(famdoc)\r\n\t\t\t\t\tsatopt1 = SATImportOptions()\r\n\t\t\t\t\timportedelement = doc.GetElement(doc.Import(sat_path, satopt1, doc.ActiveView))\r\n\t\t\t\t\timportedelement.Pinned = False\r\n\t\t\t\t\tRevit.Transaction.Transaction.End(famdoc)\r\n\t\t\t\t\tfrom Autodesk.DesignScript import Geometry as dg\t\t\t\t\t\r\n\t\t\t\t\ttriggers = []\r\n\t\t\t\t\tkgeom = importedelement.get_Geometry(opt1)\r\n\t\t\t\t\tcentkgeomfix = []\r\n\t\t\t\t\tkgeomfix = []\r\n\t\t\t\t\tfor ke in kgeom:\r\n\t\t\t\t\t\tkgo = ke.GetInstanceGeometry()\r\n\t\t\t\t\t\tfor kg in kgo:\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\tcentkgeomfix.append(kg.ComputeCentroid().ToPoint())\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tcentkgeomfix.append(None)\r\n\t\t\t\t\t\t\tkgeomfix.append(kg)\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tcenmin = xx.Centroid()\r\n\t\t\t\t\t\tcenminelem = centkgeomfix[0]\r\n\t\t\t\t\t\tif dg.Geometry.DistanceTo(cenminelem,cenmin) > 0.2:\r\n\t\t\t\t\t\t\ttriggers.append(True)\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttriggers.append(False)\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tbboxorig = dg.BoundingBox.ByGeometry(xx)\r\n\t\t\t\t\t\telembbox = importedelement.get_BoundingBox(None).ToProtoType()\r\n\t\t\t\t\t\tzmin = bboxorig.MinPoint\r\n\t\t\t\t\t\tzminelem = elembbox.MinPoint\r\n\t\t\t\t\t\tzmax = bboxorig.MaxPoint\r\n\t\t\t\t\t\tzmaxelem = elembbox.MaxPoint\r\n\t\t\t\t\t\tif dg.Geometry.DistanceTo(zminelem,zmin) > 0.2 and dg.Geometry.DistanceTo(zmaxelem,zmax) > 0.2:\r\n\t\t\t\t\t\t\ttriggers.append(True)\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\ttriggers.append(False)\r\n\t\t\t\t\t\tif all(triggers):\r\n\t\t\t\t\t\t\tmidelem = kgeomfix[0].GetBoundingBox().Transform.Origin.ToPoint()\r\n\t\t\t\t\t\t\tmid = dg.Curve.PointAtParameter(dg.Line.ByStartPointEndPoint(bboxorig.MinPoint,bboxorig.MaxPoint),0.5)\r\n\t\t\t\t\t\t\tif dg.Geometry.DistanceTo(midelem,mid) > 0.2:\r\n\t\t\t\t\t\t\t\tline = dg.Line.ByStartPointEndPoint(midelem,mid)\r\n\t\t\t\t\t\t\t\ttran = dg.Geometry.Transform(line,dg.CoordinateSystem.ByOrigin(line.StartPoint),dg.CoordinateSystem.ByOrigin(0,0,0)).EndPoint.ToXyz()\r\n\t\t\t\t\t\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\t\t\t\t\t\t\timportedelement.Location.Move(tran)\r\n\t\t\t\t\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\r\n\t\t\t\t\t\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\ttogolist.append(freeformfromimportinstance(famdoc,importedelement,opt1))\r\n\t\t\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t\t\t\t\tdoc.Delete(importedelement.Id)\r\n\t\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\r\n\t\t\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\treturn togolist\r\n\r\nclass FamOpt1(IFamilyLoadOptions):\r\n\tdef __init__(self):\r\n\t\tpass\r\n\tdef OnFamilyFound(self,familyInUse, overwriteParameterValues):\r\n\t\treturn True\r\n\tdef OnSharedFamilyFound(self,familyInUse, source, overwriteParameterValues):\r\n\t\treturn True\r\n\r\ngeom = IN[0]\r\nif geom != None:\r\n\tgeom = tolist(geom)\r\nelse:\r\n\tpass\r\nfam_path = IN[1]\r\nnames = tolist(IN[2])\r\ncategory = tolist(IN[3])\r\nmaterial = tolist(IN[4])\r\nisVoid = tolist(IN[5])\r\nsubcat = tolist(IN[6])\r\nisShared = tolist(IN[7])\r\nplaceInstance = tolist(IN[8])\r\npositionSystem = tolist(IN[9])\r\nonemat = tolist(IN[10])\r\ninstancemat = tolist(IN[11])\r\n\r\nnewlist = []\r\nfor e in category:\r\n\ttry:\r\n\t\tnewlist.append(Revit.Elements.Category.ByName(e))\r\n\texcept:\r\n\t\tnewlist.append(e)\r\ncategory = newlist\r\n\r\ntry:\r\n\tfami = Revit.Elements.Family.ByName(names[0])\r\nexcept:\r\n\tfami = None\r\nfami = UnwrapElement(fami)\r\n\r\nif int(DocumentManager.Instance.CurrentUIApplication.Application.VersionNumber) < 2021:\r\n\tunits = doc.GetUnits().GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\tfactor = UnitUtils.ConvertToInternalUnits(1,units)\r\nelse:\r\n\tfactor = UnitUtils.ConvertToInternalUnits(1,doc.GetUnits().GetFormatOptions(SpecTypeId.Length).GetUnitTypeId())\r\nacceptable_views = ('ThreeD', 'FloorPlan', 'EngineeringPlan', 'CeilingPlan', 'Elevation', 'Section')\r\norigin = XYZ.Zero\r\nstr_typ = StructuralType.NonStructural\r\nt1 = TransactionManager.Instance\r\ntemp_path = System.IO.Path.GetTempPath()\r\ninvalid_chars = System.IO.Path.GetInvalidFileNameChars()\r\nsatOpt = SATImportOptions()\r\nsatOpt.Placement = ImportPlacement.Origin\r\nsatOpt.Unit = ImportUnit.Foot\r\nopt1 = Options()\r\nopt1.ComputeReferences = True\r\nSaveAsOpt = SaveAsOptions()\r\nSaveAsOpt.OverwriteExistingFile = True\r\n\r\n\r\ndef NewForm_background(s1, name1, cat1, isVoid1, mat1, subcat1, isShared1, placeInstance1, positionSystem1, onemat1, instancemat1):\r\n\tif mat1 == None or mat1 == \"\":\r\n\t\tmat1 = \"Default\"\r\n\tif doc.IsFamilyDocument == True and cat1.Name != \"Mass\":\r\n\t\tif (doc.OwnerFamily.FamilyCategory).Name == \"Mass\":\r\n\t\t\tisShared1 = True\r\n\t\t\tnamesplit = name1.split(\" \")\r\n\t\t\tnamenum = namesplit.pop(-1)\r\n\t\t\tnamesplit.append(random_char(5))\r\n\t\t\tnamesplit.append(namenum)\r\n\t\t\tjoined = \" \".join(namesplit)\r\n\t\t\tname1 = \"In Mass \" + joined\r\n\tif isShared1:\r\n\t\tname1 = \"Shared \" + name1\r\n\tif cat1.Name == \"Mass\" and (subcat1 == \"\" or subcat1 == None):\r\n\t\tsubcat1 = \"Form\"\r\n\tif cat1.Name == \"Mass\":\r\n\t\tmat1 = None\r\n\tif doc.IsFamilyDocument == False and cat1.Name == \"Mass\":\r\n\t\tpositionSystem1 = True\r\n\t\ttry:\r\n\t\t\tif mat1 == None or mat1 == \"\":\r\n\t\t\t\tenable_mat = False\r\n\t\t\telse:\r\n\t\t\t\tenable_mat = True\r\n\t\t\t\t\r\n\t\t\tif subcat1 == None or subcat1 == \"\":\r\n\t\t\t\tenable_subcat = False\r\n\t\t\telse:\r\n\t\t\t\tenable_subcat = True\r\n\t\r\n\t\t\tif any( (c in name1 for c in invalid_chars) ):\r\n\t\t\t\traise Exception('Family name contains invalid characters')\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tfamdoc = doc.Application.NewFamilyDocument(fam_path)\r\n\t\t\tif fami == None:\r\n\t\t\t\tBIGfamdoc = doc.Application.NewFamilyDocument(fam_path)\r\n\t\t\telse:\r\n\t\t\t\tBIGfamdoc = doc.EditFamily(fami)\r\n\t\t\tsat_path = '%s%s.sat' % (temp_path, name1)\r\n\t\t\tif factor != 1:\r\n\t\t\t    tlist = []\r\n\t\t\t    for each in s1:\r\n\t\t\t    \t#tlist.append(each.Scale(factor))\r\n\t\t\t    \ttlist.append(each)\r\n\t\t\t\ts1 = tlist\r\n\t\t\tif positionSystem1 == False:\r\n\t\t\t\tbbox = BoundingBox.ByGeometry(s1)\r\n\t\t\t\tMinploc = bbox.MinPoint\r\n\t\t\t\tMaxploc = bbox.MaxPoint\r\n\t\t\t\tMAX_X = Maxploc.X\r\n\t\t\t\tMAX_Y = Maxploc.Y\r\n\t\t\t\tmin_Z = Minploc.Z\r\n\t\t\t\tNEWMAX = DynPoint.ByCoordinates(MAX_X,MAX_Y,min_Z)\r\n\t\t\t\tlinebet = DynLine.ByStartPointEndPoint(Minploc,NEWMAX)\r\n\t\t\t\tlocpoint = DynCurve.PointAtParameter(linebet,0.5)\r\n\t\t\t\tvec1 = Vector.ByTwoPoints(locpoint, DynPoint.Origin())\r\n\t\t\t\ttlist = []\r\n\t\t\t\tfor each in s1:\r\n\t\t\t\t\ttlist.append(each.Translate(vec1))\r\n\t\t\t\ts1 = tlist\r\n\t\t\tsat1 = Geometry.ExportToSAT(s1, sat_path)\r\n\t\t\tview_fec = FilteredElementCollector(famdoc).OfClass(View)\r\n\t\t\tview1 = None\r\n\t\t\tfor v in view_fec:\r\n\t\t\t\tif str(v.ViewType) in acceptable_views and not v.IsTemplate:\r\n\t\t\t\t\tview1 = v\r\n\t\t\t\t\tbreak\r\n\t\t\tt1.EnsureInTransaction(famdoc)\r\n\t\t\tsave_path = '%s%s.rfa' % (temp_path, \"Inside \" + name1)\r\n\t\t\ttry: #set the category\r\n\t\t\t\tfam_cat = famdoc.Settings.Categories.get_Item(cat1.Name)\r\n\t\t\t\tfamdoc.OwnerFamily.FamilyCategory = fam_cat\r\n\t\t\texcept: pass\r\n\r\n\t\t\tBIGsave_path = '%s%s.rfa' % (temp_path, name1)\r\n\t\t\ttry: #set the category\r\n\t\t\t\tfam_cat = famdoc.Settings.Categories.get_Item(cat1.Name)\r\n\t\t\t\tfamdoc.OwnerFamily.FamilyCategory = fam_cat\r\n\t\t\texcept: pass\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tsall = flatten(freesat(sat1,famdoc,s1,doc))\r\n\t\t\tSystem.IO.File.Delete(sat_path)\r\n\t\t\tif len(sall) < 2:\r\n\t\t\t\tonemat1 = True\r\n\t\t\tt1.EnsureInTransaction(famdoc)\r\n\t\t\t#for seach in s1:\r\n\t\t\tmatcount = 1\r\n\t\t\tfor s2 in sall:\r\n\t\t\t\tif isVoid1:\r\n\t\t\t\t\tvoid_par = s2.get_Parameter(BuiltInParameter.ELEMENT_IS_CUTTING).Set(1)\r\n\t\t\t\t\tvoid_par2 = famdoc.OwnerFamily.get_Parameter(BuiltInParameter.FAMILY_ALLOW_CUT_WITH_VOIDS).Set(1)\r\n\t\t\t\t\tif isShared1:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tshared_par = famdoc.OwnerFamily.get_Parameter(BuiltInParameter.FAMILY_SHARED).Set(1)\r\n\t\t\t\t\t\texcept: pass\r\n\t\t\t\telse: #voids do not have a material values or a sub-cateogry\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tfamdoc.FamilyManager.NewType(\"Inside \" + name1)\r\n\t\t\t\t\texcept: pass\r\n\t\t\t\t\tif enable_mat:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tif onemat1 == False:\r\n\t\t\t\t\t\t\t\tmatname = \"Material \" + str(matcount)\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\tmatname = \"Material\"\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\tif instancemat1 == True:\r\n\t\t\t\t\t\t\t\t\tfamnewpar = famdoc.FamilyManager.AddParameter(matname,BuiltInParameterGroup.PG_MATERIALS,ParameterType.Material,True)\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tfamnewpar = famdoc.FamilyManager.AddParameter(matname,BuiltInParameterGroup.PG_MATERIALS,ParameterType.Material,False)\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\tmat_fec = FilteredElementCollector(famdoc).OfClass(Material)\r\n\t\t\t\t\t\t\tfam_mat = False\r\n\t\t\t\t\t\t\tfor m in mat_fec:\r\n\t\t\t\t\t\t\t\tif m.Name.lower() == mat1.lower():\r\n\t\t\t\t\t\t\t\t\tfam_mat = m.Id\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tif fam_mat == False:\r\n\t\t\t\t\t\t\t\tnewmat = Material.Create(famdoc, mat1)\r\n\t\t\t\t\t\t\t\tdefcolor = Color(120,120,120)\r\n\t\t\t\t\t\t\t\tfamdoc.GetElement(newmat).Color = defcolor\r\n\t\t\t\t\t\t\t\tfam_mat = newmat\r\n\t\t\t\t\t\t\tfamdoc.FamilyManager.AssociateElementParameterToFamilyParameter(s2.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM), famnewpar)\r\n\t\t\t\t\t\t\tfamdoc.FamilyManager.Set(famnewpar,fam_mat)\r\n\t\t\t\t\t\t\tif onemat1 == False:\r\n\t\t\t\t\t\t\t\tmatcount = matcount + 1\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\tpass\r\n\t\t\t\t\t\texcept:\tpass\r\n\t\t\t\t\tif enable_subcat: #create and assign the sub-category:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrent_fam_cat = famdoc.OwnerFamily.FamilyCategory\r\n\t\t\t\t\t\t\tsub_fec = current_fam_cat.SubCategories\r\n\t\t\t\t\t\t\tsub_cat = False\r\n\t\t\t\t\t\t\tfor sub in sub_fec:\r\n\t\t\t\t\t\t\t\tif sub.Name.lower() == subcat1.lower():\r\n\t\t\t\t\t\t\t\t\tsub_cat = sub\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tif sub_cat == False:\r\n\t\t\t\t\t\t\t\tnewsubcat = famdoc.Settings.Categories.NewSubcategory(current_fam_cat, subcat1)\r\n\t\t\t\t\t\t\t\tsub_cat = newsubcat\t\t\t\t\t\r\n\t\t\t\t\t\t\ts2.Subcategory = sub_cat\r\n\t\t\t\t\t\texcept: pass\r\n\t\t\t\t\tif isShared1:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tshared_par = famdoc.OwnerFamily.get_Parameter(BuiltInParameter.FAMILY_SHARED).Set(1)\r\n\t\t\t\t\t\texcept: pass\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tfamdoc.SaveAs(save_path, SaveAsOpt)\r\n\t\t\tif fami == None:\r\n\t\t\t\tBIGfamdoc.SaveAs(BIGsave_path, SaveAsOpt)\r\n\t\t\tBIGLoad = famdoc.LoadFamily(BIGfamdoc, FamOpt1() )\r\n\t\t\tsymbols = BIGLoad.GetFamilySymbolIds().GetEnumerator()\r\n\t\t\tsymbols.MoveNext()\r\n\t\t\tsymbol1 = BIGfamdoc.GetElement(symbols.Current)\r\n\t\t\tt1.EnsureInTransaction(BIGfamdoc)\r\n\t\t\tif not symbol1.IsActive: symbol1.Activate()\r\n\t\t\tif fami == None:\r\n\t\t\t\tinst1 = BIGfamdoc.FamilyCreate.NewFamilyInstance(origin, symbol1, str_typ)\r\n\t\t\tif positionSystem1 == False and fami == None:\r\n\t\t\t\tElementTransformUtils.MoveElement(doc,inst1.Id, vec1.Reverse().ToXyz())\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tfamily1 = BIGfamdoc.LoadFamily(doc, FamOpt1() )\r\n\t\t\tfamdoc.Close(False)\r\n\t\t\tBIGfamdoc.Close(False)\r\n\t\t\tSystem.IO.File.Delete(save_path)\r\n\t\t\tif fami == None:\r\n\t\t\t\tSystem.IO.File.Delete(BIGsave_path)\r\n\t\t\tsymbols = family1.GetFamilySymbolIds().GetEnumerator()\r\n\t\t\tsymbols.MoveNext()\r\n\t\t\tsymbol1 = doc.GetElement(symbols.Current)\r\n\t\t\tif placeInstance1 == True:\r\n\t\t\t\tt1.EnsureInTransaction(doc)\r\n\t\t\t\tif not symbol1.IsActive: symbol1.Activate()\r\n\t\t\t\tif doc.IsFamilyDocument == True:\r\n\t\t\t\t\tinst1 = doc.FamilyCreate.NewFamilyInstance(origin, symbol1, str_typ)\r\n\t\t\t\telse:\r\n\t\t\t\t\tinst1 = doc.Create.NewFamilyInstance(origin, symbol1, str_typ)\r\n\t\t\t\tif positionSystem1 == False:\r\n\t\t\t\t\tElementTransformUtils.MoveElement(doc,inst1.Id, vec1.Reverse().Scale(factor).ToXyz())\r\n\t\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\t\treturn inst1.ToDSType(False), family1.ToDSType(False)\r\n\t\t\telse:\r\n\t\t\t\tinst1 = []\r\n\t\t\t\treturn inst1, family1.ToDSType(False)\r\n\t\t\t\r\n\t\texcept:\r\n\t\t\ttry:\r\n\t\t\t\tfamdoc.Close(False)\r\n\t\t\t\tBIGfamdoc.Close(False)\r\n\t\t\texcept: pass\r\n\t\t\treturn traceback.format_exc(),''\r\n\telse:\r\n\t\ttry:\r\n\t\t\tif mat1 == None or mat1 == \"\":\r\n\t\t\t\tenable_mat = False\r\n\t\t\telse:\r\n\t\t\t\tenable_mat = True\r\n\t\t\t\t\r\n\t\t\tif subcat1 == None or subcat1 == \"\":\r\n\t\t\t\tenable_subcat = False\r\n\t\t\telse:\r\n\t\t\t\tenable_subcat = True\r\n\r\n\t\t\tif any( (c in name1 for c in invalid_chars) ):\r\n\t\t\t\traise Exception('Family name contains invalid characters')\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tfamdoc = doc.Application.NewFamilyDocument(fam_path)\r\n\t\t\tsat_path = '%s%s.sat' % (temp_path, name1)\r\n\t\t\tif factor != 1:\r\n\t\t\t    tlist = []\r\n\t\t\t    for each in s1:\r\n\t\t\t    \t#tlist.append(each.Scale(factor))\r\n\t\t\t        tlist.append(each)\r\n\t\t\t\ts1 = tlist\r\n\t\t\tif positionSystem1 == False:\r\n\t\t\t\tbbox = BoundingBox.ByGeometry(s1)\r\n\t\t\t\tMinploc = bbox.MinPoint\r\n\t\t\t\tMaxploc = bbox.MaxPoint\r\n\t\t\t\tMAX_X = Maxploc.X\r\n\t\t\t\tMAX_Y = Maxploc.Y\r\n\t\t\t\tmin_Z = Minploc.Z\r\n\t\t\t\tNEWMAX = DynPoint.ByCoordinates(MAX_X,MAX_Y,min_Z)\r\n\t\t\t\tlinebet = DynLine.ByStartPointEndPoint(Minploc,NEWMAX)\r\n\t\t\t\tlocpoint = DynCurve.PointAtParameter(linebet,0.5)\r\n\t\t\t\tvec1 = Vector.ByTwoPoints(locpoint, DynPoint.Origin())\r\n\t\t\t\ttlist = []\r\n\t\t\t\tfor each in s1:\r\n\t\t\t\t\ttlist.append(each.Translate(vec1))\r\n\t\t\t\ts1 = tlist\r\n\t\t\t#sat1 = Geometry.ExportToSAT(s1, sat_path)\r\n\t\t\tview_fec = FilteredElementCollector(famdoc).OfClass(View)\r\n\t\t\tview1 = None\r\n\t\t\tfor v in view_fec:\r\n\t\t\t\tif str(v.ViewType) in acceptable_views and not v.IsTemplate:\r\n\t\t\t\t\tview1 = v\r\n\t\t\t\t\tbreak\r\n\t\t\tt1.EnsureInTransaction(famdoc)\r\n\t\t\tsave_path = '%s%s.rfa' % (temp_path, name1)\r\n\t\t\ttry: #set the category\r\n\t\t\t\tfam_cat = famdoc.Settings.Categories.get_Item(cat1.Name)\r\n\t\t\t\tfamdoc.OwnerFamily.FamilyCategory = fam_cat\r\n\t\t\texcept: pass\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tsall = []\r\n\t\t\tfor s1in in s1:\r\n\t\t\t\tsat1 = Geometry.ExportToSAT(s1in, sat_path)\r\n\t\t\t\tsall.append(flatten(freesat(sat1,famdoc,[s1in],doc)))\r\n\t\t\t\tSystem.IO.File.Delete(sat_path)\r\n\t\t\tsall = flatten(sall)\r\n\t\t\tif len(sall) < 2:\r\n\t\t\t\tonemat1 = True\r\n\t\t\tt1.EnsureInTransaction(famdoc)\r\n\t\t\tmatcount = 1\r\n\t\t\tfor s2 in sall:\r\n\t\t\t\tif isVoid1:\r\n\t\t\t\t\tvoid_par = s2.get_Parameter(BuiltInParameter.ELEMENT_IS_CUTTING).Set(1)\r\n\t\t\t\t\tvoid_par2 = famdoc.OwnerFamily.get_Parameter(BuiltInParameter.FAMILY_ALLOW_CUT_WITH_VOIDS).Set(1)\r\n\t\t\t\t\tif isShared1:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tshared_par = famdoc.OwnerFamily.get_Parameter(BuiltInParameter.FAMILY_SHARED).Set(1)\r\n\t\t\t\t\t\texcept: pass\r\n\t\t\t\telse: #voids do not have a material values or a sub-cateogry\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tfamdoc.FamilyManager.NewType(name1)\r\n\t\t\t\t\texcept : pass\r\n\t\t\t\t\tif enable_mat:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tif onemat1 == False:\r\n\t\t\t\t\t\t\t\tmatname = \"Material \" + str(matcount)\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\tmatname = \"Material\"\r\n\t\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\t\tif instancemat1 == True:\r\n\t\t\t\t\t\t\t\t\tfamnewpar = famdoc.FamilyManager.AddParameter(matname,BuiltInParameterGroup.PG_MATERIALS,ParameterType.Material,True)\r\n\t\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\t\tfamnewpar = famdoc.FamilyManager.AddParameter(matname,BuiltInParameterGroup.PG_MATERIALS,ParameterType.Material,False)\r\n\t\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\tmat_fec = FilteredElementCollector(famdoc).OfClass(Material)\r\n\t\t\t\t\t\t\tfam_mat = False\r\n\t\t\t\t\t\t\tfor m in mat_fec:\r\n\t\t\t\t\t\t\t\tif m.Name.lower() == mat1.lower():\r\n\t\t\t\t\t\t\t\t\tfam_mat = m.Id\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tif fam_mat == False:\r\n\t\t\t\t\t\t\t\tnewmat = Material.Create(famdoc, mat1)\r\n\t\t\t\t\t\t\t\tdefcolor = Color(120,120,120)\r\n\t\t\t\t\t\t\t\tfamdoc.GetElement(newmat).Color = defcolor\r\n\t\t\t\t\t\t\t\tfam_mat = newmat\r\n\t\t\t\t\t\t\tfamdoc.FamilyManager.AssociateElementParameterToFamilyParameter(s2.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM), famnewpar)\r\n\t\t\t\t\t\t\tfamdoc.FamilyManager.Set(famnewpar,fam_mat)\r\n\t\t\t\t\t\t\tif onemat1 == False:\r\n\t\t\t\t\t\t\t\tmatcount = matcount + 1\r\n\t\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\t\tpass\r\n\t\t\t\t\t\texcept:\tpass\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tfamdoc.FamilyManager.SortParameters(ParametersOrder.Ascending)\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tpass\r\n\t\t\t\t\tif enable_subcat: #create and assign the sub-category:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrent_fam_cat = famdoc.OwnerFamily.FamilyCategory\r\n\t\t\t\t\t\t\tsub_fec = current_fam_cat.SubCategories\r\n\t\t\t\t\t\t\tsub_cat = False\r\n\t\t\t\t\t\t\tfor sub in sub_fec:\r\n\t\t\t\t\t\t\t\tif sub.Name.lower() == subcat1.lower():\r\n\t\t\t\t\t\t\t\t\tsub_cat = sub\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tif sub_cat == False:\r\n\t\t\t\t\t\t\t\tnewsubcat = famdoc.Settings.Categories.NewSubcategory(current_fam_cat, subcat1)\r\n\t\t\t\t\t\t\t\tsub_cat = newsubcat\t\t\t\t\t\r\n\t\t\t\t\t\t\ts2.Subcategory = sub_cat\r\n\t\t\t\t\t\texcept: pass\r\n\t\t\t\t\tif isShared1:\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tshared_par = famdoc.OwnerFamily.get_Parameter(BuiltInParameter.FAMILY_SHARED).Set(1)\r\n\t\t\t\t\t\texcept: pass\r\n\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\tfamdoc.SaveAs(save_path, SaveAsOpt)\r\n\t\t\tfamily1 = famdoc.LoadFamily(doc, FamOpt1() )\r\n\t\t\tfamdoc.Close(False)\r\n\t\t\tSystem.IO.File.Delete(save_path)\r\n\t\t\tsymbols = family1.GetFamilySymbolIds().GetEnumerator()\r\n\t\t\tsymbols.MoveNext()\r\n\t\t\tsymbol1 = doc.GetElement(symbols.Current)\r\n\t\t\tif placeInstance1 == True:\r\n\t\t\t\tt1.EnsureInTransaction(doc)\r\n\t\t\t\tif not symbol1.IsActive: symbol1.Activate()\r\n\t\t\t\tif doc.IsFamilyDocument == True:\r\n\t\t\t\t\tinst1 = doc.FamilyCreate.NewFamilyInstance(origin, symbol1, str_typ)\r\n\t\t\t\telse:\r\n\t\t\t\t\tinst1 = doc.Create.NewFamilyInstance(origin, symbol1, str_typ)\r\n\t\t\t\tif positionSystem1 == False:\r\n\t\t\t\t\tElementTransformUtils.MoveElement(doc,inst1.Id, vec1.Reverse().Scale(factor).ToXyz())\r\n\t\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\t\treturn inst1.ToDSType(False), family1.ToDSType(False)\r\n\t\t\telse:\r\n\t\t\t\tinst1 = []\r\n\t\t\t\treturn inst1, family1.ToDSType(False)\r\n\t\t\r\n\t\texcept:\r\n\t\t\ttry:\r\n\t\t\t\tTransactionManager.ForceCloseTransaction(t1)\r\n\t\t\t\tfamdoc.Close(False)\r\n\t\t\texcept: pass\r\n\t\t\treturn traceback.format_exc(),''\r\n\r\nresult = []\r\n\r\nif geom == None or len(geom) == 0:\r\n\tOUT = None\r\nelse:\r\n\tif len(geom) == len(names):\r\n\t\tglist = []\r\n\t\tfor each in geom:\r\n\t\t\tglist.append([each])\r\n\t\tgeom = glist\r\n\t\tpadded = PadLists([geom, category, isVoid, material, subcat, isShared, placeInstance, positionSystem, onemat, instancemat])\r\n\t\tp_category, p_isVoid, p_material, p_subcat, p_isShared, p_placeInstance, p_positionSystem, p_onemat, p_instancemat = padded[1], padded[2], padded[3], padded[4], padded[5], padded[6], padded[7], padded[8], padded[9]\r\n\t\treturn1 = map(NewForm_background, geom, names, p_category, p_isVoid, p_material, p_subcat, p_isShared, p_placeInstance, p_positionSystem, p_onemat, p_instancemat)\r\n\t\tresult = output1([i[0] for i in return1]), output1([i[1] for i in return1])\r\n\telse :\r\n\t\tresult = NewForm_background(geom, names[0], category[0], isVoid[0], material[0], subcat[0], isShared[0],  placeInstance[0], positionSystem[0], onemat[0], instancemat[0])\r\n\tOUT = result\r\n\tsatOpt.Dispose()\r\n\topt1.Dispose()\r\n\tSaveAsOpt.Dispose()",
      "VariableInputPorts": true,
      "Id": "deec7271456f4bbc9e87545f29fd4c95",
      "Inputs": [
        {
          "Id": "0e6fc93dbd09475598aa0446d0fd0100",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cd80a019941a4932bde5c4c75d9e6fb7",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4adde4545fa64967997a9691fe246b09",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aaa1879868e74cad90ab9fe8a6eaadc1",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "32b0facd57414264a2da83bfe828d519",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f2c294b151b40f3a8c7ee4478176aae",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2d3424eb47b491489f6568547071942",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "547d40b6e081462cbaa74031e2df5040",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "405d6f314d3f4cc29725f3702c8e87e4",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "53abf87d41484084bf014dc0ae57d39e",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0a05842137ee4252b0351477aac34b53",
          "Name": "IN[10]",
          "Description": "Input #10",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "451b9035ed6d46bbb697188ea25c21bb",
          "Name": "IN[11]",
          "Description": "Input #11",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "71a243bfd70c421b973d4adcaa7d2ef9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARisShared",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "76b63e956eb54e26b77df1619178568e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "322eec7fc36944a98f9a9a42f1e94445",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARPlaceInstance",
        "TypeName": "bool",
        "TypeRank": 1,
        "DefaultValue": "true",
        "Description": ""
      },
      "Id": "ba33e787618c484a80b659c81d312e7b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "284cdf2e4a904c0dbb6b5f2140b0bb76",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARPositionSystemFalseIsInstanceOriginTrueRelativeToProjectOrigin",
        "TypeName": "bool",
        "TypeRank": 1,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "cd1e8a1752c444988d886f67ccf81432",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f42f5fe795bd4841a9b32bad8338cb55",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Created By Karam Baki, karam@aecedx.com\nimport clr\nimport System\nfrom System.Collections.Generic import *\n\nfrom itertools import repeat\n\npf_path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\nimport sys\nsys.path.append('%s\\IronPython 2.7\\Lib' %pf_path)\nimport traceback\n\nclr.AddReference('ProtoGeometry')\nfrom Autodesk.DesignScript.Geometry import *\nfrom Autodesk.DesignScript.Geometry import Point as DynPoint\nfrom Autodesk.DesignScript.Geometry import Line as DynLine\nfrom Autodesk.DesignScript.Geometry import Curve as DynCurve\n\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\nfrom Autodesk.Revit.DB.Structure import StructuralType\n\nclr.AddReference('RevitNodes')\nimport Revit\nclr.ImportExtensions(Revit.Elements)\nclr.ImportExtensions(Revit.GeometryConversion)\n# Choose The Current Document\ndoc = DocumentManager.Instance.CurrentDBDocument\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\n\ndef toList(input):\n\tif isinstance(input,list) == False:\n\t\treturn [input]\n\telse:\n\t\treturn input\n\n#Family symbol name to place.\nfamnames = UnwrapElement(toList(IN[0]))\ncheck = IN[1]\n\ncleanlist = [\"Dynamo Wall Intersects Family\",\"Dynamo K-Paneling\",\"Dynamo Solid or Void Family\",\"Dynamo Splitted Mass\",\"Dynamo Converted Element\",\"Dynamo Converted Face\",\"Dynamo Loft Family\",\"Dynamo Scaled Mass\",\"Dynamo Generated Patch\",\"Dynamo Sliced Pieces\",\"Dynamo Chamfered Element\",\"Dynamo Filleted Element\",\"Dynamo Stairs K-Fill\"]\n\nif check != None and check != []:\n\t#create a filtered element collector set to Category OST_Mass and Class FamilySymbol \n\tcollector = FilteredElementCollector(doc)\n\tcollector.OfClass(FamilySymbol)\n\tfamtypeitr = collector.GetElementIterator()\n\tfec = FilteredElementCollector(doc).OfClass(FamilyInstance)\n\tnames = []\n\tfor ff in fec:\n\t\tnames.append(ff.Name)\n\t\n\ttodel = []\n\ttoclean = []\n\tfor item in famtypeitr:\n\t\tfor f in famnames:\n\t\t\tif f in item.FamilyName:\n\t\t\t\tfamtype = item\n\t\t\t\tif f in names:\n\t\t\t\t\tbreak\n\t\t\t\tfamId = item.Family.Id\n\t\t\t\ttodel.append(famId)\n\t\t\t\tbreak\n\t\tfor clean in cleanlist:\n\t\t\tif clean in item.FamilyName and item.FamilyName not in famnames:\n\t\t\t\ttoclean.append(item.Family)\n\t\t\t\t\n\tif len(toclean) != 0 or len(todel) !=0:\n\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\tif len(todel) != 0:\n\t\t\tfor t in todel:\n\t\t\t\ttry:\n\t\t\t\t\tdoc.Delete(t)\n\t\t\t\texcept:\n\t\t\t\t\tpass\n\t\tif len(toclean) != 0:\n\t\t\tfor c in toclean:\n\t\t\t\telements = [x for x in FilteredElementCollector(doc).OfClass(FamilyInstance).ToElements() if c.Name in x.Symbol.FamilyName]\n\t\t\t\tif elements == []:\n\t\t\t\t\ttry:\n\t\t\t\t\t\tdoc.Delete(c.Id)\n\t\t\t\t\texcept:\n\t\t\t\t\t\tpass\n\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\n\tOUT = famnames\nelse:\n\tOUT = famnames",
      "VariableInputPorts": true,
      "Id": "0dbc1c4161f643329f6bcc3ee64ee976",
      "Inputs": [
        {
          "Id": "2a3a028511394fc3a37aef962cd4927a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a2d8a3fe53644335a019ad42e6a349bc",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b2d43732e04640288604f17a600b0127",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARonemat",
        "TypeName": "bool",
        "TypeRank": 1,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "79e2b2e129d34ea4870c8cbc42811e5e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5f204fc720f54fcd8298d784f4204841",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARIsInstanceMat",
        "TypeName": "bool",
        "TypeRank": 1,
        "DefaultValue": "true",
        "Description": ""
      },
      "Id": "07943a050bff4633b0814b790cc59496",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "32bcc6c09aaf408983769a7a75cb2b5d",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    }
  ],
  "Connectors": [
    {
      "Start": "0b97e37d672544b3af48744bda2ac53f",
      "End": "0e6fc93dbd09475598aa0446d0fd0100",
      "Id": "e2c08bdea595483bae9aa401df3beeb6"
    },
    {
      "Start": "0b97e37d672544b3af48744bda2ac53f",
      "End": "a2d8a3fe53644335a019ad42e6a349bc",
      "Id": "e3f1c73c9c594907ab9f74ebbc1ba785"
    },
    {
      "Start": "e1feeead9ca44210bed4157324cdeb70",
      "End": "cd80a019941a4932bde5c4c75d9e6fb7",
      "Id": "9ef54b132cf44cf68c360a3206c0dfc4"
    },
    {
      "Start": "f55bbf452ba84252a93d862dae8e6d04",
      "End": "2a3a028511394fc3a37aef962cd4927a",
      "Id": "2bafc51d875e4ea2bc5c0d29124b5825"
    },
    {
      "Start": "19a5e7fae48e4bf0ab5d696cfffafeaf",
      "End": "aaa1879868e74cad90ab9fe8a6eaadc1",
      "Id": "253f6ca210f0454d88aff05e878a3376"
    },
    {
      "Start": "6e0d531aafff4dd1930d15ef5582257e",
      "End": "32b0facd57414264a2da83bfe828d519",
      "Id": "41dbae8ecd354cfba9b21b3678fd779b"
    },
    {
      "Start": "3faae4045bcc4562802763a8a95ccf8c",
      "End": "4f2c294b151b40f3a8c7ee4478176aae",
      "Id": "55b861c891d7485aa50bf2e8f620c3b9"
    },
    {
      "Start": "6e320065306d4164bb9badd2857b35b1",
      "End": "a273da39d7644b03bbfc2f336392f62c",
      "Id": "dcaab2b2dc0440e7bda378f1936aa2fe"
    },
    {
      "Start": "77a4e4989f4449d1a336a739eba9cbc7",
      "End": "bb8f2aff36894416a26ebb5a0ca67abd",
      "Id": "86a902b973be4acca0d9e347352cecad"
    },
    {
      "Start": "ea0304466cea45009711d82dd19c0c29",
      "End": "d2d3424eb47b491489f6568547071942",
      "Id": "ea23ace25aad46288bd59f2606f7ebee"
    },
    {
      "Start": "71a243bfd70c421b973d4adcaa7d2ef9",
      "End": "adedb53ad949425199102054db16a13f",
      "Id": "a6de263442ed45589c9143f473726505"
    },
    {
      "Start": "322eec7fc36944a98f9a9a42f1e94445",
      "End": "547d40b6e081462cbaa74031e2df5040",
      "Id": "2a9ec79d62064ab18cd97c61250bac9b"
    },
    {
      "Start": "284cdf2e4a904c0dbb6b5f2140b0bb76",
      "End": "405d6f314d3f4cc29725f3702c8e87e4",
      "Id": "b2ce6235e39d4a278eb26eecd45bf28a"
    },
    {
      "Start": "f42f5fe795bd4841a9b32bad8338cb55",
      "End": "53abf87d41484084bf014dc0ae57d39e",
      "Id": "8e6921ebc9bc435aac96eb11ef5a4430"
    },
    {
      "Start": "b2d43732e04640288604f17a600b0127",
      "End": "4adde4545fa64967997a9691fe246b09",
      "Id": "429405ec4e384a53b98ee95d4eb7da03"
    },
    {
      "Start": "5f204fc720f54fcd8298d784f4204841",
      "End": "0a05842137ee4252b0351477aac34b53",
      "Id": "d14d76a5f27d4397b33f55a9cc6e64ee"
    },
    {
      "Start": "32bcc6c09aaf408983769a7a75cb2b5d",
      "End": "451b9035ed6d46bbb697188ea25c21bb",
      "Id": "4154a505f69f49528acec4a8d0e41188"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.917129516601563,
      "EyeY": 13.636090278625488,
      "EyeZ": 4.4682145118713379,
      "LookX": 18.610998153686523,
      "LookY": -14.213406562805176,
      "LookZ": -2.1897904872894287,
      "UpX": 0.41657838225364685,
      "UpY": 0.90777742862701416,
      "UpZ": -0.049015078693628311
    },
    "NodeViews": [
      {
        "Id": "7971abd8ecd24e2fa28e52027545f3f6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1239.81157019455,
        "Y": 25.0244843670038
      },
      {
        "Id": "487f04110bdf4764973dcae73f53aff1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1305.81157019455,
        "Y": 83.409044349879
      },
      {
        "Id": "5923b814be994137acdd60f1a8177b72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1256.81157019455,
        "Y": 141.793604332754
      },
      {
        "Id": "3ab553258be4494083412396cfdb6443",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1553.81157019455,
        "Y": 200.178164315629
      },
      {
        "Id": "325026eade93449a9cffbea72f2165f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -229.314093012575,
        "Y": 185.368375770972
      },
      {
        "Id": "aff75132a3454885beeefdf45692a2f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1332.10013531501,
        "Y": 258.562724298504
      },
      {
        "Id": "5340671de4f14bcc946dd88da17a3e84",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1289.81157019455,
        "Y": 316.947284281379
      },
      {
        "Id": "e35db8a4f8ae40deae1cdf5ba7ae6bb5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -228.574297495933,
        "Y": 244.619074879458
      },
      {
        "Id": "fba20a1f96ab4c49b5cc89d6e5b024aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -376.537588759307,
        "Y": 189.621910227416
      },
      {
        "Id": "9934ac47c94d4bb18e0da2ae0a86a302",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1355.81157019455,
        "Y": 375.331844264255
      },
      {
        "Id": "deec7271456f4bbc9e87545f29fd4c95",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -557.256842163068,
        "Y": 156.388071537748
      },
      {
        "Id": "76b63e956eb54e26b77df1619178568e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1299.41209679271,
        "Y": 434.660610044443
      },
      {
        "Id": "ba33e787618c484a80b659c81d312e7b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1330.75705148263,
        "Y": 494.350635772076
      },
      {
        "Id": "cd1e8a1752c444988d886f67ccf81432",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1737.0162142914,
        "Y": 555.598271305099
      },
      {
        "Id": "0dbc1c4161f643329f6bcc3ee64ee976",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -948.722528112628,
        "Y": 175.734387111552
      },
      {
        "Id": "79e2b2e129d34ea4870c8cbc42811e5e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1345.79076750493,
        "Y": 622.076151520586
      },
      {
        "Id": "07943a050bff4633b0814b790cc59496",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -1380.72448789761,
        "Y": 690.288958245814
      }
    ],
    "Annotations": [],
    "X": 1065.34737673662,
    "Y": 90.9070692401599,
    "Zoom": 0.609944355856796
  }
}