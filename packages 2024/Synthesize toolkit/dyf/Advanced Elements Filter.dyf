{
  "Uuid": "ffdbb889-1773-48ee-99c1-b80385bb6b66",
  "IsCustomNode": true,
  "Category": "Synthesize.Automate.Select",
  "Description": "Advanced Elements Filter",
  "Name": "Advanced Elements Filter",
  "ElementResolver": {
    "ResolutionMap": {
      "Math": {
        "Key": "DSCore.Math",
        "Value": "DSCoreNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res[0];\nres[1];\nres[2];\nres[3];\nres[4];\nres[5];\nres[6];",
      "Id": "a9c39a1fe6734ffeab4edfcf566b961a",
      "Inputs": [
        {
          "Id": "4fa4e0c72efb421c96e75eb20dbf6e60",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f11f514c955f4fde89f4fc2fbacf9cb0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3d78aa0993e84ac69897931fe5afbd47",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1d055f67dc16403b857ec49a5db6e3bb",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7dc161a408b47a19bf22448e77f59fe",
          "Name": "",
          "Description": "Value of expression at line 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "23a89bb334b14cf1bde6390de62b2b30",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb258174a8ea48529880a66b02804d9f",
          "Name": "",
          "Description": "Value of expression at line 6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edbb19ebdfd94b55b9464bdcd16bc3e5",
          "Name": "",
          "Description": "Value of expression at line 7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "a1370551-a1d1-4a47-a1a3-8afdfd8f78aa",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "afdd7ee7c3704e409b14026445a91ef8",
      "Inputs": [
        {
          "Id": "133d029635034ddebae162fed1bb9e41",
          "Name": "VARunknownItem",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e78f147ee0394cd1acad70ac290dc50c",
          "Name": "VARseq",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Turns an element (or a nested list) into a flat list"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "a1370551-a1d1-4a47-a1a3-8afdfd8f78aa",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "8a5123f361c8475f829196ab6873c842",
      "Inputs": [
        {
          "Id": "43b97cb666cb47b2afa8c6348523b762",
          "Name": "VARunknownItem",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6a428af2649e49ffb74db9ed96e75c24",
          "Name": "VARseq",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Turns an element (or a nested list) into a flat list"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "112e1135d5f84627b25b104160105a51",
      "Inputs": [
        {
          "Id": "061d71f54d674321919f6d739ca387b5",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "054fa7f0f7584cfb865cf3c3addd23c0",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7fe9d482fafe4a28accce25e92681b92",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARIsTypeParameter",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "d6437c0a27644be783c1021fc1e8e120",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "501c60cbfa9b484a9c79aebc065b111a",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARFilterByOtherParameters",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "e5e7adfdb30a461e8e918b37a83aef00",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "75f783aec27244ff93c80bab1259fa35",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARRoundingIfNumbersFound",
        "TypeName": "double",
        "TypeRank": 0,
        "DefaultValue": "0.001",
        "Description": ""
      },
      "Id": "68f2c51323fc42fab25e270db7ff550d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3a11dc8b367445a19488f712727b4f6c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARFilterModeFalseORTrueAND",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "50e8ac7b0966454d9950281e44351b8b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a2cf6d58da074cce99c481ce7632083f",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARParametersList",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "fcafe9017f0c49a7800fb5b322dcd891",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c55463af35064b9ab3eaa632c8154217",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARParameterValues",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "6d1d8125d659495ca8d62b9a155f598f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "36e549a589d44cafb7d4ec3bc01b12a2",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARElements",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "baddb49778dc4622b6027ca2727181bd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "882e704b777845f4b9833d91aae5d67e",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Created By Karam Baki : karam@aecedx.com\n# Enable Python support and load DesignScript library\n# IMPORTANT : ALL DYNAMO DESIGN SCRIPT NODES ARE AS (dg)\nimport clr\nclr.AddReference('ProtoGeometry')\nfrom Autodesk.DesignScript import Geometry as dg\n\n# EXTENSION Enable ToDSType\nclr.AddReference('RevitNodes')\nimport Revit\nclr.ImportExtensions(Revit.Elements)\n\n# Enable Revit Elements\nfrom Revit.Elements import *\n\n# EXTENSION Enable Geometry Conversion Methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\n# Enable Revit API\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\n\n# Enable DocumentManager and TransactionManager\nclr.AddReference('RevitServices')\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\n# Enable ICollection List Translate\nclr.AddReference(\"System\")\nimport System.Collections.Generic\nfrom System.Collections.Generic import List\n\nimport re\n\ndataEnteringNode = IN\n# Use UnwrapElement(IN[0]) When Translating From Dynamo to Revit\n\nisType = UnwrapElement(IN[0])\nelems = UnwrapElement(IN[1])\nfilterbyparam = UnwrapElement(IN[2])\nparamnamefilterlist = UnwrapElement(IN[3])\nparamnamevaluelist = UnwrapElement(IN[4])\nrounding = UnwrapElement(IN[5])\nfiltermode= UnwrapElement(IN[6])\n\nparamnamevalue = []\nfor each in paramnamevaluelist:\n\ttry:\n\t\tparamnamevalue.append(each.lower())\n\texcept: paramnamevalue.append(each)\n\nparamnamefilter = []\n\ncounter = 0\nfor each in paramnamefilterlist:\n\tif len(each) == 0:\n\t\tparamnamevalue.pop(counter)\n\telse:\n\t\tparamnamefilter.append(each)\n\tcounter = counter + 1\n\n# Choose The Current Document\ndoc = DocumentManager.Instance.CurrentDBDocument\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\n\nfinalelems = []\nrealelems = []\nfailedtoparsetypelems = []\ntmporary = []\n\nif isType == True:\n\tnewelemes = []\n\tfor each in elems:\n\t\ttry:\n\t\t\ttmporary.append(each.GetTypeId())\n\t\t\tnewelemes.append(each)\n\t\texcept:\n\t\t\tpass\n\telems = newelemes\n\tcounter = 0\n\tfor each in tmporary:\n\t\telementtype = doc.GetElement(each)\n\t\tif elementtype != None:\n\t\t\tfinalelems.append(doc.GetElement(each))\n\t\t\trealelems.append(elems[counter])\n\t\telse:\n\t\t\tfailedtoparsetypelems.append(elems[counter])\n\t\tcounter = counter + 1\nelse:\n\tfor each in elems:\n\t\ttry:\n\t\t\ttmporary.append(each.Id)\n\t\texcept:\n\t\t\ttmporary.append([])\n\tcounter = 0\n\tfor each in tmporary:\n\t\ttry:\n\t\t\telementselection = doc.GetElement(each)\n\t\texcept:\n\t\t\telementselection = None\n\t\tif elementselection != None:\n\t\t\tfinalelems.append(doc.GetElement(each))\n\t\t\trealelems.append(elems[counter])\n\t\telse:\n\t\t\tfailedtoparsetypelems.append(elems[counter])\n\t\tcounter = counter + 1\n\nparamvalues = []\nparamnames = []\nparamtypes = []\nparamstoragetype = []\nacceptedelems = []\nacceptedtypes = []\n\nif int(DocumentManager.Instance.CurrentUIApplication.Application.VersionNumber) < 2021:\n\toldrevit = True\nelse:\n\toldrevit = False\n\ncounterelems = 0\nfor each in finalelems:\n\tcurrentrealelem = realelems[counterelems]\n\tcounterelems = counterelems + 1\n\teachparams = each.GetOrderedParameters()\n\ttmplisttypes = []\n\ttmpliststorage = []\n\ttmplistnames = []\n\ttmplistvalues = []\n\tstatus = []\n\tfor pname in paramnamefilter:\n\t\te = each.LookupParameter(pname)\n\t\tif e == None:\n\t\t\tcontinue\n\t\tif e.IsReadOnly:\n\t\t\twanted_e_found = False\n\t\t\tmultiParams = each.GetParameters(pname)\n\t\t\tif len(multiParams) > 1:\n\t\t\t\tfor e in multiParams:\n\t\t\t\t\tif e.IsReadOnly == False:\n\t\t\t\t\t\twanted_e_found = True\n\t\t\t\t\t\tbreak\n\t\t\t\tif wanted_e_found == False:\n\t\t\t\t\te = multiParams[-1]\n\t\tif oldrevit:\n\t\t\tptype = e.Definition.ParameterType\n\t\telse:\n\t\t\tptype = LabelUtils.GetLabelForSpec(e.Definition.GetDataType())\n\t\tstoragetype = str(e.StorageType)\n\t\tif storagetype == \"Integer\":\n\t\t\tpvalues = e.AsInteger()\n\t\t\tif oldrevit:\n\t\t\t\tunit_type = e.Definition.UnitType\n\t\t\t\tformatoptions = doc.GetUnits().GetFormatOptions(unit_type)\n\t\t\t\tdispunits = formatoptions.DisplayUnits\n\t\t\t\tconverted = UnitUtils.ConvertFromInternalUnits(pvalues,dispunits)\n\t\t\t\tpvalues = converted\n\t\t\telse:\n\t\t\t\tunit_type = e.Definition.GetDataType()\n\t\t\t\tconverted = UnitUtils.ConvertFromInternalUnits(pvalues,doc.GetUnits().GetFormatOptions(unit_type).GetUnitTypeId())\n\t\t\t\tpvalues = converted\n\t\telif storagetype == \"Double\":\n\t\t\tpvalues = e.AsDouble()\n\t\t\tif oldrevit:\n\t\t\t\tunit_type = e.Definition.UnitType\n\t\t\t\tformatoptions = doc.GetUnits().GetFormatOptions(unit_type)\n\t\t\t\tdispunits = formatoptions.DisplayUnits\n\t\t\t\tconverted = UnitUtils.ConvertFromInternalUnits(pvalues,dispunits)\n\t\t\t\tpvalues = converted\n\t\t\telse:\n\t\t\t\tunit_type = e.Definition.GetDataType()\n\t\t\t\tconverted = UnitUtils.ConvertFromInternalUnits(pvalues,doc.GetUnits().GetFormatOptions(unit_type).GetUnitTypeId())\n\t\t\t\tpvalues = converted\n\t\telif storagetype == \"String\":\n\t\t\tpvalues = e.AsString()\n\t\telif storagetype == \"ElementId\":\n\t\t\tpvalues = doc.GetElement(e.AsElementId())\n\t\telse:\n\t\t\tpvalues = e.AsValueString()\n\t\tif str(ptype) == \"Invalid\":\n\t\t\tptype = pname\n\t\tif str(ptype) == \"Rafter Cut\":\n\t\t\ttry:\n\t\t\t\tpvalues = currentrealelem.EaveCuts\n\t\t\t\teavecut = str(pvalues)\n\t\t\texcept : pass\n\t\tcounter = 0\n\t\tfor eachitem in paramnamefilter:\n\t\t\tif filterbyparam == True and paramnamefilter[counter].lower() == pname.lower():\n\t\t\t\tif str(ptype) == \"Rafter Cut\":\n\t\t\t\t\ttry:\n\t\t\t\t\t\tif eavecut == \"PlumbCut\":\n\t\t\t\t\t\t\teavecut = \"Plumb Cut\"\n\t\t\t\t\t\telif eavecut == \"TwoCutPlumb\":\n\t\t\t\t\t\t\teavecut = \"Two Cut - Plumb\"\n\t\t\t\t\t\telif eavecut == \"TwoCutSquare\":\n\t\t\t\t\t\t\teavecut = \"Two Cut - Square\"\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif eavecut.lower() == paramnamevalue[counter]:\n\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\telse: status.append(False)\n\t\t\t\t\texcept: status.append(False)\n\t\t\t\n\t\t\t\telif str(ptype) == \"FamilyType\":\n\t\t\t\t\ttry:\n\t\t\t\t\t\tfullname = e.AsValueString()\n\t\t\t\t\t\tif fullname.lower() == paramnamevalue[counter]:\n\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\telse: status.append(False)\n\t\t\t\t\texcept: status.append(False)\n\n\t\t\t\telif storagetype == \"ElementId\":\n\t\t\t\t\ttry:\n\t\t\t\t\t\ttranvalue = pvalues.Name\n\t\t\t\t\t\tif tranvalue.lower() == paramnamevalue[counter]:\n\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\telse: status.append(False)\n\t\t\t\t\texcept:\n\t\t\t\t\t\tif paramnamevalue[counter].lower() == \"unconnected\":\t\t\t\n\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\n\t\t\t\telif storagetype == \"String\":\n\t\t\t\t\ttry:\n\t\t\t\t\t\ttranvalue = pvalues\n\t\t\t\t\t\tif paramnamevalue[counter].endswith(\"*\"):\n\t\t\t\t\t\t\tif tranvalue.lower().startswith(paramnamevalue[counter][:-1]):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\telif paramnamevalue[counter].startswith(\"*\"):\n\t\t\t\t\t\t\tif tranvalue.lower().endswith(paramnamevalue[counter][1:]):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\telif tranvalue.lower() == paramnamevalue[counter]:\n\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\telse: status.append(False)\n\t\t\t\t\texcept: status.append(False)\n\t\t\t\t\t\n\t\t\t\telif storagetype == \"Integer\":\n\t\t\t\t\ttranvalue = int(pvalues)\n\t\t\t\t\ttry:\n\t\t\t\t\t\tif re.match(\">=\", paramnamevalue[counter]) or re.match(\"=>\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\">=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=>\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue >= int(paramnamevalueNEW):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"<=\", paramnamevalue[counter]) or re.match(\"=<\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"<=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=<\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue <= int(paramnamevalueNEW):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\">\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\">\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tif tranvalue > int(paramnamevalueNEW):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"<\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"<\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tif tranvalue < int(paramnamevalueNEW):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"!=\", paramnamevalue[counter]) or re.match(\"=!\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"!=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=!\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue != int(paramnamevalueNEW):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"=\", paramnamevalue[counter]) or re.match(\"==\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"==\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue == int(paramnamevalueNEW):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tif tranvalue == int(paramnamevalue[counter]):\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\texcept: status.append(False)\n\t\t\t\t\n\t\t\t\telif storagetype == \"Double\":\n\t\t\t\t\ttranvalue = float(pvalues)\n\t\t\t\t\ttranvalue = round(tranvalue/rounding)*rounding\n\t\t\t\t\ttry:\n\t\t\t\t\t\tif re.match(\">=\", paramnamevalue[counter]) or re.match(\"=>\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\">=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=>\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue >= round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"<=\", paramnamevalue[counter]) or re.match(\"=<\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"<=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=<\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue <= round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\">\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\">\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue > round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"<\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"<\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue < round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"!=\", paramnamevalue[counter]) or re.match(\"=!\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"!=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=!\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue != round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\telif re.match(\"=\", paramnamevalue[counter]) or re.match(\"==\", paramnamevalue[counter]):\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"=\", '',paramnamevalue[counter])\n\t\t\t\t\t\t\tparamnamevalueNEW = re.sub(\"==\", '',paramnamevalueNEW)\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalueNEW)\n\t\t\t\t\t\t\tif tranvalue == round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tparamnameconverted = float(paramnamevalue[counter])\n\t\t\t\t\t\t\tif tranvalue == round(paramnameconverted/rounding)*rounding:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: \n\t\t\t\t\t\t\t\tstatus.append(False)\n\t\t\t\t\texcept: status.append(False)\n\t\t\t\telse:\n\t\t\t\t\ttry:\n\t\t\t\t\t\ttranvalue = pvalues.Name\n\t\t\t\t\t\tif tranvalue.lower() == paramnamevalue[counter]:\n\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\telse: status.append(False)\n\t\t\t\t\texcept:\n\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\ttranvalue = str(pvalues)\n\t\t\t\t\t\t\tif tranvalue.lower() == paramnamevalue[counter]:\n\t\t\t\t\t\t\t\tstatus.append(True)\n\t\t\t\t\t\t\telse: status.append(False)\n\t\t\t\t\t\texcept: status.append(False)\n\t\t\tcounter = counter + 1\n\t\ttmplistvalues.append(pvalues)\n\t\ttmplistnames.append(pname)\n\t\ttmplisttypes.append(e)\n\t\ttmpliststorage.append(storagetype)\n\tif filtermode == False:\n\t\tif any(status) == True and filterbyparam == True:\n\t\t\tparamtypes.append(tmplisttypes)\n\t\t\tparamstoragetype.append(tmpliststorage)\n\t\t\tparamnames.append(tmplistnames)\n\t\t\tparamvalues.append(tmplistvalues)\n\t\t\tacceptedelems.append(currentrealelem)\n\t\t\tif isType == True:\n\t\t\t\tacceptedtypes.append(each)\n\telse:\n\t\tif all(status) == True and filterbyparam == True and len(status) == len(paramnamefilter):\n\t\t\tparamtypes.append(tmplisttypes)\n\t\t\tparamstoragetype.append(tmpliststorage)\n\t\t\tparamnames.append(tmplistnames)\n\t\t\tparamvalues.append(tmplistvalues)\n\t\t\tacceptedelems.append(currentrealelem)\n\t\t\tif isType == True:\n\t\t\t\tacceptedtypes.append(each)\n\tif any(status) == False and filterbyparam == False:\n\t\tparamtypes.append(tmplisttypes)\n\t\tparamstoragetype.append(tmpliststorage)\n\t\tparamnames.append(tmplistnames)\n\t\tparamvalues.append(tmplistvalues)\n\t\tacceptedelems.append(currentrealelem)\n\t\tif isType == True:\n\t\t\tacceptedtypes.append(each)\n\t\t\t\nif isType == True:\n\tpass\nelse:\n\tacceptedtypes = \"Is Type Is Not Activated\"\n\tfailedtoparsetypelems = \"Is Type Is Not Activated\"\n# Assign your output to the OUT variable.\nOUT = acceptedelems, acceptedtypes, failedtoparsetypelems, paramnames, paramtypes, paramvalues, paramstoragetype",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a0912e85e7aa43048441b0d1379c84e8",
      "Inputs": [
        {
          "Id": "5bcc3a5f089d406a9da19f82b2d2372c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d1b5520081b543c09489b8ba4d68f1f0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b6461c502d14c2893d6b4fd321bcf29",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78ca7cbad07d4243bef961081531f886",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b46510c9b7cb412392f1fcf262fbc906",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "345c6ae46f5a4ee8af3f221931a493d2",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e8a9d53c8baf4a829476585c918b8856",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d051d7f2d4774a538c3b4317819bc0ee",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARElements",
      "Id": "1a7a75a0f8194245965cfbb6d2f0ebe3",
      "Inputs": [
        {
          "Id": "a7c18cca8a104f17b55305ea1d81a7ef",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARTypesOfElementsIfIsTypeIsActivated",
      "Id": "777fc4882d1941cd817d842e1c6fb4ba",
      "Inputs": [
        {
          "Id": "0c943be941a44df8a8c93b898095df59",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARFailedToParseTypesOfElementsIfIsTypeIsActivated",
      "Id": "52bb1353719546bd847907782743ff10",
      "Inputs": [
        {
          "Id": "5f205c50ba9b4103bdbeb1e08f97552d",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARParameterNames",
      "Id": "87ff981fe02742d7bdc2ea124ce3c129",
      "Inputs": [
        {
          "Id": "0c9dd453db664957b840721a7749969b",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARParameter",
      "Id": "2ce6154c23834241819dab0b39f32500",
      "Inputs": [
        {
          "Id": "10d709f0acbb4887b60b23e9a66f3947",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARParameterValues",
      "Id": "38555de3b99146a181eb3d323fdb4713",
      "Inputs": [
        {
          "Id": "c7496ce75d9146f6b8a1a46167ea5aa5",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "a1370551-a1d1-4a47-a1a3-8afdfd8f78aa",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "7e716bc4921f4d718e56953864c4b053",
      "Inputs": [
        {
          "Id": "544f3470a11f43c5ba0b9aa0f4db2740",
          "Name": "VARunknownItem",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "74563825bd4049e29002796fbff17064",
          "Name": "VARseq",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Turns an element (or a nested list) into a flat list"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARParameterStorageType",
      "Id": "b2970962f87e4f7cb756441b78e5dcea",
      "Inputs": [
        {
          "Id": "c095aea742a64d30a6ecf6fb1301239b",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.TrimWhitespace@string",
      "Id": "52c49ca444744291aa95b09b5768ffe6",
      "Inputs": [
        {
          "Id": "9de0df79e2a54c2298e14edc4c7f135d",
          "Name": "string",
          "Description": "String to trim.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "942cf71c934a4e66934826b481434a00",
          "Name": "string",
          "Description": "String with beginning and ending whitespaces removed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes all whitespace from the start and end of the given string.\n\nString.TrimWhitespace (string: string): string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.TrimWhitespace@string",
      "Id": "5ac5d4147fe64a148291e88e86849220",
      "Inputs": [
        {
          "Id": "4897fa80801448a999453113adf27e31",
          "Name": "string",
          "Description": "String to trim.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "61ed68b768514d40bf243faeba16599e",
          "Name": "string",
          "Description": "String with beginning and ending whitespaces removed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Removes all whitespace from the start and end of the given string.\n\nString.TrimWhitespace (string: string): string"
    }
  ],
  "Connectors": [
    {
      "Start": "f11f514c955f4fde89f4fc2fbacf9cb0",
      "End": "a7c18cca8a104f17b55305ea1d81a7ef",
      "Id": "c622e50ebd324436832b3fbbdfc507c3",
      "IsHidden": "False"
    },
    {
      "Start": "3d78aa0993e84ac69897931fe5afbd47",
      "End": "0c943be941a44df8a8c93b898095df59",
      "Id": "dd8136a62dbf41e5971e1ad3f442af18",
      "IsHidden": "False"
    },
    {
      "Start": "1d055f67dc16403b857ec49a5db6e3bb",
      "End": "5f205c50ba9b4103bdbeb1e08f97552d",
      "Id": "9e8a78b5d9bb402dba3298d63080310e",
      "IsHidden": "False"
    },
    {
      "Start": "f7dc161a408b47a19bf22448e77f59fe",
      "End": "0c9dd453db664957b840721a7749969b",
      "Id": "d22a45915b89416188f983e06f227356",
      "IsHidden": "False"
    },
    {
      "Start": "23a89bb334b14cf1bde6390de62b2b30",
      "End": "10d709f0acbb4887b60b23e9a66f3947",
      "Id": "ca39e1b7e9644af8867b99c043aff2ec",
      "IsHidden": "False"
    },
    {
      "Start": "cb258174a8ea48529880a66b02804d9f",
      "End": "c7496ce75d9146f6b8a1a46167ea5aa5",
      "Id": "8f0b19795ef84870a69d90957f42f016",
      "IsHidden": "False"
    },
    {
      "Start": "edbb19ebdfd94b55b9464bdcd16bc3e5",
      "End": "c095aea742a64d30a6ecf6fb1301239b",
      "Id": "2932cfcf20c7478681f82b3b5a26fd93",
      "IsHidden": "False"
    },
    {
      "Start": "e78f147ee0394cd1acad70ac290dc50c",
      "End": "78ca7cbad07d4243bef961081531f886",
      "Id": "613ac1c12a1442e6b2d17709d3461981",
      "IsHidden": "False"
    },
    {
      "Start": "6a428af2649e49ffb74db9ed96e75c24",
      "End": "b46510c9b7cb412392f1fcf262fbc906",
      "Id": "9fd5ed6307e5436d83b33c76d7642e4e",
      "IsHidden": "False"
    },
    {
      "Start": "7fe9d482fafe4a28accce25e92681b92",
      "End": "544f3470a11f43c5ba0b9aa0f4db2740",
      "Id": "147e6880e5994588bf3b7cabcd2155b8",
      "IsHidden": "False"
    },
    {
      "Start": "501c60cbfa9b484a9c79aebc065b111a",
      "End": "5bcc3a5f089d406a9da19f82b2d2372c",
      "Id": "daacca0436f349849eb97a2536a66187",
      "IsHidden": "False"
    },
    {
      "Start": "75f783aec27244ff93c80bab1259fa35",
      "End": "1b6461c502d14c2893d6b4fd321bcf29",
      "Id": "48081c7c856b455e9cd391e2fa1b3467",
      "IsHidden": "False"
    },
    {
      "Start": "3a11dc8b367445a19488f712727b4f6c",
      "End": "345c6ae46f5a4ee8af3f221931a493d2",
      "Id": "afd4111fa9d94e61a6eb2923b529202d",
      "IsHidden": "False"
    },
    {
      "Start": "a2cf6d58da074cce99c481ce7632083f",
      "End": "e8a9d53c8baf4a829476585c918b8856",
      "Id": "07ae539774a94fd79134ea7204c6935a",
      "IsHidden": "False"
    },
    {
      "Start": "c55463af35064b9ab3eaa632c8154217",
      "End": "4897fa80801448a999453113adf27e31",
      "Id": "fa8a7d59a600422396aa60ce9caf2625",
      "IsHidden": "False"
    },
    {
      "Start": "36e549a589d44cafb7d4ec3bc01b12a2",
      "End": "9de0df79e2a54c2298e14edc4c7f135d",
      "Id": "5df3178a3c654e05bb85f11373b72564",
      "IsHidden": "False"
    },
    {
      "Start": "882e704b777845f4b9833d91aae5d67e",
      "End": "061d71f54d674321919f6d739ca387b5",
      "Id": "8d82fbe82cde44b28c8a781246132bbf",
      "IsHidden": "False"
    },
    {
      "Start": "d051d7f2d4774a538c3b4317819bc0ee",
      "End": "4fa4e0c72efb421c96e75eb20dbf6e60",
      "Id": "75ea921e9f4a4da7b74b67e54e7b195b",
      "IsHidden": "False"
    },
    {
      "Start": "74563825bd4049e29002796fbff17064",
      "End": "d1b5520081b543c09489b8ba4d68f1f0",
      "Id": "3b926f6e910440a5a14495708c4bbbcc",
      "IsHidden": "False"
    },
    {
      "Start": "942cf71c934a4e66934826b481434a00",
      "End": "43b97cb666cb47b2afa8c6348523b762",
      "Id": "8d5306b32bf244d4bbd5e8708e15788a",
      "IsHidden": "False"
    },
    {
      "Start": "61ed68b768514d40bf243faeba16599e",
      "End": "133d029635034ddebae162fed1bb9e41",
      "Id": "1289e23d8f514bbe9612e48cf76396bb",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "a1370551-a1d1-4a47-a1a3-8afdfd8f78aa"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Synthesize toolkit",
      "Version": "12.6.3",
      "ReferenceType": "Package",
      "Nodes": [
        "afdd7ee7c3704e409b14026445a91ef8",
        "8a5123f361c8475f829196ab6873c842",
        "7e716bc4921f4d718e56953864c4b053"
      ]
    }
  ],
  "Author": "None provided",
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "a9c39a1fe6734ffeab4edfcf566b961a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 727.40248028593,
        "Y": 357.868988255676
      },
      {
        "Name": "CW.TurnIntoList",
        "ShowGeometry": true,
        "Id": "afdd7ee7c3704e409b14026445a91ef8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 132.2902624496,
        "Y": 439.429834174776
      },
      {
        "Name": "CW.TurnIntoList",
        "ShowGeometry": true,
        "Id": "8a5123f361c8475f829196ab6873c842",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 130.897134278354,
        "Y": 535.512422847685
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "112e1135d5f84627b25b104160105a51",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -70.6873542689314,
        "Y": 326.14231548174
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "d6437c0a27644be783c1021fc1e8e120",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1067.47373023686,
        "Y": -52.3213955646393
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "e5e7adfdb30a461e8e918b37a83aef00",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1067.47373023686,
        "Y": 97.6786044353607
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "68f2c51323fc42fab25e270db7ff550d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1068.56299876741,
        "Y": 247.67860443536
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "50e8ac7b0966454d9950281e44351b8b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1067.47373023686,
        "Y": 397.67860443536
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "fcafe9017f0c49a7800fb5b322dcd891",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1067.47373023686,
        "Y": 548.539926335883
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "6d1d8125d659495ca8d62b9a155f598f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1067.47373023686,
        "Y": 697.67860443536
      },
      {
        "Name": "Input",
        "ShowGeometry": true,
        "Id": "baddb49778dc4622b6027ca2727181bd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1060.48349035598,
        "Y": 820.591424896961
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "a0912e85e7aa43048441b0d1379c84e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 545.50513933568,
        "Y": 343.913924429826
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "1a7a75a0f8194245965cfbb6d2f0ebe3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1189.15525383296,
        "Y": 216.362719703558
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "777fc4882d1941cd817d842e1c6fb4ba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1152.47840173523,
        "Y": 317.397652475252
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "52bb1353719546bd847907782743ff10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1131.64093306853,
        "Y": 398.280963517615
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "87ff981fe02742d7bdc2ea124ce3c129",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1201.09724392563,
        "Y": 530.138583831614
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "2ce6154c23834241819dab0b39f32500",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1195.97924817163,
        "Y": 677.579585954613
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "38555de3b99146a181eb3d323fdb4713",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1181.47826020196,
        "Y": 767.869635491259
      },
      {
        "Name": "CW.TurnIntoList",
        "ShowGeometry": true,
        "Id": "7e716bc4921f4d718e56953864c4b053",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 146.833318559616,
        "Y": 325.58616757996
      },
      {
        "Name": "Output",
        "ShowGeometry": true,
        "Id": "b2970962f87e4f7cb756441b78e5dcea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1187.32970013678,
        "Y": 891.482260980733
      },
      {
        "Name": "String.TrimWhitespace",
        "ShowGeometry": true,
        "Id": "52c49ca444744291aa95b09b5768ffe6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -625.812585341566,
        "Y": 657.624122331327
      },
      {
        "Name": "String.TrimWhitespace",
        "ShowGeometry": true,
        "Id": "5ac5d4147fe64a148291e88e86849220",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -628.660931147681,
        "Y": 523.447502137758
      }
    ],
    "Annotations": [],
    "X": 23.8847577000059,
    "Y": -172.821209936335,
    "Zoom": 0.962904283954348
  }
}