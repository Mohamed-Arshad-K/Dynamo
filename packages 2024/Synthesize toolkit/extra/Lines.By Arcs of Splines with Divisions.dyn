{
  "Uuid": "3c9d0464-8643-5ffe-96e5-ab1769818209",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Lines.By Arcs of Splines with Divisions",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "532fd8df385e4a0d90e6f8940c7d7b78",
      "Name": "01.Select Lines",
      "Type": "hostSelection",
      "Value": "",
      "Description": "Select multiple elements from the Revit document.",
      "SelectedIndex": 0
    },
    {
      "Id": "99b3c8bfcc804d2db15676998b4b4eef",
      "Name": "02.Delete Original ?",
      "Type": "boolean",
      "Value": "true",
      "Description": "Selection between a true and false.",
      "SelectedIndex": 0
    },
    {
      "Id": "1e09a2b7680e41da8a265981baef5b5a",
      "Name": "03.Let Dynamo Guess ?",
      "Type": "boolean",
      "Value": "false",
      "Description": "Selection between a true and false.",
      "SelectedIndex": 0
    },
    {
      "Id": "0f4198e328904dbbb4996bf523447cd6",
      "Name": "04.By Number = False | By Distance = True",
      "Type": "boolean",
      "Value": "false",
      "Description": "Selection between a true and false.",
      "SelectedIndex": 0
    },
    {
      "Id": "36cf510f94694079a50394d8cec58952",
      "Name": "05.Divisions Number/Distance",
      "Type": "number",
      "Value": "25",
      "NumberType": "Double",
      "Description": "Creates a number.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Created By Karam Baki : karam@aecedx.com\n# Enable Python support and load DesignScript library\n# IMPORTANT : ALL DYNAMO DESIGN SCRIPT NODES ARE AS (dg)\nimport clr\nclr.AddReference('ProtoGeometry')\nfrom Autodesk.DesignScript import Geometry as dg\n\n# EXTENSION Enable ToDSType\nclr.AddReference('RevitNodes')\nimport Revit\nclr.ImportExtensions(Revit.Elements)\n\n# Enable Revit Elements\nfrom Revit.Elements import *\n\n# EXTENSION Enable Geometry Conversion Methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\n# Enable Revit API\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\n\n# Enable DocumentManager and TransactionManager\nclr.AddReference('RevitServices')\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\n# EXTENSION Enable Geometry Conversion Methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\ndef tolist(obj1):\n\tif hasattr(obj1,'__iter__'): return obj1\n\telse: return [obj1]\n\ndef normalize(length,nostartend = False,twominonly = False):\n\tif length != None:\n\t\tif length <= 3 and twominonly == False:\n\t\t\tlength = 4\n\t\telif length <= 3 and twominonly == True:\n\t\t\tif length < 2:\n\t\t\t\tlength = 2\n\t\tif nostartend:\n\t\t\tlength += 2\n\t\ta = range(0,int(length))\n\t\tpoints = []\n\t\tamin, amax = min(a), max(a)\n\t\titem = []\n\t\tfor val in a:\n\t\t\titem.append(float(val-amin) / float(amax-amin))\n\telse:\n\t\titem = [None]\n\tif nostartend == True:\n\t\titem.pop(0)\n\t\titem.pop(-1)\n\treturn item\n\ndef fixcurve(crv,div):\n\tnums = normalize(div)\n\tpts = []\n\tfor n in nums:\n\t\tpts.append(dg.Curve.PointAtParameter(crv,n))\n\tcurve = dg.NurbsCurve.ByControlPoints(pts)\n\treturn curve\n\t\ndef spltocurve(crv,numordis,distance):\n\ttry:\n\t\tif \"NurbsCurve\" in crv.ToString() and distance != 0:\n\t\t\tif numordis:\n\t\t\t\tdiv = int(round(crv.Length/distance))\n\t\t\telse:\n\t\t\t\tdiv = int(distance)\n\t\t\tarcs = []\n\t\t\tincrement = 1.0 / div\n\t\t\ttry:\n\t\t\t\ttan = crv.TangentAtParameter(0)\n\t\t\texcept:\n\t\t\t\tcrv = fixcurve(crv,div*10)\n\t\t\t\ttan = crv.TangentAtParameter(0)\n\t\t\tfor j in range(0, div):\n\t\t\t\tincstart = increment * j\n\t\t\t\tincend = increment * (j+1)\n\t\t\t\tptstart = crv.PointAtParameter(incstart)\n\t\t\t\tptend = crv.PointAtParameter(incend)\n\t\t\t\ttry:\n\t\t\t\t\tarc = dg.Arc.ByStartPointEndPointStartTangent(ptstart,ptend,tan)\n\t\t\t\texcept:\n\t\t\t\t\tarc = dg.Line.ByStartPointEndPoint(ptstart,ptend)\n\t\t\t\tarcs.append(arc)\n\t\t\t\ttan = arc.TangentAtParameter(1)\n\t\t\tjoined = dg.PolyCurve.ByJoinedCurves(arcs)\n\t\t\treturn joined,True\n\t\telse:\n\t\t\treturn crv,False\n\texcept:\n\t\treturn crv,False\n\ndef levelplane(doc,workplane):\n\tsplits = list(workplane.Split(\":\"))\n\tsplits.pop(0)\n\tlevel = \":\".join(splits).strip()\n\tif workplane.startswith(\"Level\"):\n\t\tlevs = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Levels).WhereElementIsNotElementType().ToElements()\n\telse:\n\t\tlevs = FilteredElementCollector(doc).OfClass(ReferencePlane).WhereElementIsNotElementType().ToElements()\n\tfor l in levs:\n\t\tif l.Name == level:\n\t\t\twantedlevel = l\n\t\t\tbreak\n\tplane = SketchPlane.Create(doc, wantedlevel.Id)\n\treturn plane\n\nlists = UnwrapElement(tolist(IN[0]))\nnumordis = IN[1]\ndistance = IN[2]\ndelete = IN[3]\ndynguess = IN[4]\n\nopt1 = Options()\ndoc = DocumentManager.Instance.CurrentDBDocument\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\nview = uidoc.ActiveView\nTransactionManager.Instance.EnsureInTransaction(doc)\nif doc.IsFamilyDocument: \n\tdoc_create = doc.FamilyCreate\nelse: \n\tdoc_create = doc.Create\nfor l in lists:\n\ttry:\n\t\tgeoms = l.get_Geometry(opt1)\n\t\ttmp = []\n\t\tfor t in geoms:\n\t\t\ttmp.append(t.ToProtoType())\n\t\tgeom = tmp[0]\n\t\tif \"Detail\" in l.ToString():\n\t\t\tsplitcurve = spltocurve(geom,numordis,distance)\n\t\t\tif dynguess:\n\t\t\t\tsplitted = dg.Curve.ApproximateWithArcAndLineSegments(geom)\n\t\t\telse:\n\t\t\t\tsplitted = dg.Geometry.Explode(splitcurve[0])\n\t\t\tif splitcurve[1]:\n\t\t\t\tfor s in splitted:\n\t\t\t\t\tdetline = doc_create.NewDetailCurve(view, s.ToRevitType())\n\t\t\t\t\tdetline.LineStyle = l.LineStyle\n\t\t\t\tif delete:\n\t\t\t\t\tdoc.Delete(l.Id)\n\t\telse:\n\t\t\tsplitcurve = spltocurve(geom,numordis,distance)\n\t\t\tif dynguess:\n\t\t\t\tsplitted = dg.Curve.ApproximateWithArcAndLineSegments(geom)\n\t\t\telse:\n\t\t\t\tsplitted = dg.Geometry.Explode(splitcurve[0])\n\t\t\tif splitcurve[1]:\n\t\t\t\tworkplane = l.get_Parameter(BuiltInParameter.SKETCH_PLANE_PARAM).AsString()\n\t\t\t\tif workplane.startswith(\"Level\") or workplane.startswith(\"Reference Plane\"):\n\t\t\t\t\tplane = levelplane(doc,workplane)\n\t\t\t\t\tfor s in splitted:\n\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\tmodline = doc_create.NewModelCurve(s.ToRevitType(),plane)\n\t\t\t\t\t\texcept:\n\t\t\t\t\t\t\tmodline = UnwrapElement(Revit.Elements.ModelCurve.ByCurve(s))\n\t\t\t\t\t\tmodline.LineStyle = l.LineStyle\n\t\t\t\telse:\n\t\t\t\t\tfor s in splitted:\n\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\tmodline = UnwrapElement(Revit.Elements.ModelCurve.ByCurve(s))\n\t\t\t\t\t\texcept:\n\t\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\t\tplane = SketchPlane.Create(doc,dg.PolyCurve.BasePlane(dg.PolyCurve.ByJoinedCurves(splitted)).ToPlane())\n\t\t\t\t\t\t\texcept:\n\t\t\t\t\t\t\t\tjoined = dg.PolyCurve.ByJoinedCurves(splitted)\n\t\t\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\t\t\tplane = SketchPlane.Create(doc,dg.Plane.ByBestFitThroughPoints(ptsGenerate(joined)).ToPlane())\n\t\t\t\t\t\t\t\texcept:\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\tmodline = doc_create.NewModelCurve(s.ToRevitType(),plane)\n\t\t\t\t\t\tmodline.LineStyle = l.LineStyle\n\t\t\t\tif delete:\n\t\t\t\t\tdoc.Delete(l.Id)\n\texcept:\n\t\tpass\nTransactionManager.Instance.TransactionTaskDone()\n\n# Assign your output to the OUT variable.\nOUT = \"Done\"",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "dfbede1f48314a0c9c4dead283d4d01b",
      "Inputs": [
        {
          "Id": "d3e7bf93f0a44e4492e228e7581eeba4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0ad087b72ef4b6d90a1506e3b66ae86",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ab63e1c4edd41dfbb90717f81753d22",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "80a3ce79e084459c8e3df50f7a1d2fda",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d6429c765d4e44bd8e9899e9ea72c6b4",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4621a27463534aff9e1f00dcf184dda6",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [],
      "Id": "532fd8df385e4a0d90e6f8940c7d7b78",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c452256f997b4bf9a1cdabc25d8bbbb1",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "99b3c8bfcc804d2db15676998b4b4eef",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e7d866eb268f4e568049e74d7fccf995",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "1e09a2b7680e41da8a265981baef5b5a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "322e9d095ba643d3966426bf8463f589",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "0f4198e328904dbbb4996bf523447cd6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8d59c29305394828935cacce5c5ef2af",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 25.0,
      "Id": "36cf510f94694079a50394d8cec58952",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e9236230588e4032b624ce00ad6821a4",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "e3b15dcf-8a04-4048-81bc-0e3c0480d780",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "ede9763e0a51438aa7a82f71d4f40a83",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "303def636fdd4c1783f893adcb590f4a",
          "Name": "VAROut",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Debug Python"
    }
  ],
  "Connectors": [
    {
      "Start": "c452256f997b4bf9a1cdabc25d8bbbb1",
      "End": "d3e7bf93f0a44e4492e228e7581eeba4",
      "Id": "8bf05678f9ae427a9266c1711dda3d20",
      "IsHidden": "False"
    },
    {
      "Start": "e7d866eb268f4e568049e74d7fccf995",
      "End": "80a3ce79e084459c8e3df50f7a1d2fda",
      "Id": "c5a7f453f1734218a4b0c81d139bf8fd",
      "IsHidden": "False"
    },
    {
      "Start": "322e9d095ba643d3966426bf8463f589",
      "End": "d6429c765d4e44bd8e9899e9ea72c6b4",
      "Id": "f27ef3f57d674b6e88ba1f71b40c34da",
      "IsHidden": "False"
    },
    {
      "Start": "8d59c29305394828935cacce5c5ef2af",
      "End": "e0ad087b72ef4b6d90a1506e3b66ae86",
      "Id": "dd1368555b6e45bcacf8db07aa8559bc",
      "IsHidden": "False"
    },
    {
      "Start": "e9236230588e4032b624ce00ad6821a4",
      "End": "1ab63e1c4edd41dfbb90717f81753d22",
      "Id": "60166694cb0b478da8d3dc406e067490",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "e3b15dcf-8a04-4048-81bc-0e3c0480d780"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Synthesize toolkit",
      "Version": "12.5.1",
      "ReferenceType": "Package",
      "Nodes": [
        "ede9763e0a51438aa7a82f71d4f40a83"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "karam@aecedx.com",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 151.96121215820312,
      "EyeY": 65.26531219482422,
      "EyeZ": 169.13047790527344,
      "LookX": -32.14984130859375,
      "LookY": -65.26531219482422,
      "LookZ": -63.893306732177734,
      "UpX": -0.22474239766597748,
      "UpY": 0.8660253882408142,
      "UpZ": -0.44664403796195984
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "dfbede1f48314a0c9c4dead283d4d01b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 96.9880098779888,
        "Y": -499.66654211051
      },
      {
        "Name": "01.Select Lines",
        "ShowGeometry": true,
        "Id": "532fd8df385e4a0d90e6f8940c7d7b78",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -395.779314242121,
        "Y": -513.643520205583
      },
      {
        "Name": "02.Delete Original ?",
        "ShowGeometry": true,
        "Id": "99b3c8bfcc804d2db15676998b4b4eef",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -379.853490001824,
        "Y": -364.884918458578
      },
      {
        "Name": "03.Let Dynamo Guess ?",
        "ShowGeometry": true,
        "Id": "1e09a2b7680e41da8a265981baef5b5a",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -383.159629115094,
        "Y": -285.509922815663
      },
      {
        "Name": "04.By Number = False | By Distance = True",
        "ShowGeometry": true,
        "Id": "0f4198e328904dbbb4996bf523447cd6",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -416.575887531848,
        "Y": -193.753739497619
      },
      {
        "Name": "05.Divisions Number/Distance",
        "ShowGeometry": true,
        "Id": "36cf510f94694079a50394d8cec58952",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -382.819336837155,
        "Y": -120.415588970381
      },
      {
        "Name": "Debug Python No Message",
        "ShowGeometry": true,
        "Id": "ede9763e0a51438aa7a82f71d4f40a83",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 73.7056733803402,
        "Y": -224.751218471616
      }
    ],
    "Annotations": [
      {
        "Id": "766c277da0e7466db00efb03c71c0c38",
        "Title": "Input",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "532fd8df385e4a0d90e6f8940c7d7b78",
          "1e09a2b7680e41da8a265981baef5b5a",
          "36cf510f94694079a50394d8cec58952",
          "99b3c8bfcc804d2db15676998b4b4eef"
        ],
        "HasNestedGroups": false,
        "Left": -405.779314242121,
        "Top": -579.643520205583,
        "Width": 332.959977404966,
        "Height": 591.027931235202,
        "FontSize": 30.0,
        "InitialTop": -513.643520205583,
        "InitialHeight": 538.2279312352019,
        "TextblockHeight": 56.0,
        "Background": "#FFD8D8D8"
      }
    ],
    "X": 365.078355878138,
    "Y": 622.371735694154,
    "Zoom": 0.860999512171414
  }
}