{
  "Uuid": "eb82ca8a-2f84-4498-afd5-5e1ac8121e4f",
  "IsCustomNode": true,
  "Category": "PracticalBIM.Revit.Elements.Tags",
  "Description": "Create Tags By View",
  "Name": "CreateTags",
  "ElementResolver": {
    "ResolutionMap": {
      "Revit.Application.Document.Current": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      },
      "Revit.Application.Document": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "element",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Element to tag"
      },
      "Id": "fad3b8a045034c8dbe8ca4f1cdb9a1c8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "85d9c068bdab4925b4b37cc7c908d5c5",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "TagLocation",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Point"
      },
      "Id": "ebfe59d742b04fb199de5605fa5143f8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d99806d630a847c2bba7ebc75649c015",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "TagType",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Family Type to use"
      },
      "Id": "005d2514866d4f4e8569428b9e49fc0f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1a1af4832ee940278a3b230ff23858ab",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "LinkInstance",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "11d2f481054540ff8cddbd836f4465aa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "10daa0c3b8a84553939ca43e60626f49",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "addLeader",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": "Optional : Add a leader, defaults to false"
      },
      "Id": "310a3b187c2847b69d732be4db9d68da",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c4f98c6027b94f92bb39d18a16129f16",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "RunIt",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "db90c4060df842dd8c18db379d3d8f69",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "27b1a5dffc6045ee8672e5369bc763d3",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "horizontal",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "true",
        "Description": "Optional : Place tag horizontal, defaults to true"
      },
      "Id": "1ea526ea981147a7b2ec6baa2aa2f012",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b2c75bc5159f4d74bef4819c414f3113",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "view",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": "Revit.Application.Document.Current.ActiveView",
        "Description": "View to tag in."
      },
      "Id": "41c0c471c024440e8ca081422be4a89b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b851e99397784ecebc96f2f8437581e8",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2015, Konrad K Sobon\n# @arch_laboratory, http://archi-lab.net\n#This node is an update to Create Annotation Tag node that can be found in archi-lab package. Thanks to Konrad K Sobon for making the original one.\n# Ability to tag Linked elements by Alban de Chasteigner\n\nimport clr\n# Import RevitAPI\nclr.AddReference(\"RevitAPI\")\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n# Import Element wrapper extension methods\nclr.AddReference(\"RevitNodes\")\nimport Revit\n# Import geometry conversion extension methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\nimport sys\nsys.path.append(r\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\n\n# Import DocumentManager and TransactionManager\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\nviews = UnwrapElement(IN[0])\nelements = UnwrapElement(IN[1]) if isinstance(IN[1],list) else [UnwrapElement(IN[1])]\nlocationPts = UnwrapElement(IN[2]) if isinstance(IN[2],list) else [UnwrapElement(IN[2])]\ntagType = UnwrapElement(IN[3])\n\ntagOrientation = IN[4]\nif tagOrientation == True :\n\ttagOrientation = TagOrientation.Horizontal\n\tspTagOrientation = SpatialElementTagOrientation.Horizontal\nelif tagOrientation == False :\n\ttagOrientation = TagOrientation.Vertical\n\tspTagOrientation = SpatialElementTagOrientation.Vertical\n\nleader = IN[5]\n\nif IN[6] != None:\n\tlink = UnwrapElement(IN[6])\nelse:\n\tlink = None\n\t\nRunIt = IN[7]\n\n#ueWrapper from Dimitar Venkov\nueWrapper = None\nwrappers = clr.GetClrType(Revit.Elements.ElementWrapper).GetMethods()\nfor w in wrappers:\n\tif w.ToString().startswith(\"Revit.Elements.UnknownElement\"):\n\t\tueWrapper = w\n\t\tbreak\n\t\t\t\t\ndef toRvtPoint(point):\n\treturn point.ToXyz()\n\ndef toRvtId(_id):\n\tif isinstance(_id, int) or isinstance(_id, str):\n\t\tid = ElementId(int(_id))\n\t\treturn id\n\telif isinstance(_id, ElementId):\n\t\treturn _id\n\ntagTypeId = toRvtId(tagType.Id)\nchk = []\ntry:\n\terrorReport = None\n\tif RunIt:\n\t\tif tagType.Category.Id == ElementId(BuiltInCategory.OST_RoomTags):\n\t\t\troomTags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\t\t\t\t#added the if statement to get roomId from the linked element.\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\troomId = LinkElementId(link.Id, i.Id)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\troomId = LinkElementId(i.Id)\n\t\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)\n\t\t\t\t\t\troomTag = doc.Create.NewRoomTag(roomId, location, j.Id)\n\t\t\t\t\t\troomTag.RoomTagType = tagType\n\t\t\t\t\t\troomTag.TagOrientation = spTagOrientation\n\t\t\t\t\t\troomTag.HasLeader = leader\n\t\t\t\t\t\tchk.append(roomId)\n\t\t\t\t\t\troomTags.append(roomTag)\n\t\t\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\telse:\n\t\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\troomId = LinkElementId(link.Id, i.Id)\n\t\t\t\t\telse:\n\t\t\t\t\t\troomId = LinkElementId(i.Id)\n\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)\n\t\t\t\t\troomTag = doc.Create.NewRoomTag(roomId, location, views.Id)\n\t\t\t\t\troomTag.RoomTagType = tagType\n\t\t\t\t\troomTag.TagOrientation = spTagOrientation\n\t\t\t\t\troomTag.HasLeader = leader\n\t\t\t\t\troomTags.append(roomTag)\n\t\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = roomTags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_MEPSpaceTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\troomTags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)\n\t\t\t\t\t\tspaceTag = doc.Create.NewSpaceTag(i, location, j)\n\t\t\t\t\t\tspaceTag.SpaceTagType = tagType\n\t\t\t\t\t\tspaceTag.TagOrientation = spTagOrientation\n\t\t\t\t\t\tspaceTag.HasLeader = leader\n\t\t\t\t\t\troomTags.append(spaceTag)\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)\n\t\t\t\t\tspaceTag = doc.Create.NewSpaceTag(i,location, views)\n\t\t\t\t\tspaceTag.SpaceTagType = tagType\n\t\t\t\t\tspaceTag.TagOrientation = spTagOrientation\n\t\t\t\t\tspaceTag.HasLeader = leader\n\t\t\t\t\troomTags.append(spaceTag)\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = roomTags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_AreaTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\troomTags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(k).X, toRvtPoint(k).Y)\n\t\t\t\t\t\tareaTag = doc.Create.NewAreaTag(j,i, location)\n\t\t\t\t\t\tareaTag.AreaTagType = tagType\n\t\t\t\t\t\tareaTag.TagOrientation = spTagOrientation\n\t\t\t\t\t\tareaTag.HasLeader = leader\n\t\t\t\t\t\troomTags.append(areaTag)\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tlocation = Autodesk.Revit.DB.UV(toRvtPoint(j).X, toRvtPoint(j).Y)\n\t\t\t\t\tareaTag = doc.Create.NewAreaTag(views,i,location)\n\t\t\t\t\tareaTag.AreaTagType = tagType\n\t\t\t\t\tareaTag.TagOrientation = spTagOrientation\n\t\t\t\t\tareaTag.HasLeader = leader\n\t\t\t\t\troomTags.append(areaTag)\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = roomTags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_MultiCategoryTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\tmultitags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc,j.Id, reference, \tleader, TagMode.TM_ADDBY_MULTICATEGORY, \ttagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\tmultitags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tmultitags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_MULTICATEGORY, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\tmultitags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\tmultitags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = multitags\n\t\telif tagType.Category.Id == ElementId(BuiltInCategory.OST_MaterialTags):\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\tMattags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc, j.Id, reference, leader, TagMode.TM_ADDBY_MATERIAL, tagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\tMattags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tMattags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_MATERIAL, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\tMattags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\tMattags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = Mattags\n\t\telse:\n\t\t\tTransactionManager.Instance.EnsureInTransaction(doc)\n\t\t\ttags = []\n\t\t\tif isinstance(IN[0], list):\n\t\t\t\tfor j in views:\n\t\t\t\t\tfor i,k in zip(elements, locationPts):\n\t\t\t\t\t\tif link != None:\n\t\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\t\tlocation = toRvtPoint(k)\n\t\t\t\t\t\ttag = IndependentTag.Create(doc, j.Id, reference, leader, TagMode.TM_ADDBY_CATEGORY, tagOrientation, location)\n\t\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\t\tif link == None:\n\t\t\t\t\t\t\ttags.append(tag)\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ttags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\telse:\n\t\t\t\tfor i, j in zip(elements, locationPts):\n\t\t\t\t\tif link != None:\n\t\t\t\t\t\treference = Reference(i).CreateLinkReference(link)\n\t\t\t\t\telse:\n\t\t\t\t\t\treference = Reference(i)\n\t\t\t\t\tlocation = toRvtPoint(j)\n\t\t\t\t\ttag = IndependentTag.Create(doc, views.Id, reference, leader, TagMode.TM_ADDBY_CATEGORY, tagOrientation, location)\n\t\t\t\t\ttag.ChangeTypeId(tagTypeId)\n\t\t\t\t\tif link == None:\n\t\t\t\t\t\ttags.append(tag)\n\t\t\t\t\telse:\n\t\t\t\t\t\ttags.append(ueWrapper.Invoke(None,(tag, True)))\n\t\t\tTransactionManager.Instance.TransactionTaskDone()\n\t\t\tresult = tags\n\telse:\n\t\tresult = \"RunIt is set to False.\"\nexcept:\n\t# if error accurs anywhere in the process catch it\n\timport traceback\n\terrorReport = traceback.format_exc()\n\n#Assign your output to the OUT variable\nif errorReport == None:\n\tOUT = result\nelse:\n\tOUT = errorReport",
      "VariableInputPorts": true,
      "Id": "54d00a0be14649398855336d1395c1f1",
      "Inputs": [
        {
          "Id": "f6600cc645ee4eaab91ca0b2b431880f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "030e11025bc64723b3ff777061714ffe",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ee67706b9bd945888bcaab69d5a5c4dc",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0ed6923ba8b4c4daf8a64d5ad4f071e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a69da59bfe7412a9a9cc7ccf7cddfc1",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1fd4bb2015b34e71a7f2091574aee32b",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4a94f09ab18241eeb87b32afdf8863ef",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a69cbd453e60455a871bea371e2b2252",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "36965767a9a64abda6ee3c3fc5a52ebe",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "Tag",
      "Id": "525a9bf3fc5e472eb5605cf8a8e39728",
      "Inputs": [
        {
          "Id": "a671e4272b1148109eab1c0d79473b29",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    }
  ],
  "Connectors": [
    {
      "Start": "85d9c068bdab4925b4b37cc7c908d5c5",
      "End": "030e11025bc64723b3ff777061714ffe",
      "Id": "6b78a5df35294d7f899d5a1b0eec8f2a"
    },
    {
      "Start": "d99806d630a847c2bba7ebc75649c015",
      "End": "ee67706b9bd945888bcaab69d5a5c4dc",
      "Id": "02dfeca714e14d41b6bce81d82e971be"
    },
    {
      "Start": "1a1af4832ee940278a3b230ff23858ab",
      "End": "e0ed6923ba8b4c4daf8a64d5ad4f071e",
      "Id": "8840bb15d8724139998e0207367a755b"
    },
    {
      "Start": "10daa0c3b8a84553939ca43e60626f49",
      "End": "4a94f09ab18241eeb87b32afdf8863ef",
      "Id": "36087563f20b448aba87123405213c6a"
    },
    {
      "Start": "c4f98c6027b94f92bb39d18a16129f16",
      "End": "1fd4bb2015b34e71a7f2091574aee32b",
      "Id": "3a84a6e6d19f4f97939283872b49bd18"
    },
    {
      "Start": "27b1a5dffc6045ee8672e5369bc763d3",
      "End": "a69cbd453e60455a871bea371e2b2252",
      "Id": "a30fb586ca064ab9a958a422e36f6854"
    },
    {
      "Start": "b2c75bc5159f4d74bef4819c414f3113",
      "End": "7a69da59bfe7412a9a9cc7ccf7cddfc1",
      "Id": "35e1c36462294ad9b3b4cc7843edfa82"
    },
    {
      "Start": "b851e99397784ecebc96f2f8437581e8",
      "End": "f6600cc645ee4eaab91ca0b2b431880f",
      "Id": "e12f3305c45440e0bd03f5620683cf18"
    },
    {
      "Start": "36965767a9a64abda6ee3c3fc5a52ebe",
      "End": "a671e4272b1148109eab1c0d79473b29",
      "Id": "e97cf515071f4f919989e70e8181dda9"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.3.0.5885",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "fad3b8a045034c8dbe8ca4f1cdb9a1c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 574.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "ebfe59d742b04fb199de5605fa5143f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 668.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "005d2514866d4f4e8569428b9e49fc0f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 761.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "11d2f481054540ff8cddbd836f4465aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 1040.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "310a3b187c2847b69d732be4db9d68da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 947.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "db90c4060df842dd8c18db379d3d8f69",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 1123.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "1ea526ea981147a7b2ec6baa2aa2f012",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 854.0
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "41c0c471c024440e8ca081422be4a89b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 822.0,
        "Y": 481.0
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "54d00a0be14649398855336d1395c1f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1446.7999999999997,
        "Y": 715.0
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "525a9bf3fc5e472eb5605cf8a8e39728",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1671.5999999999997,
        "Y": 715.0
      }
    ],
    "Annotations": [],
    "X": 0.0,
    "Y": 0.0,
    "Zoom": 1.0
  }
}