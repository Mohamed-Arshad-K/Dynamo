<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamoSimulationRSA</name>
    </assembly>
    <members>
        <member name="T:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar">
            <summary>
            An Analytical bar object representing a RSA bar
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.#ctor">
            <summary>
             Default  constructor
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.#ctor(DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,System.Int32)">
            <summary>
            Constructor without UniqueId set
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="id"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.#ctor(DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,System.Int32,System.Int32)">
            <summary>
             AnalycalBar constructor
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.#ctor(DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode)">
            <summary>
            AnalyticalBar constructor using as id an available free id from RSA and an increment of the last unique id generated  
            </summary>
            <param name="startNode"></param>
            <param name="endNode"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.CreateByRSANodesIds(System.Int32,System.Int32)">
            <summary>
            Create an  bar in RSA based on RSA node IDs
            Dynamo Node will have only seriliazed these 2 ids  
            1) check if data are serialized
            2) if not,  create an analytical bar object
                a) check if bar exist in RSA
                    i) if yes -  reuse RSA data
                    ii) if no -  create a new analyticalBar
                 b) serialize data    
            3) if yes
                a) read data serialized -  it is assume that the bar have been created in RSA
                b) no need to touch serialized data as they doesn't change 
                c) only start and and node could have changed 
            </summary>
            <param name="startNode"></param>
            <param name="endNode"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.ByAnalyticalNodes(DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode)">
            <summary>
            Create an Analytical bar object using two Analytical nodes. This analytical bar will be created in RSA open document using 2 existing analytical nodes. 
            </summary>
            <param name="startNode">An analytical node object representing the start node of the analytical bar</param>
            <param name="endNode">An analytical node object representing the start node of the analytical bar</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.ByPoints(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create an Analytical bar object using two geometrical points.
            This analytical bar will be created in RSA open document using 2 existing analytical nodes created using geometrical points.
            If these nodes are available in RSA, they  will  be reused.  
            </summary>
            <param name="startPoint">A geometrical point object representing the start node of the analytical bar</param>
            <param name="endPoint">A geometrical point object representing the start node of the analytical bar</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.ByLine(Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Create an Analytical bar object using a geomtrical line.
            This analytical bar will be created in RSA open document using 2 existing analytical nodes created using the start and the end of the line.
            If these nodes are available in RSA, they  will  be reused. 
            </summary>
            <param name="line">A geometrical line object representing the analytical bar</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetSectionByName(System.String)">
            <summary>
            Apply to an analytical bar a RSA section attribute. The section must be available in RSA project.
            If succeed,the RSA bar should have a cross section attribute assigned.  
            </summary>
            <param name="analyticalBar">An analytical bar object</param>
            <param name="name">A string that could come from the list of available sections (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetSectionByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},System.String)">
            <summary>
            Apply to a list analytical bars a RSA section attribute.The section must be available in RSA project.
            If succeed,the RSA bar should have a cross section attribute assigned.  
            </summary>
            <param name="analyticalBars">A list of  analytical bar objects</param>
            <param name="name">A string that could come from the list of available sections (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetMaterialByName(System.String)">
            <summary>
            Apply to an analytical bar a RSA material. The material must be available in RSA project.
            If succeed,the RSA bar should have a material attribute assigned.  
            Note that if a section is assigned, the material should be set automatically.   
            </summary>
            <param name="analyticalBar">An analytical bar object</param>
            <param name="name">A string that could come from the list of available materials (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetMaterialByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},System.String)">
            <summary>
            Apply to a list of analytical bars a RSA material. The material must be available in RSA project.
            If succeed,the RSA bar should have a material attribute assigned.  
            Note that if a section is assigned, the material should be set automatically.   
            </summary>
            <param name="analyticalBars">A list of  analytical bar objects</param>
            <param name="name">A string that could come from the list of available materials (UI node) or define by manual input</param>
            <returns></returns> 
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetReleaseByName(System.String)">
            <summary>
            Apply to an analytical bar a RSA release attribute. The release  attribute must be available in RSA project.
            If succeed,the RSA bar should have a release attribute assigned.  
            </summary>
            <param name="analyticalBar">An analytical bar object</param>
            <param name="name">A string that could come from the list of available releases (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetReleaseByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},System.String)">
            <summary>
            Apply to a list analytical bars a RSA release attribute.The release must be available in RSA project.
            If succeed,the RSA bar should have a release attribute assigned. 
            </summary>
            <param name="analyticalBars">A list of  analytical bar objects</param>
            <param name="name">A string that could come from the list of available releases (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetMemberByName(System.String)">
            <summary>
            Apply to an analytical bar a RSA member attribute. The member  attribute must be available in RSA project.
            If succeed,the RSA bar should have a member attribute assigned.  
            Note that member attributes are used for code checking purposes.
            </summary>
            <param name="analyticalBar">An analytical bar object</param>
            <param name="name">A string that could come from the list of available members (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetMemberByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},System.String)">
            <summary>
            Apply to a list analytical bars a RSA member attribute.The member must be available in RSA project.
            If succeed,the RSA bar should have a member attribute assigned. 
            </summary>
            <param name="analyticalBars">A list of  analytical bar objects</param>
            <param name="name">A string that could come from the list of available members (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetOffsetByName(System.String)">
            <summary>
            Apply to an analytical bar a RSA offset attribute. The offset attribute must be available in RSA project.
            If succeed,the RSA bar should have a offset attribute assigned.  
            </summary>
            <param name="analyticalBar">An analytical bar object</param>
            <param name="name">A string that could come from the list of available offsets (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetOffsetByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},System.String)">
            <summary>
            Apply to a list analytical bars a RSA offset attribute.The offset must be available in RSA project.
            If succeed,the RSA bar should have a offset attribute assigned. 
            </summary>
            <param name="analyticalBars">A list of  analytical bar objects</param>
            <param name="name">A string that could come from the list of available offsets (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetCableByName(System.String)">
            <summary>
            Apply to an analytical bar a RSA cable attribute. The  cable attribute must be available in RSA project.
            If succeed,the RSA bar should have a offset attribute assigned.  
            Note that this attribute can't be applied to a bar having a cross section defined previously.   
            </summary>
            <param name="analyticalBar">An analytical bar object</param>
            <param name="name">A string that could come from the list of available cables  (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetCableByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},System.String)">
            <summary>
            Apply to a list analytical bars a RSA cable attribute.The cable must be available in RSA project.
            If succeed,the RSA bar should have a cable attribute assigned. 
            Note that this attribute can't be applied to a bar having a cross section defined previously.  
            </summary>
            <param name="analyticalBars">A list of  analytical bar objects</param>
            <param name="name">A string that could come from the list of available cables (UI node) or define by manual input</param>
            <returns></returns>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.Id">
            <summary>
            The Id of analytical  bar in RSA document
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.StartNode">
            <summary>
            The analytical start node of the analytical bar  
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.EndNode">
            <summary>
            The analytical end node of the analytical bar  
            </summary>
        </member>
        <member name="T:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase">
            <summary>
            An Analytical case object representing a RSA load Case
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.#ctor">
            <summary>
             Default  constructor
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Constructor without UniqueId set
            </summary>
            <param name="caseNature"></param>
            <param name="caseType"></param>
            <param name="id"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor with UniqueId set
            </summary>
            <param name="caseNature"></param>
            <param name="caseType"></param>
            <param name="id"></param>
            <param name="uniqueId"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.#ctor(System.String,System.String,System.String)">
            <summary>
            AnalyticalBar constructor using as id an available free id from RSA and an increment of the last unique id generated  
            </summary>
            <param name="startNode"></param>
            <param name="endNode"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.ByNatureAndType(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="caseNature"></param>
            <param name="caseType"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.ModelSelfWeight(System.Double)">
            <summary>
             Experimental  node to add the selfweight of the structure using a load case
             At least on bar element should be pass along 
            </summary>
            <param name="loadCase">The load case nature should be "Dead"</param>
            <param name="coefficient">A multiplicator factor to increase the self weight calulcated by RSA, 1 is not set </param>
            <returns></returns>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.Id">
            <summary>
            The Id of analytical  case in RSA document
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.CaseNature">
            <summary>
            The nature of the analytical case  - Simple or combination 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.CaseType">
            <summary>
            The type of the analytical case   - Dead, live, snow or wind 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase.CaseName">
            <summary>
            The name of the analytical case   
            </summary>
        </member>
        <member name="T:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad">
            <summary>
            An Analytical point load object  representing a RSA point load
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.#ctor">
            <summary>
             Default  constructor
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.#ctor(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode},DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase,System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Constructor without UniqueId set
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.#ctor(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode},DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase,System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Constructor with UniqueId set
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.ByNodes(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode},DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an Analytical point load object object using a list of nodes, a load case and 6 values describing  load intensity in each directions. 
            </summary>
            <param name="analyticalNodes">The list  of nodes where the load will  be applied</param>
            <param name="loadCase">The load case that will contains loads in RSA</param>
            <returns></returns>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.Id">
            <summary>
            The Id of the analytical point load in RSA document for specific load case (Load record id) 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.AnalyticalNodes">
            <summary>
            The list of analytical nodes where the  point load will be applied 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.LoadCase">
            <summary>
            The analytical case that contains this point load 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.FX">
            <summary>
            FX load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.FY">
            <summary>
            FY load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.FZ">
            <summary>
            FZ load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.MX">
            <summary>
            MX load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.MY">
            <summary>
            MY load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.PointLoad.MZ">
            <summary>
            MZ load intensity 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.FillSyncNodes">
            <summary>
             Get all  RSA nodes and add  them to  list  for later fast lookup (faster than querying the model) 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.FillSyncBars">
            <summary>
            Get all  RSA bars and add  them to  list for fast lookup 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.AddToSyncNodes(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Add a node to sync nodes by coordinates and id 
            </summary>
            <param name="id"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DynamoSimulation.RSA.SyncData.AddToSyncBars(System.Int32,System.Int32,System.Int32)" -->
        <member name="M:DynamoSimulation.RSA.SyncData.FindSyncBarIndexById(System.Int32)">
            <summary>
            Get a bar index on the SyncBars list by id 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.FindSyncBarIndexByStartNodeId(System.Int32)">
            <summary>
            Get a bar index on the SyncBars list by start node id 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.FindSyncBarIndexByEndNodeId(System.Int32)">
            <summary>
            Get a bar index on the SyncBars list by end node id 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.FindSyncBarIndexByStartEndNodesIds(System.Int32,System.Int32)">
            <summary>
            Get a bar index on the SyncBars list by start node id and end node id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.FindSyncBarIndexByNodesIds(System.Int32,System.Int32)">
            <summary>
            Get a bar index on the SyncBars list by start node id and end node id
            This method try  to swap start and end node id before returning the bar index 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.RemoveSyncBarsbyId(System.Int32)">
            <summary>
            Remove bar from syncbar using his Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.RemoveSyncNodesbyId(System.Int32)">
            <summary>
            Remove node from syncbar using his Id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.GetAnalyticalNodeByIdWithoutUIdFromSyncNodes(System.Int32)">
            <summary>
            Return a partial analytical node based on data available on list
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.SyncData.GetAnalyticalBarByIdWithoutUIdFromSyncBars(System.Int32)">
            <summary>
            Return a partial analytical node based on data available on list
            TODO - The unique Id as to be set here or not ?
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad">
            <summary>
            An Analytical case object representing a RSA load Case
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.#ctor">
            <summary>
             Default  constructor
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.#ctor(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase,System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Constructor without UniqueId set
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.#ctor(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase,System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Constructor with UniqueId set
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.ByBars(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar},DynamoSimulation.RSA.AnalyticalModel.Loads.LoadCase,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an Analytical uniform load object object using a list of bars, a load case and 6 values describing  load intensity in each directions. 
            </summary>
            <param name="analyticalBars">The list  of bars where the load will  be applied</param>
            <param name="loadCase">The load case that will contains loads in RSA</param>
            <returns></returns>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.Id">
            <summary>
            The Id of the analytical uniform load in RSA document for specific load case (Load record id) 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.AnalyticalBars">
            <summary>
            The list of analytical bars where the  unifrom load will be applied 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.LoadCase">
            <summary>
            The analytical case that contains this uniform load 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.FX">
            <summary>
            FX load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.FY">
            <summary>
            FY load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.FZ">
            <summary>
            FZ load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.MX">
            <summary>
            MX load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.MY">
            <summary>
            MY load intensity 
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.Loads.UniformLoad.MZ">
            <summary>
            MZ load intensity 
            </summary>
        </member>
        <member name="T:DynamoSimulation.RSA.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAAttributesUtils.IsAttributesNameAvailableForThisType(System.String,System.Int32)">
            <summary>
            Verify  that the couple name/type of the label is available in RSA project 
            TODO - for now this will be always check - not sure what's the best way to keep  that consistent (general RSA heartbeat?)
            </summary>
            <param name="name"></param>
            <param name="labelType"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAAttributesUtils.SetAttributesById(System.String,System.Int32,System.Int32)">
            <summary>
             Apply RSA labels to  a single element 
            </summary>
            <param name="name"></param>
            <param name="labelType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAAttributesUtils.SetAttributesByIds(System.String,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Apply RSA lables to a list of elements
            </summary>
            <param name="name"></param>
            <param name="labelType"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoSimulation.RSA.RSABarsUtils">
            <summary>
            Class to support RSA bars:
            -   Creation deletion, modification of RSA element 
            -   Find the next free number for element 
            -   Get a RSA object 
            -   Build a analytical object based on a RSA objet 
            TODO -  Generalize it 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.GetNextAvailableRSABarId">
            <summary>
            return a free bar number from RSA (id for bar not uniqeId) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a bar in RSA base on Id, start and end node id 
            If created add to sync data model 
            </summary>
            <param name="id"></param>
            <param name="startNode"></param>
            <param name="endNode"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.Modify(System.Int32,System.Int32,System.Int32)">
            <summary>
            Modify  an existing bar in RSA document by id and end nodes
            Get the bar from RSA model, if bar = null, bar not found otherwise 
            Check if end nodes have changed, if yes update the RSA model and sync data model 
            </summary>
            <param name="id"></param>
            <param name="startNode"></param>
            <param name="endNode"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.Delete(System.Int32)">
            <summary>
            Delete a bar in RSA base on Id
            If exist try to delete, if deleted, remove from sync data, otherwise return false     
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.GetRSABarById(System.Int32)">
            <summary>
            Get an RSA bar using his Id 
            </summary>
            <param name="id"></param>
            <returns>the bar if found in RSA document, otherwise null</returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.GetRSABarIdByNodesIdsFromRSA(System.Int32,System.Int32)">
            <summary>
            Get the id of an existing RSA bar based on the start and end nodes 
            Return RSA iD, otherwise -1 if doesn't exist 
            very slow - better to use sync data
            </summary>
            <param name="startNode"></param>
            <param name="endNode"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSABarsUtils.GetAnalyticalBarByRSAIdWithoutUIdFromRSA(System.Int32)">
            <summary>
             Get an analytical bar object based on an existing RSA bar from  RSA project 
            Unique Id is not set 
            Return  null if not succeed if something failed (bar not found or something else) 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.GetNextAvailableRSACaseId">
            <summary>
            return a free case number from RSA (id for case not uniqeId) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a  in RSA base on Id, start and end node id 
            If created add to sync data model 
            </summary>
            <param name="id"></param>
            <param name="startNode"></param>
            <param name="endNode"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.Modify(System.Int32,System.String,System.String,System.String)">
            <summary>
            Modify  an existing case in RSA document by id, nature and type
            Get the case from RSA model, if case = null, case not found otherwise 
            Check if nature ant type have changed, if yes update the RSA model and sync data model 
            </summary>
            <param name="id"></param>
            <param name="caseType"></param>
            <param name="caseNature"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.Delete(System.Int32)">
            <summary>
            Delete a case in RSA base on Id
            If exist try to delete, if deleted, remove from sync data, otherwise return false     
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.Delete(System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete a list of cases in RSA base on Ids
            If exist try to delete, if deleted, remove from sync data, otherwise return false     
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.GetRSACaseById(System.Int32)">
            <summary>
            Get an RSA case using his Id 
            </summary>
            <param name="id"></param>
            <returns>the case if found in RSA document, otherwise null</returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.GetLoadCase(System.Int32)">
            <summary>
            Return a load case based on his RSA index 
            </summary>
            <param name="loadCase"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACasesUtils.IsLoadCaseExist(System.Int32)">
            <summary>
            Verify if a load case exist in RSA
            </summary>
            <param name="loadCase"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoSimulation.RSA.RSANodesUtils">
            <summary>
            Class to support RSA nodes:
            -   Creation deletion, modification of RSA element 
            -   Find the next free number for element 
            -   Get a RSA object 
            -   Build a analytical object based on a RSA objet 
            TODO -  Generalize it 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSANodesUtils.GetNextAvailableRSANodeId">
            <summary>
            return a free node number from RSA (id for bar not uniqeId) 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSANodesUtils.Create(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Create an RSA node using Id and coordinates
            If created add to sync data model 
            </summary>
            <param name="id"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSANodesUtils.Modify(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Modify  an existing node in RSA document by id and coordinates (comparaison with epsilon)
            Get the node from RSA model, if node = null, node not found otherwise 
            Check if node coordinates have changed, if yes update the RSA model and sync data model 
            </summary>
            <param name="id"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSANodesUtils.Delete(System.Int32)">
            <summary>
            Delete a node in RSA base on Id
            If exist try to delete, if deleted, remove from sync data, otherwise return false     
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSANodesUtils.GetRSANodeById(System.Int32)">
            <summary>
            Get an RSA node using his Id 
            </summary>
            <param name="id"></param>
            <returns>the node if found in RSA document, otherwise null</returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSANodesUtils.GetAnalyticalNodeByRSAIdWithoutUIdFromRSA(System.Int32)">
            <summary>
            Get an analytical node object based on an existing RSA node from  RSA project 
            Unique Id is not set 
            Return  null if not succeed if something failed (node not found or something else) 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarDisplacements.GetMaxValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the maximal displacement value for an analytical bar for a specified load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarDisplacements.GetMinValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the minimal displacement value for an analytical bar for a specified load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarDisplacements.GetExtremeValuesAndPositionsByLists(System.String,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the maximal and minimal displacement values and associated positions, RSA bar Ids  and  load cases from a list analytical bars and a list of load cases. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="elements">A list of analytical elements containing at least one analyical bar</param>
            <param name="loadCases">A list of integer representing the load case indexes in RSA. At least one value is needed</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarDisplacements.GetExtremeValuesAndPositions(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the maximal and minimal displcament values and associated positions for analytical bars and a load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar">An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarDisplacements.GetValueAt(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32,System.Double)">
            <summary>
            Get the displacement value for an analytical bar for a specified load case at a specific position 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <param name="position">A double between 0  and 1 to specific the relative position of the result queried. If not set, the position is the middle of the bar.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarDisplacements.GetValuesAt(DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32,System.Double)">
            <summary>
            Get the displacement values for an analytical bar for a specified load case at a specific position 
            </summary>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <param name="position">A double between 0  and 1 to specific the relative position of the result queried. If not set, the position is the middle of the bar.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarForces.GetMaxValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the maximal force value for an analytical bar for a specified load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarForces.GetMinValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the minimal force value for an analytical bar for a specified load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarForces.GetExtremeValuesAndPositionsByLists(System.String,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the maximal and minimal force values and associated positions, RSA bar Ids  and  load cases from a list analytical bars and a list of load cases. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="elements">A list of analytical elements containing at least one analyical bar</param>
            <param name="loadCases">A list of integer representing the load case indexes in RSA. At least one value is needed</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarForces.GetExtremeValuesAndPositions(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the maximal and minimal force values and associated positions for analytical bars and a load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar">An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarForces.GetValueAt(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32,System.Double)">
            <summary>
            Get the displacement value for an analytical bar for a specified load case at a specific position 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <param name="position">A double between 0  and 1 to specific the relative position of the result queried. If not set, the position is the middle of the bar. </param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarForces.GetValuesAt(DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32,System.Double)">
            <summary>
            Get the force values for an analytical bar for a specified load case at a specific position 
            </summary>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <param name="position">A double between 0  and 1 to specific the relative position of the result queried. If not set, the position is the middle of the bar.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarStresses.GetMaxValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the maximal stress value for an analytical bar for a specified load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarStresses.GetMinValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the minimal stress value for an analytical bar for a specified load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarStresses.GetExtremeValuesAndPositionsByLists(System.String,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the maximal and minimal stress values and associated positions, RSA bar Ids  and  load cases from a list analytical bars and a list of load cases. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="elements">A list of analytical elements containing at least one analyical bar</param>
            <param name="loadCases">A list of integer representing the load case indexes in RSA. At least one value is needed</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarStresses.GetExtremeValuesAndPositions(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32)">
            <summary>
            Get the maximal and minimal stress values and associated positions for analytical bars and a load case. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar">An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.BarStresses.GetValueAt(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar,System.Int32,System.Double)">
            <summary>
            Get the stress value for an analytical bar for a specified load case at a specific position 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="bar"> An analytical bar object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <param name="position">A double between 0  and 1 to specific the relative position of the result queried. If not set, the position is the middle of the bar</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.NodeReactions.GetMaxValue(System.String,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32})">
            <summary>
             Get maximal reaction values for a list of RSA support nodes and a list of load cases specified. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="elements">A list of analytical elements containing at least one analyical node</param>
            <param name="loadCases">A list of integer representing the load case indexes in RSA. At least one value is needed</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.NodeReactions.GetMinValue(System.String,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32})">
            <summary>
             Get minimal reaction values for a list of RSA support nodes and a list of load cases specified. 
            </summary>
            <param name="name">A string representing the type of results to query.</param>
            <param name="elements">A list of analytical elements containing at least one analyical node</param>
            <param name="loadCases">A list of integer representing the load case indexes in RSA. At least one value is needed</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.NodeReactions.GetValue(System.String,DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,System.Int32)">
            <summary>
             Get reaction value for a RSA support nodes and a specific of load case. 
            </summary>
            <param name="node"> An analytical node object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.NodeReactions.GetValues(DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode,System.Int32)">
            <summary>
             Get reaction values for a RSA support nodes and a swpcific of load case. 
            </summary>
            <param name="node"> An analytical node object.</param>
            <param name="loadCase">An integer representing the load case index in RSA. If not set, the first one is used (deadload)</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.InitRSACore">
            <summary>
            RSA application management 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.InitRSAApplication">
            <summary>
             Initialisation of RSA. This function will use the current user RSA instance and project or create a new ones   
            </summary>
            <returns>true = all is fine, false something bad appears </returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.InitRSAServers">
            <summary>
            initialize all needed servers  
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.EnsureRSA">
            <summary>
            Funtion to  check if RSA is alive (Reference to Application and SyncData initialized) and force initialization if not  
            Public as this is used by the UI component, so hide in Dynamo list of nodes  
            TODO - heartbeat to check consitency 
            TODO - support the RSA close case and reopen it, .... 
            TODO - look at process running?  
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.RegisterEvent">
            <summary>
            Method to attach/hook  pre and post excecution event 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.DoGraphPreExecution">
            <summary>
            When Graph is evaluating 
            TODO - not call for the first run as the evaluation initiliaze all
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.DoGraphPostExecution">
            <summary>
            When Graph has been evaluated 
            Need to make some clean up in RSA 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.Calculate(System.Collections.Generic.List{System.Object})">
            <summary>
            Run the calculation using RSA.
            Note that at least one node with the label support and at least one bar with a section and an material assigned should be passed to calculation node.  
            </summary>
            <param name="elements">A list of analytical bars and analytical nodes that reflect the Dynamo model created in RSA</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSACore.CalculateAndSort(System.Collections.Generic.List{System.Object})">
            <summary>
            Experimental  node to run the calculation using RSA. The ouptut will be 3 separated lists, one for bars and a second for  nodes and the last for cases.
            Note that at least one node with the label support and at least one bar with a section and an material assigned should be passed to calculation node.  
            </summary>
            <param name="elements">A list of objects that reflect the Dynamo model created in RSA</param>
            <returns></returns>
        </member>
        <member name="T:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode">
            <summary>
            An Analytical node object representing a RSA node
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.#ctor">
            <summary>
             Default constructor 
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor without UniqueId set
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="id"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Full constructor 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="id"></param>
            <param name="uniqueId"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.#ctor(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Constructor using point and next available node in RSA and next available unique Id 
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor using coordinates and next available node in RSA and next available unique Id 
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.UpdateCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            update node coordinates using coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.UpdateCoordinates(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            update node coordinates using a point
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.CreateByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            Create an  node in RSA based on coordinates 
            Dynamo Node will have only on record for serilaized data (todo - used multipleiDs or id mechanism  
            1) check if data are serialized 
            2) if no
                a)create an intermediate analytical node object
            3) if yes
                a) read data serialized -  it is assume that the bar have been created in RSA
                b) no need to touch serialized data as they doesn't change 
                c) only start and and node could have changed 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.ByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            Create an analytical node by coordinates.  This node will be created in RSA open document and won't be visible in Dynamo UI  
            </summary>
            <param name="x">A double to define x coordinate</param>
            <param name="y">A double to define y coordinate</param>
            <param name="z">A double to define z coordinate</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.ByPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create an analytical node using a geometrical point.  This node will be created in RSA open document and an be visible in Dynamo UI  
            </summary>
            <param name="point">A point to define the analytical node location</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.SetSupportByName(System.String)">
            <summary>
            Set to an analytical node a RSA support attribute using the list available in the  RSA open document.
            If succeed, in RSA, the node is now define in RSA as a support.  
            </summary>
            <param name="name">A string that could come from the list of available supports or define by  manual input</param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.SetSupportByName(System.Collections.Generic.List{DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode},System.String)">
            <summary>
            Apply to a list of analytical nodes a RSA support attributes. The material must be available in RSA project.
            If succeed,the RSA node should have a support attribute assigned.  
            </summary>
            <param name="nodes">A list of  analytical node objects</param>
            <param name="name">A string that could come from the list of available supports (UI node)  or define by  manual input</param>
            <returns></returns>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.X">
            <summary>
            The X coordinate of the analytical  node
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.Y">
            <summary>
            The Y coordinate of the analytical  node
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.Z">
            <summary>
            The Z coordinate of the analytical  node
            </summary>
        </member>
        <member name="P:DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.Id">
            <summary>
            The Id of analytical  node in RSA document
            </summary>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetBarsResultsMaxValue(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the maximal value for a specific type of bar results for a list of case and bar elements
            </summary>
            <param name="name"></param>
            <param name="ids"></param>
            <param name="loadCases"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetBarsResultsMinValue(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Get the minimal value for a specific type of bar results for a list of case and  bar elements
            </summary>
            <param name="name"></param>
            <param name="ids"></param>
            <param name="loadCases"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetBarResultsMaxValue(System.String,System.Int32,System.Int32)">
            <summary>
            Get the maxinal value for a specific type of bar results for a  bar element and a specified load cases
            </summary>
            <param name="name"></param>
            <param name="ids"></param>
            <param name="loadCases"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetBarResultsMinValue(System.String,System.Int32,System.Int32)">
            <summary>
            Get the Extern value object for a specific type of bar results for a  bar element and a specified load case
            </summary>
            <param name="name"></param>
            <param name="ids"></param>
            <param name="loadCase"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetBarMinValuePosition(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="loadCase"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetBarExtremeParametersValueType(System.String)">
            <summary>
            TODO : parameters should be some lists here   
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.GetNodeExtremeParametersValueType(System.String)">
            <summary>
            TODO : parameters should be some lists here   
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoSimulation.RSA.RSAResults.RSAResultsUtils.AreResultsAvailable">
            <summary>
            Check the status of RSA  Results, true if the results are availabale and up to  date   
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
