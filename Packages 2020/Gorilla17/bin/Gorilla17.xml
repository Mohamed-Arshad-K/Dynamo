<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gorilla</name>
    </assembly>
    <members>
        <member name="M:Gorilla.MEPObjects.AddMEPFittings.AddElbow(System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Add Elbows to MEP run objects
            </summary>
            <param name="StartConnector"></param>
            <param name="FinishConnector"></param>
            <returns>Created Elbows</returns>
        </member>
        <member name="M:Gorilla.MEPObjects.AddMEPFittings.AddTee(System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Add Tees to MEP run objects
            </summary>
            <param name="Connector1"></param>
            <param name="Connector2"></param>
            <param name="Connector3"></param>
            <returns>Created Tees</returns>
        </member>
        <member name="M:Gorilla.MEPObjects.AddMEPFittings.AddCross(System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Adds Crosses to MEP runs
            </summary>
            <param name="Connector1"></param>
            <param name="Connector2"></param>
            <param name="Connector3"></param>
            <param name="Connector4"></param>
            <returns>Created Crosses</returns>
        </member>
        <member name="M:Gorilla.MEPObjects.CreateInsulation.CreateMEPInsulation(System.Int32,Revit.Elements.Element,Revit.Elements.Element,System.Double)">
            <summary>
            Creates Insulation for PIpe/Ducts
            </summary>
            <param name="MEPType"></param>
            <param name="MEPItem"></param>
            <param name="InsulationType"></param>
            <param name="Thickness"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.MEPObjects.CreateFlexMEP.CreateFlexMEPbyPoints(System.Int32,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Creates Flex MEPElements
            </summary>
            <param name="MEPType"></param>
            <param name="SystemType"></param>
            <param name="Type"></param>
            <param name="Level"></param>
            <param name="StartPoints"></param>
            <param name="FinishPoints"></param>
            <param name="Points"></param>
            <returns>Created Elements</returns>
        </member>
        <member name="M:Gorilla.MEPObjects.CreateMEP.CreateMEPbyPoints(System.Int32,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Creates MEP runs by Points
            </summary>
            <param name="MEPType"></param>
            <param name="SystemType"></param>
            <param name="Type"></param>
            <param name="Level"></param>
            <param name="StartPoints"></param>
            <param name="FinishPoints"></param>
            <returns>Created Elements</returns>
        </member>
        <member name="M:Gorilla.MEPObjects.CreateWire.CreateWirebyPoints(System.Int32,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.Revit.DB.Connector},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Creates Wires by points
            </summary>
            <param name="MEPType"></param>
            <param name="ViewType"></param>
            <param name="Type"></param>
            <param name="WireType"></param>
            <param name="StartConnector"></param>
            <param name="FinishConnector"></param>
            <param name="Points"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Placeholders.ConvertPlaceholder.ConvertPipePlaceholders(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Converts Placeholders to Pipes
            </summary>
            <param name="pipePlaceholders"></param>
            <returns name="Elements">Created Elements</returns>
            <search>Pipes, Placeholder</search>
        </member>
        <member name="M:Gorilla.Placeholders.ConvertPlaceholder.ConvertDuctPlaceholders(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Converts Placeholders to Ducts
            </summary>
            <param name="ductPlaceholders"></param>
            <returns>Created Ducts</returns>
        </member>
        <member name="M:Gorilla.Placeholders.CreatePlaceholder.PipePlaceholderbyPoints(System.Int32,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point},System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Creates Duct or Pipe Placeholder runs
            </summary>
            <param name="MEPType"></param>
            <param name="SystemTypeId"></param>
            <param name="PipeTypeId"></param>
            <param name="LevelId"></param>
            <param name="StartPoint"></param>
            <param name="FinishPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Placeholders.CreatePlaceholder.AddPlaceholderElbow(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Adds Elbow Placholders
            </summary>
            <param name="Placeholder1"></param>
            <param name="Placeholder2"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Placeholders.CreatePlaceholder.AddPlaceholderTee(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Adds Tee Placholders
            </summary>
            <param name="Placeholder1"></param>
            <param name="Placeholder2"></param>
            <param name="Placeholder3"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Placeholders.CreatePlaceholder.AddPlaceholderCross(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Adds Cross Placholders
            </summary>
            <param name="Placeholder1"></param>
            <param name="Placeholder2"></param>
            <param name="Placeholder3"></param>
            <returns></returns>
        </member>
        <member name="T:Gorilla.Routing.SearchNode">
            <summary>
            Author: Roy Triesscheijn (http://www.roy-t.nl)
            Class defining BreadCrumbs used in path finding to mark our routes
            </summary>
        </member>
        <member name="T:Gorilla.Routing.MinHeap">
            <summary>
            MinHeap from ZeraldotNet (http://zeraldotnet.codeplex.com/)
            Modified by Roy Triesscheijn (http://roy-t.nl)    
            -Moved method variables to class variables
            -Added English Exceptions and comments (instead of Chinese)    
            </summary>   
        </member>
        <member name="T:Gorilla.Routing.PathFinder">
            <summary>
            Author: Roy Triesscheijn (http://www.roy-t.nl)
            Class providing 3D pathfinding capabilities using A*.
            Heaviliy optimized for speed therefore uses slightly more memory
            On rare cases finds the 'almost optimal' path instead of the perfect path
            this is because we immediately return when we find the exit instead of finishing
            'neighbour' loop.
            </summary>
        </member>
        <member name="M:Gorilla.Routing.PathFinder.FindPath(Gorilla.Routing.World,Gorilla.Routing.Point3D,Gorilla.Routing.Point3D)">
            <summary>
            Method that switfly finds the best path from start to end.
            </summary>
            <returns>The starting breadcrumb traversable via .next to the end or null if there is no path</returns>        
        </member>
        <member name="M:Gorilla.Routing.PathFinder.FindPathReversed(Gorilla.Routing.World,Gorilla.Routing.Point3D,Gorilla.Routing.Point3D)">
            <summary>
            Method that switfly finds the best path from start to end. Doesn't reverse outcome
            </summary>
            <returns>The end breadcrump where each .next is a step back)</returns>
        </member>
        <member name="T:Gorilla.Routing.Point3D">
            <summary>    
            Author: Roy Triesscheijn (http://www.roy-t.nl)
            Point3D class mimics some of the Microsoft.Xna.Framework.Vector3
            but uses Int32's instead of floats.
            </summary>
        </member>
        <member name="M:Gorilla.Routing.World.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a 2D world
            </summary>        
        </member>
        <member name="M:Gorilla.Routing.World.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a 3D world
            </summary>        
        </member>
        <member name="M:Gorilla.Routing.World.MarkPosition(Gorilla.Routing.Point3D,System.Boolean)">
            <summary>
            Mark positions in the world als blocked (true) or unblocked (false)
            </summary>
            <param name="value">use true if you wan't to block the value</param>
        </member>
        <member name="M:Gorilla.Routing.World.PositionIsFree(Gorilla.Routing.Point3D)">
            <summary>
            Checks if a position is free or marked (and legal)
            </summary>        
            <returns>true if the position is free</returns>
        </member>
        <member name="M:Gorilla.MEPSystems.MEPSystems.CreateSystem(System.Int32,Revit.Elements.Element,System.String)">
            <summary>
            Creates a New MEP System
            </summary>
            <param name="SystemType"></param>
            <param name="MEPType"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.MEPSystems.MEPSystems.AddToSystem(Autodesk.Revit.DB.MEPSystem,Autodesk.Revit.DB.ConnectorSet)">
            <summary>
            Add items to existing MEPSystem
            </summary>
            <param name="MEPsystem"></param>
            <param name="connectors"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.MEPSystems.MEPSystems.DivideSystem(Autodesk.Revit.DB.MEPSystem)">
            <summary>
            Divide MEP System
            </summary>
            <param name="MEPSystem"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.MEPSystems.MEPSystems.RemoveSystem(Autodesk.Revit.DB.MEPSystem,Autodesk.Revit.DB.ConnectorSet)">
            <summary>
            Remove from System
            </summary>
            <param name="MEPSystem"></param>
            <param name="connectors"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Connectors.MEPConnectors.GetConnectorSet(Revit.Elements.Element)">
            <summary>
            Gets the ConnectorSets from Revit Elements
            </summary>
            <param name="elements">Revit Elements</param>
            <returns>ConnectorSet</returns>
        </member>
        <member name="M:Gorilla.Connectors.MEPConnectors.GetConnectors(Revit.Elements.Element)">
            <summary>
            Gets a list of Connectors from Revit Elements
            </summary>
            <param name="elements">Elements</param>
            <returns>List Connectors</returns>
        </member>
        <member name="M:Gorilla.Connectors.MEPConnectors.getConnectorPoints(Autodesk.Revit.DB.Connector)">
            <summary>
            Gets a list of points from the Revit Connectors
            </summary>
            <param name="connectors">Revit Connectors</param>
            <returns>List Points</returns>
        </member>
        <member name="M:Gorilla.Connectors.MEPConnectors.CreateConnectorSet(System.Collections.Generic.List{Autodesk.Revit.DB.Connector})">
            <summary>
            Creates a ConnectorSet from a list of connectors
            </summary>
            <param name="connectors">List Revit Connectors</param>
            <returns>ConnectorSet</returns>
        </member>
        <member name="M:Gorilla.Dynaworks.BoundingBox.ConvertSharedBoundingBox(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Converts any boundingboxes from DynaWorks to Revit
            </summary>
            <param name="BoundingBox"></param>
            <returns>Bounding Box</returns>
        </member>
        <member name="M:Gorilla.Dynaworks.Points.ConvertSharedPoints(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            DynaWorks points to Revit Convertor
            </summary>
            <param name="Point"></param>
            <returns>Points</returns>
        </member>
    </members>
</doc>
