{
  "Uuid": "a34f0399-fb96-4e58-91b1-2cf373393ec0",
  "IsCustomNode": true,
  "Category": "Synthesize.Packages.Springs.Revit.Collectors",
  "Description": "Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets. Does not work with elements from linked files.",
  "Name": "SP.Collector.ElementSketch.Original",
  "ElementResolver": {
    "ResolutionMap": {
      "Material": {
        "Key": "Revit.Elements.Material",
        "Value": "RevitNodes.dll"
      },
      "Transaction": {
        "Key": "Revit.Transaction.Transaction",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARelement",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "165c5afd8d3b4475adcea02845f3edbf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6d1c313876b149018846e21c30599bf6",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARfetchModelCurves",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "false",
        "Description": ""
      },
      "Id": "52c75ec02e554aa68208ad72ae18a023",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6e9406d182784e199527257fb84c990a",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARcurves",
      "Id": "e7f0e3b37cb84cfab74ad9f2ae9ec80d",
      "Inputs": [
        {
          "Id": "7c24916e9243466eba25a71c346a6019",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res[0];\nres[1];",
      "Id": "094e1ff9993b4f1bacbd9877a0ecb76d",
      "Inputs": [
        {
          "Id": "9e55744bb70d4eddbea4e9470ea9ff28",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5a49ef160fcd4d728f74fd32e3175510",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3c9387055ece4f749fd61565986eb321",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARmodelcurves",
      "Id": "cd6f4ec226144c1fa126dc0bfcc5d503",
      "Inputs": [
        {
          "Id": "d56d132419b144d99dec02cf2737df67",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARrefresh",
        "TypeName": "bool",
        "TypeRank": 0,
        "DefaultValue": "true",
        "Description": ""
      },
      "Id": "ea667445ec604b75a1daec882da4db60",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7804e4e5920a49ec945b9cb51bcf421e",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2016, Dimitar Venkov\r\n# @5devene, dimitar.ven@gmail.com\r\n\r\nimport clr\r\nimport math\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\ndef tolist(obj1):\r\n\tif hasattr(obj1,\"__iter__\"): return obj1\r\n\telse: return [obj1]\r\n\r\nelements = UnwrapElement(tolist(IN[0]))\r\ngetModel = IN[1]\r\n\r\naccepted_mc = \"Autodesk.Revit.DB.ModelLine, Autodesk.Revit.DB.ModelArc, Autodesk.Revit.DB.ModelEllipse, Autodesk.Revit.DB.ModelHermiteSpline, Autodesk.Revit.DB.ModelNurbSpline\"\r\n\r\ndef almost_eq(line, mc):\r\n\tline2 = mc.Location.Curve\r\n\txyz1 = line.Evaluate(0.5, True)\r\n\tif not line2.IsBound:\r\n\t\txyz2 = line2.Center\r\n\t\ttry: xyz1 = line.Center\r\n\t\texcept: pass\r\n\telse:\r\n\t\txyz2 = line2.Evaluate(0.5, True)\r\n\tif xyz1.DistanceTo(xyz2) <= 0.0001:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\n\r\ndef clean1(l1):\r\n\tfor i in xrange(len(l1) ):\r\n\t\tl1[i] = [x for x in l1[i] if x != None]\r\n\treturn l1\r\n\r\ndef getSketch(el1):\r\n\ttry:\r\n\t\ttry:\r\n\t\t\tsk1 = doc.GetElement(ElementId(el1.Id.IntegerValue - 1) )\r\n\t\texcept:\r\n\t\t\tsk1 = None\r\n\t\tif not getModel and sk1 is not None and sk1.GetType().ToString() == 'Autodesk.Revit.DB.Sketch':\r\n\t\t\tprofile = sk1.Profile\r\n\t\telse:\r\n\t\t\tt1 = SubTransaction(doc)\r\n\t\t\tt1.Start()\r\n\t\t\ttry:\r\n\t\t\t\tdeleted = doc.Delete(el1.Id)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tt1.RollBack()\r\n\t\t\t\r\n\t\t\tprofile, mc = CurveArrArray(), []\r\n\t\t\tfor d in deleted:\r\n\t\t\t\ttest_el = doc.GetElement(d)\r\n\t\t\t\tel_type = test_el.GetType().ToString()\r\n\t\t\t\tif el_type == \"Autodesk.Revit.DB.Sketch\":\r\n\t\t\t\t\tprofile = test_el.Profile\r\n\t\t\t\t\tif not getModel:\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\telif getModel and el_type in accepted_mc :\r\n\t\t\t\t\tmc.append(test_el)\r\n\t\r\n\t\tordered_mc = [ [None] * i.Size for i in profile] if getModel else []\r\n\t\tcurves = [ [None] * i.Size for i in profile]\r\n\t\tfor i in xrange(profile.Size):\r\n\t\t\tfor j in xrange(profile[i].Size):\r\n\t\t\t\tcurves[i][j] = profile[i][j].ToProtoType()\r\n\t\t\t\tif getModel:\r\n\t\t\t\t\tfor k in xrange(len(mc)):\r\n\t\t\t\t\t\tif almost_eq(profile[i][j], mc[k]):\r\n\t\t\t\t\t\t\tordered_mc[i][j] = mc[k].ToDSType(True)\r\n\t\t\t\t\t\t\tdel mc[k]\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\t\r\n\t\treturn curves, clean1(ordered_mc)\r\n\texcept:\r\n\t\treturn [],[]\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\nresult = map(getSketch, elements)\r\nTransactionManager.Instance.TransactionTaskDone()\r\nOUT = [r[0] for r in result], [r[1] for r in result]",
      "VariableInputPorts": true,
      "Id": "0f55b589807e4a21b3ccf7047a76216d",
      "Inputs": [
        {
          "Id": "1f0df8023da14c35abbba52edd06f12e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c1439f9a3e5941ebb9bfe52b9b60a48f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3010171665a44617a1075f4fdcc4594b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f6f297530496415789ab3fef60d63180",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "6d1c313876b149018846e21c30599bf6",
      "End": "1f0df8023da14c35abbba52edd06f12e",
      "Id": "ca749344138f4db6958fdd161912789c"
    },
    {
      "Start": "6e9406d182784e199527257fb84c990a",
      "End": "c1439f9a3e5941ebb9bfe52b9b60a48f",
      "Id": "641972b4a30e4d62bd0d01d4cb13e5a4"
    },
    {
      "Start": "5a49ef160fcd4d728f74fd32e3175510",
      "End": "7c24916e9243466eba25a71c346a6019",
      "Id": "02c09a8e938a4aa4b089cd2821f5d97b"
    },
    {
      "Start": "3c9387055ece4f749fd61565986eb321",
      "End": "d56d132419b144d99dec02cf2737df67",
      "Id": "9f7e9450df6842b88138119824c91072"
    },
    {
      "Start": "7804e4e5920a49ec945b9cb51bcf421e",
      "End": "3010171665a44617a1075f4fdcc4594b",
      "Id": "2f8c28bc2c184a43b32e35ab165e782a"
    },
    {
      "Start": "f6f297530496415789ab3fef60d63180",
      "End": "9e55744bb70d4eddbea4e9470ea9ff28",
      "Id": "4eeb304c44c24e73a44650f62c93d2a1"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "Id": "165c5afd8d3b4475adcea02845f3edbf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 0.0,
        "Y": 0.0
      },
      {
        "Id": "52c75ec02e554aa68208ad72ae18a023",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -157.6,
        "Y": 59.6
      },
      {
        "Id": "e7f0e3b37cb84cfab74ad9f2ae9ec80d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 608.382558731983,
        "Y": -0.901200480411401
      },
      {
        "Id": "094e1ff9993b4f1bacbd9877a0ecb76d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 431.382558731983,
        "Y": 2.49879951958857
      },
      {
        "Id": "cd6f4ec226144c1fa126dc0bfcc5d503",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Output",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 607.782558731983,
        "Y": 56.2987995195886
      },
      {
        "Id": "ea667445ec604b75a1daec882da4db60",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Input",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -75.2445233808256,
        "Y": 118.427785318653
      },
      {
        "Id": "0f55b589807e4a21b3ccf7047a76216d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Python Script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 236.349295564033,
        "Y": 34.8947666869437
      }
    ],
    "Annotations": [],
    "X": 233.520381697306,
    "Y": 187.212634411779,
    "Zoom": 1.19179377129296
  }
}