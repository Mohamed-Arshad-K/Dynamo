{
  "Uuid": "399b2012-a4b5-41bb-ad83-d6eaf2b04329",
  "IsCustomNode": true,
  "Category": "Synthesize.Packages.Springs.Revit.FamilyInstance",
  "Description": "8 Points Adaptive Family By Geometry",
  "Name": "8 Points Adaptive Family By Geometry",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright(c) 2016, Dimitar Venkov\r\n# @5devene, dimitar.ven@gmail.com\r\n\r\nimport clr\r\nfrom itertools import repeat\r\n\r\nclr.AddReference('System')\r\nimport System\r\nfrom System.Collections.Generic import List\r\n\r\npf_path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\r\nimport sys\r\nsys.path.append('%s\\IronPython 2.7\\Lib' %pf_path)\r\nimport traceback\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\napp = DocumentManager.Instance.CurrentUIApplication.Application\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\ndef tolist(obj1):\r\n\tif hasattr(obj1,'__iter__'): return obj1\r\n\telse: return [obj1]\r\n\r\ndef PadLists(lists):\r\n\tlen1 = len(lists[0])\r\n\tfor i in xrange(1,len(lists)):\r\n\t\tlen2 = len(lists[i])\r\n\t\tif len2 == len1 : continue\r\n\t\telif len2 > len1: lists[i] = lists[i][:len1]\r\n\t\telse : lists[i].extend(repeat(lists[i][-1],len1 - len2))\r\n\treturn lists\r\n\r\nclass FamOpt1(IFamilyLoadOptions):\r\n\tdef __init__(self): pass\r\n\tdef OnFamilyFound(self,familyInUse, overwriteParameterValues):\r\n\t\treturn True\r\n\tdef OnSharedFamilyFound(self,familyInUse, source, overwriteParameterValues):\r\n\t\treturn True\r\n\r\ndef vert1(obj1) : return [v.PointGeometry for v in obj1.Vertices]\r\n\r\ndef tup1(p) : return round(p.X,3), round(p.Y,3), round(p.Z,3)\r\n\r\ndef domain1(c1, c2, d1):\r\n\tx = 1.0 - abs(c1 - c2) / d1\r\n\treturn 1 if x > 1 else 0 if x < 0 else x\r\n\r\nclass PtsErrorMuncher(IFailuresPreprocessor):\r\n\tdef PreprocessFailures(self, fa):\r\n\t\tfailList = List[FailureMessageAccessor](fa.GetFailureMessages() )\r\n\t\tfor failure in failList:\r\n\t\t\tfailID = failure.GetFailureDefinitionId()\r\n\t\t\tif failID == BuiltInFailures.InaccurateFailures.InaccurateLine\\\r\n\t\t\tor failID == BuiltInFailures.OverlapFailures.DuplicatePoints :\r\n\t\t\t\tfa.DeleteWarning(failure)\r\n\t\treturn FailureProcessingResult.Continue\r\n\r\ngeom = tolist(IN[0])\r\nfam_path = IN[1]\r\nnames = tolist(IN[2])\r\ncategory = tolist(IN[3])\r\nmaterial = tolist(IN[4])\r\nsubcat = tolist(IN[5])\r\n\r\ntemp_path = System.IO.Path.GetTempPath()\r\npmt = PointOnCurveMeasurementType.NormalizedCurveParameter\r\npmf = PointOnCurveMeasureFrom.Beginning\r\n\r\nTransactionManager.ForceCloseTransaction(TransactionManager.Instance)\r\n\r\ndef NewAC_background(s1, name1, cat1, mat1, subcat1):\r\n\ttry:\r\n\t\tenable_mat = True\r\n\t\tif mat1 == None: enable_mat = False\r\n\t\tenable_subcat = True\r\n\t\tif subcat1 == None: enable_subcat = False\r\n\r\n\t\tbb1 = s1.BoundingBox\r\n\t\tcub1 = bb1.ToCuboid()\r\n\t\tsizes1 = cub1.Width, cub1.Length, cub1.Height\r\n\t\torig1 = tup1(bb1.MinPoint)\r\n\r\n\t\tcub_corners = vert1(cub1)\r\n\t\tcub_corners = [cub_corners[n:n+2] for n in xrange(0,8,2)]\r\n\t\tcub_corners[1].reverse()\r\n\t\tcub_corners[2].reverse()\r\n\r\n\t\ts1_corners = map(tup1, vert1(s1) )\r\n\t\tdist1 = [map(domain1, orig1, s1_corners[i], sizes1)\\\r\n\t\tfor i in xrange(len(s1_corners) )]\r\n\t\tpar2, par1, par3 = zip(*dist1)\r\n\r\n\t\tface_corners = [map(tup1,f) for f in map(vert1,s1.Faces)]\r\n\t\t#End of Dynamo geometry pre-processing\r\n\r\n\t\ta_pts = [ [p.ToXyz(True) for p in pts] for pts in cub_corners]\r\n\t\tfamdoc = doc.Application.NewFamilyDocument(fam_path)\r\n\t\tfactory = famdoc.FamilyCreate\r\n\t\tdef ref_line(pts, factory = factory):\r\n\t\t\tpt_arr = ReferencePointArray()\r\n\t\t\tpt_arr.Append(pts[0])\r\n\t\t\tpt_arr.Append(pts[1])\r\n\t\t\tl1 = factory.NewCurveByPoints(pt_arr)\r\n\t\t\tl1.IsReferenceLine = True\r\n\t\t\tl1.ReferenceType = ReferenceType.None\r\n\t\t\treturn l1\r\n\r\n\t\tdef ref_pt(l1, par1, pmt = pmt, pmf = pmf, factory = factory, app = app.Create):\r\n\t\t\tloc1 = PointLocationOnCurve(pmt, par1, pmf)\r\n\t\t\tref1 = l1.GeometryCurve.Reference\r\n\t\t\tpt_ref = app.NewPointOnEdge(ref1, loc1)\r\n\t\t\treturn factory.NewReferencePoint(pt_ref)\r\n\r\n\t\tdef adp_pt(p1, factory = factory):\r\n\t\t\tpt1 = factory.NewReferencePoint(p1)\r\n\t\t\tpar1 = pt1.get_Parameter(BuiltInParameter.POINT_ADAPTIVE_TYPE_PARAM)\r\n\t\t\tpar1.Set(1)\r\n\t\t\treturn pt1\r\n\r\n\t\txr1 = xrange(4)\r\n\t\tlen1 = len(par1)\r\n\t\txr2 = xrange(len1)\r\n\t\twith Transaction(famdoc,' ') as t:\r\n\t\t\tt.Start()\r\n\t\t\t# Catch annoyng points same location warning\r\n\t\t\tfailOptions = t.GetFailureHandlingOptions()\r\n\t\t\tfailOptions.SetFailuresPreprocessor(PtsErrorMuncher())\r\n\t\t\tt.SetFailureHandlingOptions(failOptions)\r\n\r\n\t\t\ta_pts1 = [map(adp_pt, pts) for pts in a_pts]\r\n\t\t\tfamdoc.Regenerate()\r\n\t\t\tlines1 = [ref_line(a_pts1[i]) for i in xr1]\r\n\t\t\tpts1 = [ [ref_pt(lines1[i],par1[j]) for j in xr2] for i in xr1]\r\n\t\t\tpts1z = zip(*pts1[:2]) + zip(*pts1[2:])\r\n\t\t\tfamdoc.Regenerate()\r\n\t\t\tlines2 = [ref_line(pts1z[i]) for i in xrange(len(pts1z) )]\r\n\t\t\tlines2z = zip(lines2[:len1],lines2[len1:])\r\n\t\t\tpts2 = [ [ref_pt(lines2z[i][j],par2[i]) for j in xrange(2)] for i in xr2]\r\n\t\t\tfamdoc.Regenerate()\r\n\t\t\tlines3 = map(ref_line, pts2)\r\n\t\t\tpts3 = [ref_pt(lines3[i],par3[i]) for i in xr2]\r\n\t\t\tfamdoc.Regenerate()\r\n\t\t\t#End of reference skeleton construction\r\n\r\n\t\t\tface_refs = []\r\n\t\t\tref_dict = dict(zip(s1_corners,pts3))\r\n\t\t\tdef search1(searchVals):\r\n\t\t\t\trefs1 = []\r\n\t\t\t\tfor i in xrange(len(searchVals) ):\r\n\t\t\t\t\tif searchVals[i] in ref_dict:\r\n\t\t\t\t\t\trefs1.append(ref_dict[searchVals[i]])\r\n\t\t\t\t\telse : pass\r\n\t\t\t\tface_refs.append(refs1)\r\n\t\t\tmap(search1, face_corners)\r\n\t\t\t#End of face reference mapping\r\n\r\n\t\t\tfaces = []\r\n\t\t\tfor ref in face_refs:\r\n\t\t\t\trefArr = ReferenceArray()\r\n\t\t\t\tfor i in xrange(-1,len(ref) - 1) :\r\n\t\t\t\t\tii = i+1\r\n\t\t\t\t\tc1 = ref_line( (ref[i],ref[ii]) )\r\n\t\t\t\t\tr1 = Reference(c1)\r\n\t\t\t\t\trefArr.Insert(r1,ii)\r\n\t\t\t\tf1 = factory.NewFormByCap(True, refArr)\r\n\t\t\t\tfaces.append(f1)\r\n\t\t\t#End of face generation section\r\n\r\n\t\t\tfamdoc.Regenerate()\r\n\t\t\ttry: #set the family category\r\n\t\t\t\tfam_cat = famdoc.Settings.Categories.get_Item(cat1.Name)\r\n\t\t\t\tfamdoc.OwnerFamily.FamilyCategory = fam_cat\r\n\t\t\texcept: pass\r\n\t\t\tif enable_mat: #assign a material to the family\r\n\t\t\t\tfam_mat = None\r\n\t\t\t\tmat_fec = FilteredElementCollector(famdoc).OfClass(Material)\r\n\t\t\t\tfor m in mat_fec:\r\n\t\t\t\t\tif m.Name == mat1:\r\n\t\t\t\t\t\tfam_mat = m.Id\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\tif fam_mat != None:\r\n\t\t\t\t\tfor f in faces:\r\n\t\t\t\t\t\tmat_par = f.get_Parameter(BuiltInParameter.MATERIAL_ID_PARAM)\r\n\t\t\t\t\t\tmat_par.Set(fam_mat)\r\n\t\t\tif enable_subcat: #create and assign the sub-category:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tcur_fam_cat = famdoc.OwnerFamily.FamilyCategory\r\n\t\t\t\t\tnew_subcat = famdoc.Settings.Categories.NewSubcategory(cur_fam_cat, subcat1)\r\n\t\t\t\t\tfor f in faces: f.Subcategory = new_subcat\r\n\t\t\t\texcept: pass\r\n\t\t\tt.Commit()\r\n\t\tsave_path = '%s%s.rfa' % (temp_path, name1)\r\n\t\tSaveAsOpt = SaveAsOptions() #should probably dispose of these\r\n\t\tSaveAsOpt.OverwriteExistingFile = True\r\n\t\tfamdoc.SaveAs(save_path, SaveAsOpt)\r\n\t\tfamily1 =  famdoc.LoadFamily(doc, FamOpt1())\r\n\t\tfamdoc.Close(False)\r\n\t\tSystem.IO.File.Delete(save_path)\r\n\t\tsymbols = family1.GetFamilySymbolIds().GetEnumerator()\r\n\t\tsymbols.MoveNext()\r\n\t\tsymbol1 = doc.GetElement(symbols.Current)\r\n\t\t#might need to activate the symbol\r\n\t\treturn symbol1.ToDSType(False), family1.ToDSType(False)\r\n\r\n\texcept: return traceback.format_exc(), ''\r\n\r\nif len(geom) == len(names) == len(category) == len(material) == len(subcat):\r\n\treturn1 = map(NewAC_background, geom, names, category, material, subcat)\r\nelif len(geom) == len(names):\r\n\tpadded = PadLists([geom, category, material,subcat])\r\n\tp_category, p_material, p_subcat = padded[1], padded[2], padded[3]\r\n\treturn1 = map(NewAC_background, geom, names, p_category, p_material, p_subcat)\r\nelse : return1 = [('Make sure that each geometry\\\\nobject has a unique family name.', '')]\r\n\r\nOUT = [i[0] for i in return1], [i[1] for i in return1]",
      "VariableInputPorts": true,
      "Id": "8638ae52f8954389a13215f0aeeae1c9",
      "Inputs": [
        {
          "Id": "1462ffd9e20a40089639637f2e7579ce",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "780f72873dc14517b75bf1b688ecf51b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e2a0cd2bc394acfb4d8dff1384d0738",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "508b44d6a93e46b687a8504219b75b53",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "742566c78b954fe7875d72c6f01d0385",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3abfbce847854c61851f3f11f49922ea",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f525263934324b6ab604a2852125e5ae",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARtype",
      "Id": "bd5e3dcd36b04fbb81e1f52da5fe7b08",
      "Inputs": [
        {
          "Id": "9ef50193794b4167b66e86185b379cd9",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARgeometry",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "97fb30ca4e69474f84d37a1166b96dfe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8eae66e334694577b09deaa28643c50c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARfamilytemplatepath",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "5317a287696f4c699cd167fb9ecfe423",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0db950d2f5c043fcb35f2bf1325632bb",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARfamilyname",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "62be66fd6d894e75be9fbbff81b5a370",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "69cae46e7b294416a5732e680739f33b",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARcategory",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "573203b4ee9e464689da4359788150fc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "072787bff02c448eb5a5554630f13371",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARmaterialname",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "69885e88e0e64bdeac9b3dfe9ecd6536",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "146bf301d3444450a5374e016c999a7c",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "VARsubcategoryname",
        "TypeName": "var",
        "TypeRank": 1,
        "DefaultValue": "null",
        "Description": ""
      },
      "Id": "9ef2c5fe555341658e758bc92432aa81",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "356f799061014b969c31f31e4049ecdd",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res[0];\nres[1];",
      "Id": "63ef44671f0e455d96c30f9156e4cb74",
      "Inputs": [
        {
          "Id": "3a3a06b0619c48d79cb0c3c3c3a304f4",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "42f614e4018f4d2a8be46e0c3921b831",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f2832c89163e4128bde935cfe3d35b2f",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "VARfamily",
      "Id": "5b56a575de4047acb523354abf08ed4e",
      "Inputs": [
        {
          "Id": "436452866ae9417e94d5adf0e00b2e0a",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    }
  ],
  "Connectors": [
    {
      "Start": "f525263934324b6ab604a2852125e5ae",
      "End": "3a3a06b0619c48d79cb0c3c3c3a304f4",
      "Id": "c54cbfc39b1b4df4b3dea58415fa5d62"
    },
    {
      "Start": "8eae66e334694577b09deaa28643c50c",
      "End": "1462ffd9e20a40089639637f2e7579ce",
      "Id": "9aadb32f1c7149e8b83fbd4ad09a3b69"
    },
    {
      "Start": "0db950d2f5c043fcb35f2bf1325632bb",
      "End": "780f72873dc14517b75bf1b688ecf51b",
      "Id": "ff935ca1b54f4898aa8369f0bf33d9b4"
    },
    {
      "Start": "69cae46e7b294416a5732e680739f33b",
      "End": "7e2a0cd2bc394acfb4d8dff1384d0738",
      "Id": "0a5f183850ed410ab7de77d6be7705e3"
    },
    {
      "Start": "072787bff02c448eb5a5554630f13371",
      "End": "508b44d6a93e46b687a8504219b75b53",
      "Id": "4a3c79f8ab894acca24c2cfabcb6504f"
    },
    {
      "Start": "146bf301d3444450a5374e016c999a7c",
      "End": "742566c78b954fe7875d72c6f01d0385",
      "Id": "922af0ca99754987a55e29cbfedde3b2"
    },
    {
      "Start": "356f799061014b969c31f31e4049ecdd",
      "End": "3abfbce847854c61851f3f11f49922ea",
      "Id": "5a62456756a24fad9025d89727324c5b"
    },
    {
      "Start": "42f614e4018f4d2a8be46e0c3921b831",
      "End": "9ef50193794b4167b66e86185b379cd9",
      "Id": "cf36ab89224e49f095938ca11bae67e9"
    },
    {
      "Start": "f2832c89163e4128bde935cfe3d35b2f",
      "End": "436452866ae9417e94d5adf0e00b2e0a",
      "Id": "9f94f722cd3f48cfac4226b10ffb6e12"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "8638ae52f8954389a13215f0aeeae1c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 316.4,
        "Y": -11.2
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "bd5e3dcd36b04fbb81e1f52da5fe7b08",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 667.4,
        "Y": -38.4
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "97fb30ca4e69474f84d37a1166b96dfe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 49.9999999999999,
        "Y": -90.4
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "5317a287696f4c699cd167fb9ecfe423",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 38.8,
        "Y": -25.6
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "62be66fd6d894e75be9fbbff81b5a370",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 39.5999999999999,
        "Y": 47.2
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "573203b4ee9e464689da4359788150fc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 46.7999999999998,
        "Y": 123.2
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "69885e88e0e64bdeac9b3dfe9ecd6536",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 50.0,
        "Y": 186.4
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "9ef2c5fe555341658e758bc92432aa81",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 51.6000000000001,
        "Y": 262.4
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "63ef44671f0e455d96c30f9156e4cb74",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 464.6,
        "Y": 18.8
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "5b56a575de4047acb523354abf08ed4e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 690.2,
        "Y": 34.0
      }
    ],
    "Annotations": [],
    "X": 67.2000000000002,
    "Y": 190.4,
    "Zoom": 1.0
  }
}