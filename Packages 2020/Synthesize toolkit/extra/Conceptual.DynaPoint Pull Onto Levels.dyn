{
  "Uuid": "3c9d0464-8643-5ffe-96e5-ab1769818209",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Conceptual.DynaPoint Pull Onto Levels",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "9e17f8ecff5045ce8363a8efe9cbcaa0",
      "Name": "01.Select Reference Points",
      "Type": "hostSelection",
      "Value": "",
      "Description": "Select multiple elements from the Revit document.",
      "SelectedIndex": 0
    },
    {
      "Id": "9e7cb4e1a5a4459bbec705166c283fdd",
      "Name": "02.Pin After Pull ?",
      "Type": "boolean",
      "Value": "false",
      "Description": "Selection between a true and false.",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Created by Karam Baki: karam@aecedx.com\n# Delivered to IBECE GROUP https://ibecegroup.com/\n\nimport clr\nclr.AddReference('ProtoGeometry')\nfrom Autodesk.DesignScript import Geometry as dg\n\n# EXTENSION Enable ToDSType\nclr.AddReference('RevitNodes')\nimport Revit\n\n# Enable Revit API\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\n\n# EXTENSION Enable Geometry Conversion Methods\nclr.ImportExtensions(Revit.GeometryConversion)\n\n# Enable DocumentManager and TransactionManager\nclr.AddReference('RevitServices')\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\nclr.AddReference(\"RevitAPIUI\")\nfrom Autodesk.Revit.UI import TaskDialog\n\n\nclass KaramSwallowSimple(IFailuresPreprocessor):\n\tdef PreprocessFailures(self, failuresAccessor):\n\t\tfailuresAccessor.DeleteAllWarnings()\n\t\treturn FailureProcessingResult.Continue\n\n\ndef isplanarsurf(s):\n\tnorms = [0,0.333,0.666,1]\n\tpts = []\n\tfor n in norms:\n\t\tfor n2 in norms:\n\t\t\tpts.append(dg.Surface.PointAtParameter(s,n,n2))\n\tplane = dg.Plane.ByBestFitThroughPoints(pts)\n\tstatus = True\n\tfor p in pts:\n\t\ttry:\n\t\t\tinter = dg.Geometry.DoesIntersect(p,plane)\n\t\t\tif inter == False:\n\t\t\t\tstatus = False\n\t\t\t\tbreak\n\t\texcept:\n\t\t\tpass\n\treturn status\n\ndef lvl_to_plane(doc,pt1,level,factor):\n\tlevel = doc.GetElement(level)\n\tplane = dg.Plane.ByOriginNormal(dg.Point.ByCoordinates(pt1.X,pt1.Y,level.ProjectElevation/factor),dg.Vector.ZAxis())\n\treturn plane,level.GetPlaneReference()\n\ndef oldVersionDetect(doc,pt1,factor):\n\tlevels = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Levels).WhereElementIsNotElementType().ToElementIds()\n\tplanes = []\n\tfor level in levels:\n\t\tplanes.append(lvl_to_plane(doc,pt1,level,factor)[0])\n\tdises = []\n\tfor plane in planes:\n\t\tdises.append(dg.Geometry.DistanceTo(plane,pt1))\n\tmindis = min(dises)\n\tcount = 0\n\tfor dis in dises:\n\t\tif mindis == dis:\n\t\t\treturn levels[count]\n\t\tcount += 1\n\t\t\ndef correctOP(doc,pt1,factor):\n\tif int(DocumentManager.Instance.CurrentUIApplication.Application.VersionNumber) > 2021:\n\t\tnearest1 = Level.GetNearestLevelId(doc,pt1.Z * factor)\n\telse:\n\t\tnearest1 = oldVersionDetect(doc,pt1,factor)\n\tlvl_to_planeOP = lvl_to_plane(doc,pt1,nearest1,factor)\n\tplane1 = lvl_to_planeOP[0]\n\tlevelref = lvl_to_planeOP[1]\n\tcorrected1 = dg.Geometry.ClosestPointTo(plane1,pt1)\n\treturn corrected1,levelref\n\ndef FinalRefOP(corrected1,corrected1ref,xvec):\n\tpt1XYZ = corrected1.ToXyz()\n\tcorrectedRefPt1 = doc.FamilyCreate.NewReferencePoint(PointOnPlane.NewPointOnPlane(doc,corrected1ref,pt1XYZ,xvec))\n\treturn correctedRefPt1\n\ncorrected = []\ndoc = DocumentManager.Instance.CurrentDBDocument\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\n\nif int(DocumentManager.Instance.CurrentUIApplication.Application.VersionNumber) < 2021:\n\tfactor = UnitUtils.ConvertToInternalUnits(1,doc.GetUnits().GetFormatOptions(UnitType.UT_Length).DisplayUnits)\nelse:\n\tfactor = UnitUtils.ConvertToInternalUnits(1,doc.GetUnits().GetFormatOptions(SpecTypeId.Length).GetUnitTypeId())\n\nrefpts = UnwrapElement(IN[0])\npinnew = IN[1]\n\nTransactionManager.Instance.ForceCloseTransaction()\n\ntrans = Transaction(doc, 'Fixing Points to Levels')\ntrans.Start()\nwarnhandle = KaramSwallowSimple()\nfoptions = trans.GetFailureHandlingOptions()\nfoptions.SetFailuresPreprocessor(warnhandle)\ntrans.SetFailureHandlingOptions(foptions)\n\nresult = []\nfor refpt in refpts:\n\ttry:\n\t\tif hasattr(refpt, 'GetCoordinateSystem'):\n\t\t\tcorrectedOP1 = correctOP(doc,refpt.GetCoordinateSystem().ToCoordinateSystem().Origin,factor)\n\t\t\tresult.append(correctedOP1)\n\t\t\tcorrected1 = correctedOP1[0]\n\t\t\tcorrected1ref = correctedOP1[1]\n\t\t\trefpt.SetPointElementReference(PointOnPlane.NewPointOnPlane(doc,corrected1ref,correctedOP1[0].ToXyz(),refpt.GetCoordinateSystem().BasisX))\n\t\t\tif pinnew:\n\t\t\t\trefpt.Pinned = True\n\t\t\tresult.append(refpt)\n\texcept:\n\t\tpass\ntrans.Commit()\n\nOUT = result",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "1081569ebdb24295afae541b8435f076",
      "Inputs": [
        {
          "Id": "b7a205729d7b44dea5fb375cadfe9b16",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "396c584d0dbb4deb9378f61edaa97233",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee3f47c75d2344beb23d14c336a8f887",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [],
      "Id": "9e17f8ecff5045ce8363a8efe9cbcaa0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6c9cf60025ca4d6ca5c81a086c46f2c3",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "e3b15dcf-8a04-4048-81bc-0e3c0480d780",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "4273b9bf3ce74fdfad8af8a7fa44c8b6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d3ac65ae028744b8bfbfa888d76c47a2",
          "Name": "VAROut",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Debug Python"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "9e7cb4e1a5a4459bbec705166c283fdd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b4fe966774794e34ad8fc8c7f6900eb5",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    }
  ],
  "Connectors": [
    {
      "Start": "6c9cf60025ca4d6ca5c81a086c46f2c3",
      "End": "b7a205729d7b44dea5fb375cadfe9b16",
      "Id": "a57981767e4a47d7a65fa387eb2a6760",
      "IsHidden": "False"
    },
    {
      "Start": "b4fe966774794e34ad8fc8c7f6900eb5",
      "End": "396c584d0dbb4deb9378f61edaa97233",
      "Id": "60d013c0360347d196c65716c538a110",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "e3b15dcf-8a04-4048-81bc-0e3c0480d780"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "Synthesize toolkit",
      "Version": "12.5.1",
      "ReferenceType": "Package",
      "Nodes": [
        "4273b9bf3ce74fdfad8af8a7fa44c8b6"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "2.0",
      "Data": {}
    }
  ],
  "Author": "karam@aecedx.com",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.13.1.3887",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "1081569ebdb24295afae541b8435f076",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 312.4,
        "Y": 250.8
      },
      {
        "Name": "01.Select Reference Points",
        "ShowGeometry": true,
        "Id": "9e17f8ecff5045ce8363a8efe9cbcaa0",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25.2,
        "Y": 258.8
      },
      {
        "Name": "Debug Python No Message",
        "ShowGeometry": true,
        "Id": "4273b9bf3ce74fdfad8af8a7fa44c8b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 317.2,
        "Y": 426.8
      },
      {
        "Name": "02.Pin After Pull ?",
        "ShowGeometry": true,
        "Id": "9e7cb4e1a5a4459bbec705166c283fdd",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 35.6000000000003,
        "Y": 392.4
      }
    ],
    "Annotations": [
      {
        "Id": "f38f7054ee8141f8aab26735fbbdf851",
        "Title": "Input",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "9e17f8ecff5045ce8363a8efe9cbcaa0",
          "9e7cb4e1a5a4459bbec705166c283fdd"
        ],
        "HasNestedGroups": false,
        "Left": 15.2,
        "Top": 192.8,
        "Width": 291.2,
        "Height": 331.4,
        "FontSize": 30.0,
        "InitialTop": 258.8,
        "InitialHeight": 278.59999999999997,
        "TextblockHeight": 56.0,
        "Background": "#FFD8D8D8"
      }
    ],
    "X": 40.20488855291498,
    "Y": -179.88113,
    "Zoom": 1.33823125
  }
}