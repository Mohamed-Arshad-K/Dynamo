<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Universo_BIM</name>
    </assembly>
    <members>
        <member name="M:Elements.ConduitType.NameCollector">
            <summary>
            Collect the Conduit Type Names
            </summary>
            <search>mep, collector, element, conduit, type, name </search>
        </member>
        <member name="M:Elements.ConduitType.ByName(System.String)">
            <summary>
            Get the Conduit Type Element from name
            </summary>
            <search>mep, element, conduit, type, name </search>
        </member>
        <member name="M:Elements.Conduit.ByTwoPoints(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Conduit between two Points
            </summary>
            <search>mep, element, conduit, point</search>
        </member>
        <member name="M:Elements.Conduit.ByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Conduit by Curve
            </summary>
            <search>mep, element, conduit, curve</search>
        </member>
        <member name="M:Elements.Element.Type(Revit.Elements.Element)">
            <summary>
            Gets the Type of the current instance.
            </summary>
            <search>element, type, family, familytype</search>
        </member>
        <member name="M:Elements.Element.CategoryName(Revit.Elements.Element)">
            <summary>
            Retrieves the Category Name in which the element resides.
            </summary>
            <search>element, category, name, categoryname</search>
        </member>
        <member name="M:Elements.Element.OwnerViewID(Revit.Elements.Element)">
            <summary>
            The id of the view that owns the element. 
            </summary>
            <search>owner, view, id, owns</search>
        </member>
        <member name="M:Elements.Element.MaterialCollector(Revit.Elements.Element,System.Boolean)">
            <summary>
            Gets all materials present in the element. Get names and area
            </summary>
            <search>get, element, collector, material, area, volume</search>
        </member>
        <member name="M:Elements.Element.Pinned(Revit.Elements.Element)">
            <summary>
            Identifies if the element has been pinned to prevent changes. 
            </summary>
            <search>pin, pinned, element, family, instance</search>
        </member>
        <member name="M:Elements.Element.LocationCurve(Revit.Elements.Element)">
            <summary>
            Get the LocationCurve from Element if exist (CableTrays, Pipes, Ducts, Conduits)
            </summary>
            <search>mep, element, location, curve, cabletray, pipe, duct, conduit</search>
        </member>
        <member name="M:Elements.FamilyInstance.FacingFlipped(Revit.Elements.FamilyInstance)">
            <summary>
            Test whether the orientation of family instance facing is flipped.
            </summary>
        </member>
        <member name="M:Elements.FamilyInstance.HandFlipped(Revit.Elements.FamilyInstance)">
            <summary>
            Test whether the orientation of family instance hand is flipped.
            </summary>
        </member>
        <member name="M:Elements.DuctSystemType.NameCollector">
            <summary>
            Collect the Duct System Type Names
            </summary>
            <search>mep, collector, element, duct, system, type, name </search>
        </member>
        <member name="M:Elements.DuctSystemType.ByName(System.String)">
            <summary>
            Get the Duct System Type Element from name
            </summary>
            <search>mep, element, duct, system, type, name </search>
        </member>
        <member name="M:Elements.DuctType.NameCollector">
            <summary>
            Collect the Duct Type  Names
            </summary>
            <search>mep, collector, element, duct, type, name </search>
        </member>
        <member name="M:Elements.DuctType.ByName(System.String)">
            <summary>
            Get the Duct Type Element from name
            </summary>
            <search>mep, element, duct, type, name </search>
        </member>
        <member name="M:Elements.Cabletray.ByTwoPoints(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Cabletray between two Points
            </summary>
            <search>mep, element, cabletray, point</search>
        </member>
        <member name="M:Elements.Cabletray.ByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Cabletray by Curve
            </summary>
            <search>mep, element, cabletray, curve</search>
        </member>
        <member name="M:Elements.CabletrayType.NameCollector">
            <summary>
            Collect the Cabletray Type Names
            </summary>
            <search>mep, collector, element, cabletray, type, name </search>
        </member>
        <member name="M:Elements.CabletrayType.ByName(System.String)">
            <summary>
            Get the Cabletray Type Element from name
            </summary>
            <search>mep, element, cabletray, type, name </search>
        </member>
        <member name="M:Elements.Railings.GetPath(Revit.Elements.Element)">
            <summary>
            Gets the railing path. The curve array of the railing path. 
            </summary>
            <search>reiling, path, curve, location, get</search>
        </member>
        <member name="M:Elements.Railings.GetHandRail(Revit.Elements.Element)">
            <summary>
            Get all the handrails Elements of the railing. 
            </summary>
            <search>get, hand, rail, handrail, element, railing</search>
        </member>
        <member name="M:Elements.Railings.GetHandRailPath(Revit.Elements.Element)">
            <summary>
            Get all the handrails Curves of the railing. 
            </summary>
            <search>get, path, curve, location, railing, hand, rail, handrail, railing</search>
        </member>
        <member name="M:Elements.Railings.GetTopRail(Revit.Elements.Element)">
            <summary>
            Get the top rail of the railing
            </summary>
            <search>get, top, rail, toprail, railing</search>
        </member>
        <member name="M:Elements.Railings.GetTopRailPath(Revit.Elements.Element)">
            <summary>
            Get all the toprail Curves of the railing. 
            </summary>
            <search>get, path, location, curve, top, rail, toprail, railing</search>
        </member>
        <member name="M:Elements.WallOpening.ByStartPointEndPoint(Revit.Elements.Wall,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Create a Wall Opening by Start Point and End Point
            </summary>
        </member>
        <member name="M:Elements.WallOpening.ByPointWidthHeight(Revit.Elements.Wall,Autodesk.DesignScript.Geometry.Point,System.Double,System.Double)">
            <summary>
            Create a Wall Opening by center Point and dimensions Width and Height
            </summary>
        </member>
        <member name="M:Elements.HandRails.GetHandRailName(Revit.Elements.Element)">
            <summary>
            Get all the handrails Names of the railing. 
            </summary>
            <search>railing, hand, rail, handrail, name</search>
        </member>
        <member name="M:Elements.Duct.ByTwoPoints(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Duct between two Points
            </summary>
            <search>mep, element, duct, point</search>
        </member>
        <member name="M:Elements.Duct.ByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Duct by Curve
            </summary>
            <search>mep, element, duct, curve</search>
        </member>
        <member name="M:Elements.Duct.RectangularSize(Revit.Elements.Element)">
            <summary>
            Get the Width and Height from Rectangular Duct or CableTray.
            If Element is NOT Rectangular, the result values are "0".
            </summary>
            <search>mep, element, size, width, height, rectangular, cabletray, duct</search>
        </member>
        <member name="M:Elements.Duct.DiameterSize(Revit.Elements.Element)">
            <summary>
            Get the Diameter from Round Duct, Pipe or Conduit.
            If Element is NOT Round, the result value is "0".
            </summary>
            <search>mep, element, size, diameter, round, duct, pipe, conduit</search>
        </member>
        <member name="M:Elements.Pipe.ByTwoPoints(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Pipe between two Points
            </summary>
            <search>mep, element, pipe, point</search>
        </member>
        <member name="M:Elements.Pipe.ByCurve(Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Level)">
            <summary>
            Create a Pipe by Curve
            </summary>
            <search>mep, element, pipe, curve</search>
        </member>
        <member name="M:Elements.PipingSystemType.NameCollector">
            <summary>
            Collect the Piping System Type Names
            </summary>
            <search>mep, collector, element, piping, system, type, name </search>
        </member>
        <member name="M:Elements.PipingSystemType.ByName(System.String)">
            <summary>
            Get the Piping System Type Element from name
            </summary>
            <search>mep, element, piping, system, type, name </search>
        </member>
        <member name="M:Elements.PipeType.NameCollector">
            <summary>
            Collect the Pipe Type  Names
            </summary>
            <search>mep, collector, element, pipe, type, name </search>
        </member>
        <member name="M:Elements.PipeType.ByName(System.String)">
            <summary>
            Get the Pipe Type Element from name
            </summary>
            <search>mep, element, pipe, type, name </search>
        </member>
        <member name="M:Analysis.Collision_Report.getElements(System.String)">
            <summary>
            Get Elements from Html Revit Collision Report
            </summary>
            <search>get, element, from, html, collision, report</search>
        </member>
        <member name="M:Geometry.Curve.PointsDivideByMaxDistance(Autodesk.DesignScript.Geometry.Curve,System.Double)">
            <summary>
            Divide a Curve into Points, by maximum distance.
            </summary>
            <search>curve, divide, point, distance, maximum</search>
        </member>
        <member name="M:Geometry.Curve.PointsDivideByMinDistance(Autodesk.DesignScript.Geometry.Curve,System.Double)">
            <summary>
            Divide a Curve into Points, by minimum distance.
            </summary>
            <search>curve, divide, point, distance, minimum</search>
        </member>
        <member name="M:Geometry.Curve.AngleWithXaxis(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            Return the angle between Curve and the Xaxis
            </summary>
            <search>angle, between,curve,x,axis</search>
        </member>
        <member name="T:Samples.String">
            <summary>
            From Dynamo\src\Libraries\String
            </summary>
        </member>
        <member name="T:Samples.ZeroTouchEssentials">
            <summary>
            Original Samples from ZeroTouch
            </summary>
        </member>
        <member name="M:Samples.ZeroTouchEssentials.ByTwoDoubles(System.Double,System.Double)">
            <summary>
            An example of how to construct an object via a static method.
            This is needed as Dynamo lacks a "new" keyword to construct a 
            new object
            </summary>
            <param name="a">1st number. This will be stored in the Class.</param>
            <param name="b">2nd number. This will be stored in the Class</param>
            <returns>A newly-constructed ZeroTouchEssentials object</returns>
        </member>
        <member name="P:Samples.ZeroTouchEssentials.A">
            <summary>
            Example property returning the value _a inside the object
            </summary>
        </member>
        <member name="P:Samples.ZeroTouchEssentials.B">
            <summary>
            Example property returning the value _b inside the object
            </summary>
        </member>
        <member name="M:Samples.ZeroTouchEssentials.ReturnMultiExample(System.Double,System.Double)">
            <summary>
                An example showing how to return multiple values from a Zero-Touch imported node
                The names in the attribute should match the keys in the returned dictionary.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
            <returns name="add">Number created by adding two inputs together.</returns>
            <returns name="mult">Number created by multiplying two inputs together.</returns>
            <search>example,multi</search>
        </member>
        <member name="M:Samples.ZeroTouchEssentials.DoubleLength(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            This method demonstrates how to use a native geometry object from Dynamo
            in a custom method
            </summary>
            <param name="curve">Input Curve. This can be of any type deriving from Curve, such as NurbsCurve, Arc, Circle, etc</param>
            <returns>The twice the length of the Curve </returns>
        </member>
        <member name="M:Strings.String.listToStringLines(System.Collections.Generic.List{System.Object})">
            <summary>
            Convert a Object List into Text Lines
            </summary>
            <search>convert, object, list, text, lines</search>
        </member>
        <member name="M:Strings.String.textLinesFromFile(System.String)">
            <summary>
            Read a text file and return a List of string lines
            </summary>
            <search>file, text, read, lines, string</search>
        </member>
    </members>
</doc>
