<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BecauseWeDynamo</name>
    </assembly>
    <members>
        <member name="T:Fabrication.DXFLibrary.Document">
            <summary>
            The representation of a dxf document.
            </summary>
        </member>
        <member name="T:Fabrication.DXFLibrary.Element">
            <summary>
            Generic DXF element that conatins data
            </summary>
        </member>
        <member name="M:Fabrication.DXFLibrary.Arc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            right hand rule for angle direction
            for normal vector (nx,ny,nz)
            zero vector = (-sgn(nz)*ny, sgn(nz)*nx, 0)
            </summary>
            <param name="x">Center X-coordinate</param>
            <param name="y">Center Y-coordinate</param>
            <param name="z">Center Z-coordinate</param>
            <param name="radius">Radius</param>
            <param name="startAngle">start angle</param>
            <param name="endAngle">end angle</param>
            <param name="nx">Normal Vector X-coordinate</param>
            <param name="ny">Normal Vector Y-coordinate</param>
            <param name="nz">Normal Vector Z-coordinate</param>
            <param name="layer">layer</param>
        </member>
        <member name="M:Fabrication.DXFLibrary.Text.SetHorizontalJustification(System.Int16)">
            <summary>
            Horizontal text justification type (optional, default = 0) integer codes (not bit-coded)
            0 = Left; 1= Center; 2 = Right
            3 = Aligned (if vertical alignment = 0)
            4 = Middle (if vertical alignment = 0)
            5 = Fit (if vertical alignment = 0)
            </summary>
        </member>
        <member name="M:Fabrication.DXFLibrary.Text.SetVerticalJustification(System.Int16)">
            <summary>
             Vertical text justification type (optional, default = 0): integer codes (not bit-coded):
             0 = Baseline; 1 = Bottom; 2 = Middle; 3 = Top
             </summary>
        </member>
        <member name="M:Fabrication.DXFLibrary.Text.SetSecoundAlignament(System.Double,System.Double,System.Double)">
            <summary>
            The secound alignament coords.
            </summary>
        </member>
        <member name="T:Fabrication.DXFLibrary.Data">
            <summary>
            C# representation of data in a dxf file:
            a dxf code paired with a unit of data.
            </summary>
        </member>
        <member name="T:Fabrication.DXF">
            <summary>
            Exports vectors to dxf;
            </summary>
        </member>
        <member name="M:Fabrication.DXF.ByDefault">
            <summary>
            Creats dxf document setup with no entities.
            </summary>
            <returns>default dxf document with no entities</returns>
        </member>
        <member name="M:Fabrication.DXF.AddCurveAsArcLineXY(Autodesk.DesignScript.Geometry.Curve,System.String,System.Int16)">
            <summary>
            adds planar curve on XY plane to dxf data as arcs and lines
            </summary>
            <param name="Curve">Curve</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCurvesAsArcLineXY(Autodesk.DesignScript.Geometry.Curve[],System.String,System.Int16)">
            <summary>
            adds planar curves on XY plane to dxf data as arcs and lines
            </summary>
            <param name="Curves">Curve Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCurvesAsArcLineXY(Autodesk.DesignScript.Geometry.Curve[][],System.String,System.Int16)">
            <summary>
            adds planar curves on XY plane to dxf data as arcs and lines
            </summary>
            <param name="Curves">Curve Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCurvesAsArcLine(Autodesk.DesignScript.Geometry.Curve[][],System.String,System.Int16)">
            <summary>
            adds curves to dxf data as arcs and lines
            </summary>
            <param name="Curves">Curve Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCurvesAsArcLine(Autodesk.DesignScript.Geometry.Curve[],System.String,System.Int16)">
            <summary>
            adds curves to dxf data as arcs and lines
            </summary>
            <param name="Curves">Curve Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCurveAsArcLine(Autodesk.DesignScript.Geometry.Curve,System.String,System.Int16)">
            <summary>
            adds curve to dxf data as arcs and lines
            </summary>
            <param name="Curve">Curve</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddArc(Autodesk.DesignScript.Geometry.Arc,System.String,System.Int16)">
            <summary>
            adds arc to dxf data
            </summary>
            <param name="Arc">Arc</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCircles(Autodesk.DesignScript.Geometry.Circle[],System.String,System.Int16)">
            <summary>
            adds circles to dxf data
            </summary>
            <param name="Circles">Circle Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCircles(Autodesk.DesignScript.Geometry.Circle[][],System.String,System.Int16)">
            <summary>
            adds circles to dxf data
            </summary>
            <param name="Circles">Circle Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddCircle(Autodesk.DesignScript.Geometry.Circle,System.String,System.Int16)">
            <summary>
            adds circle to dxf data
            </summary>
            <param name="Circle">Circle</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddLines(Autodesk.DesignScript.Geometry.Curve[][],System.String,System.Int16)">
            <summary>
            adds lines to dxf data
            </summary>
            <param name="Lines">Line Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddLines(Autodesk.DesignScript.Geometry.Curve[],System.String,System.Int16)">
            <summary>
            adds lines to dxf data
            </summary>
            <param name="Lines">Line Array</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.AddLine(Autodesk.DesignScript.Geometry.Curve,System.String,System.Int16)">
            <summary>
            adds lines to dxf data
            </summary>
            <param name="Line">Line</param>
            <param name="LayerName">Layer Name (defaults to 0)</param>
            <param name="ACADcolor">Layer Color (defaults to white)</param>
        </member>
        <member name="M:Fabrication.DXF.WriteFile(System.String)">
            <summary>
            writes dxf data to specified file path
            will overwrite existing file
            </summary>
            <param name="FilePath">FilePath (w/o .dxf extension)</param>
        </member>
        <member name="T:Fabrication.MaptoXY">
            <summary>
            map geometry to XY plane
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapPolyCurvesToRow(Autodesk.DesignScript.Geometry.PolyCurve[][],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Collections.Generic.List{System.Int32},System.Double,System.Double)">
            <summary>
            map polycurves in index to XY plane
            with given spacing and at given y-coordinate
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapCirclesToRow(Autodesk.DesignScript.Geometry.Circle[][],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Collections.Generic.List{System.Int32},System.Double,System.Double)">
            <summary>
            map circles in index to XY plane
            with given spacing and at given y-coordinate
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapPolyCurve(Autodesk.DesignScript.Geometry.PolyCurve[],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of polycurves on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapCurve(Autodesk.DesignScript.Geometry.Curve[],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of curves on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapGeometry(Autodesk.DesignScript.Geometry.Geometry[],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of geometry on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapPolyCurves(Autodesk.DesignScript.Geometry.PolyCurve[][],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of polycurves on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapCurves(Autodesk.DesignScript.Geometry.Curve[][],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of curves on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapCircles(Autodesk.DesignScript.Geometry.Circle[][],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of circles on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.MaptoXY.MapGeometries(Autodesk.DesignScript.Geometry.Geometry[][],Autodesk.DesignScript.Geometry.CoordinateSystem[],System.Int32[],System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            creates a grid of geometry on XY-plane 
            from an array of curves with a designated coordinate system
            </summary>
        </member>
        <member name="T:Topology.halfedge">
            <summary>
            HalfEdge: ordered vertex array with reference to face, edge, normal, angle, and length 
            </summary>
        </member>
        <member name="T:Geometry.vector">
            <summary>
            vector object from coordinates
            </summary>
        </member>
        <member name="T:Geometry.coordinates">
            <summary>
            coordinates
            </summary>
        </member>
        <member name="P:Geometry.coordinates.X">
            <summary>
            x-coordinate
            </summary>
        </member>
        <member name="P:Geometry.coordinates.Y">
            <summary>
            y-coordinate
            </summary>
        </member>
        <member name="P:Geometry.coordinates.Z">
            <summary>
            z-coordinate
            </summary>
        </member>
        <member name="M:Geometry.vector.ByCoordinates(Geometry.coordinates)">
            <summary>
            vector from coordinate object
            </summary>
        </member>
        <member name="M:Geometry.vector.ByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            vector from coordinates
            </summary>
        </member>
        <member name="M:Geometry.vector.ByTwoPoints(Geometry.point,Geometry.point)">
            <summary>
            vector from two points (tail=base, head=arrow)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.Xaxis">
            <summary>
            global x-axis (1,0,0)
            </summary>
        </member>
        <member name="M:Geometry.vector.Yaxis">
            <summary>
            global y-axis (0,1,0)
            </summary>
        </member>
        <member name="M:Geometry.vector.Zaxis">
            <summary>
            global z-axis (0,0,1)
            </summary>
        </member>
        <member name="M:Geometry.vector.NormalizedZeroVector(Geometry.vector)">
            <summary>
            orthogonal x-vector to given normal (z-vector) on xy-plane by righthand rule
            </summary>
            <param name="Normal"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.NormalizedBasisXY(Geometry.vector)">
            <summary>
            creates vector basis based on normal vector with normal as Z-axis
            where the X-Axis is the right-handed orthogonal vector to normal
            that lies in the global XY plane with the normal being the Z-axis;
            the Y-axis is generated by right-hand rule from Z cross X
            </summary>
        </member>
        <member name="M:Geometry.vector.NormalizedBasis(Geometry.vector,Geometry.vector)">
            <summary>
            creates orthonormal vector basis
            based on given X-Axis and Y-Axis Vectors
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.NormalizedBasisDXF(Geometry.vector)">
            <summary>
            creates vector basis based on normal vector as defined in dxf OCS
            if x-coordinate and y-coordinate of normal vector is within 1/64 of 0
            then X-Axis is Vector(0,1,0) cross normal vector
            otherwise, X-Axis is (0,0,1) cross normal vector
            the Y-axis is generated by right-hand rule from Z cross X
            </summary>
        </member>
        <member name="M:Geometry.vector.NormalizedVertexVectors(Geometry.vector,Geometry.vector,Geometry.vector)">
            <summary>
            given two vectors defining shape vertex,
            V1 is vector from vertex in right-hand rule
            V2 is vector from vertex in other direction
            where face normal is V1 x V2 (cross product).
            returns array {V1, V2, V1+V2 (bisector), V1-V2 (ON vector to biscetor and normal), NxV1 + V2xN(interior bisector)}
            </summary>
            <param name="V1"></param>
            <param name="V2"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.AngleBetween(Geometry.vector)">
            <summary>
            angle between vectors in radians (always less than PI)
            </summary>
            <param name="Vector"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.Dot(Geometry.vector)">
            <summary>
            dot product of two vectors (order invariant)
            </summary>
        </member>
        <member name="M:Geometry.vector.Add(Geometry.vector)">
            <summary>
            vector addition
            </summary>
        </member>
        <member name="M:Geometry.vector.Subtract(Geometry.vector)">
            <summary>
            vector subtraction
            </summary>
        </member>
        <member name="M:Geometry.vector.Scale(System.Double)">
            <summary>
            uniform scalar multiplication
            </summary>
        </member>
        <member name="M:Geometry.vector.Scale(System.Double,System.Double,System.Double)">
            <summary>
            scalar multiplication by axis
            </summary>
        </member>
        <member name="M:Geometry.vector.Cross(Geometry.vector)">
            <summary>
            vector cross product
            </summary>
        </member>
        <member name="M:Geometry.vector.Reverse">
            <summary>
            reverse vector direction
            </summary>
        </member>
        <member name="M:Geometry.vector.Normalized">
            <summary>
            normalize vector
            </summary>
        </member>
        <member name="M:Geometry.vector.NormalizedCross(Geometry.vector)">
            <summary>
            normalized cross product
            </summary>
        </member>
        <member name="M:Geometry.vector.NormalizeCS(Geometry.vector[])">
            <summary>
            takes an orthogonal basis or object coordinate system (OCS) 
            and returns orthonormal basis as object coordinate
            </summary>
            <param name="CS">Object Coordinate System</param>
            <returns>Normalized OCS</returns>
        </member>
        <member name="M:Geometry.vector.NormalizedAdd(Geometry.vector)">
            <summary>
            returns normalized vector addition
            </summary>
        </member>
        <member name="M:Geometry.vector.NormalizedSubtract(Geometry.vector)">
            <summary>
            returns normalized vector subtraction
            </summary>
        </member>
        <member name="M:Geometry.vector.ChangeBasis(Geometry.vector,Geometry.vector,Geometry.vector)">
            <summary>
            calculates coefficients of vector from universal basis
            to vector basis with given vectors as basis
            </summary>
            <param name="X">X-axis of Basis</param>
            <param name="Y">Y-axis of Basis</param>
            <param name="Z">Z-axis of Basis</param>
            <returns>Coefficients in Given Basis</returns>
        </member>
        <member name="M:Geometry.vector.ChangeBasis(Geometry.vector[])">
            <summary>
            calculates coefficients of vector from universal basis
            to vector basis with given vectors as basis
            </summary>
            <param name="XYZ">Orthogonal Basis as Vector Array [X,Y,Z]</param>
            <returns>Coefficients for Decomposition (a, b, c) where V = aX + bY + cZ</returns>
        </member>
        <member name="M:Geometry.vector.ChangeBasisDXF(Geometry.vector)">
            <summary>
            calculates new coordinates of point from universal basis
            to vector basis derived from given normal using NormalizedBasisDXF
            </summary>
        </member>
        <member name="M:Geometry.vector.IsParallel(Geometry.vector)">
            <summary>
            checks if two vectors are parallel
            using methods in cross product
            </summary>
        </member>
        <member name="M:Geometry.vector.IsPerpendicular(Geometry.vector)">
            <summary>
            checks if two vectors are perpendicular using dot product
            (dot product of perpendicular vectors is 0)
            </summary>
            <param name="V2">Vector 2</param>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.ToVector">
            <summary>
            returns Dynamo Vector equivalent
            </summary>
            <returns></returns>
        </member>
        <member name="M:Geometry.vector.Equals(System.Object)">
            <summary>
            gets object equality
            </summary>
        </member>
        <member name="M:Geometry.vector.Equals(Geometry.vector)">
            <summary>
            gets vector equality
            </summary>
        </member>
        <member name="M:Geometry.vector.GetHashCode">
            <summary>
            gets hashcode
            </summary>
        </member>
        <member name="P:Geometry.vector.Length">
            <summary>
            vector length
            </summary>
        </member>
        <member name="M:Topology.halfedge.ByVertices(System.Collections.Generic.IEnumerable{Topology.vertex})">
            <summary>
            creates HalfEdge instance
            </summary>
            <param name="Vertices">Vertices</param>
            <returns>HalfEdge</returns>
        </member>
        <member name="M:Topology.halfedge.AddEdge(Topology.edge)">
            <summary>
            adds reference edge if halfedge is part of edge
            and adds edge to vertices
            </summary>
            <param name="Edge">Mesh Edge</param>
            <returns>true if succeeded, false if failed</returns>
        </member>
        <member name="M:Topology.halfedge.AddFace(Topology.face)">
            <summary>
            adds reference face if halfedge is part of face
            and adds face to vertices
            </summary>
            <param name="Face">Mesh Face</param>
            <returns>>true if succeeded, false if failed</returns>
        </member>
        <member name="M:Topology.halfedge.FlipDirection">
            <summary>
            flips direction of halfedge
            ie used when fliping face normals
            </summary>
        </member>
        <member name="P:Topology.halfedge.Angle">
            <summary>
            gets angle for halfedge at edge
            </summary>
        </member>
        <member name="P:Topology.halfedge.Normal">
            <summary>
            get normal vector of halfedge face
            </summary>
        </member>
        <member name="P:Topology.halfedge.Edge">
            <summary>
            gets Edge that contains this halfedge
            </summary>
        </member>
        <member name="P:Topology.halfedge.Face">
            <summary>
            get Face that contins this halfedge
            </summary>
        </member>
        <member name="T:Topology.vertex">
            <summary>
            Vertex: coordinate list with reference to face and edge sets
            </summary>
        </member>
        <member name="T:Geometry.point">
            <summary>
            point object from coordinates
            </summary>
        </member>
        <member name="M:Geometry.point.ByCoordinates(Geometry.coordinates)">
            <summary>
            creates point from given coordinate object
            </summary>
        </member>
        <member name="M:Geometry.point.ByCoordinates(System.Double,System.Double,System.Double)">
            <summary>
            creates point from given coordinates
            </summary>
        </member>
        <member name="M:Geometry.point.ByPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            creates point from Dynamo Point object
            </summary>
        </member>
        <member name="M:Geometry.point.DistanceTo(Geometry.point)">
            <summary>
            distance to point
            </summary>
        </member>
        <member name="M:Geometry.point.ChangeBasis(Geometry.vector,Geometry.vector,Geometry.vector)">
            <summary>
            new coordinates for point in given basis
            </summary>
        </member>
        <member name="M:Geometry.point.ChangeBasis(Geometry.vector[])">
            <summary>
            new coordinates for point in given basis
            </summary>
        </member>
        <member name="M:Geometry.point.Multiply(System.Double)">
            <summary>
            scalar mulitplication
            </summary>
        </member>
        <member name="M:Geometry.point.Add(Geometry.point)">
            <summary>
            point addition
            </summary>
            <param name="Point"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.point.Add(Geometry.vector)">
            <summary>
            vector addition for point
            </summary>
        </member>
        <member name="M:Geometry.point.Subtract(Geometry.vector)">
            <summary>
            vector subtraction for point
            </summary>
        </member>
        <member name="M:Geometry.point.ToPoint">
            <summary>
            returns equivalent Dynamo Point object
            </summary>
        </member>
        <member name="M:Geometry.point.Equals(System.Object)">
            <summary>
            gets object equality
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.point.Equals(Geometry.point)">
            <summary>
            gets point equality
            </summary>
            <param name="Point"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.point.GetHashCode">
            <summary>
            gets hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="P:Geometry.point.AsVector">
            <summary>
            vector equivalent
            </summary>
        </member>
        <member name="M:Topology.vertex.ByPoint(Geometry.point)">
            <summary>
            creates empty vertex at point
            </summary>
            <param name="Point">Point</param>
            <returns>Vertex</returns>
        </member>
        <member name="M:Topology.vertex.GetCoordinates">
            <summary>
            return XYZ coordinates of Vertex
            </summary>
            <returns>XYZ Coordinates</returns>
        </member>
        <member name="M:Topology.vertex.AddEdge(Topology.edge)">
            <summary>
            adds edge to vertex if connected
            </summary>
            <param name="Edge">Edge to be added</param>
        </member>
        <member name="M:Topology.vertex.AddEdges(System.Collections.Generic.IEnumerable{Topology.edge})">
            <summary>
            adds edges to vertex if connected
            </summary>
            <param name="Edges">Edges</param>
        </member>
        <member name="M:Topology.vertex.AddFace(Topology.face)">
            <summary>
            adds face to vertex if connected
            </summary>
            <param name="Face">Face</param>
        </member>
        <member name="M:Topology.vertex.AddFaces(System.Collections.Generic.IEnumerable{Topology.face})">
            <summary>
            adds faces to vertex if connected
            </summary>
            <param name="Faces">Faces</param>
        </member>
        <member name="M:Topology.vertex.DistanceTo(Topology.vertex)">
            <summary>
            returns distance to given vertex
            </summary>
            <param name="Vertex">Vertex</param>
            <returns>Distance</returns>
        </member>
        <member name="M:Topology.vertex.DistanceTo(Geometry.point)">
            <summary>
            returns distance to given point
            </summary>
            <param name="Point">Point</param>
            <returns>Distance</returns>
        </member>
        <member name="M:Topology.vertex.IsAtPoint(Geometry.point)">
            <summary>
            checks if vertex is located at point
            </summary>
        </member>
        <member name="M:Topology.vertex.IsAtPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            checks if vertex is located at Dynamo Point
            </summary>
        </member>
        <member name="M:Topology.vertex.IsAtPoint(System.Double,System.Double,System.Double)">
            <summary>
            checks if vertex is located at coordinates
            </summary>
        </member>
        <member name="M:Topology.vertex.Equals(System.Object)">
            <summary>
            gets object equality
            </summary>
        </member>
        <member name="M:Topology.vertex.Equals(Topology.vertex)">
            <summary>
            gets vertex equality
            </summary>
        </member>
        <member name="M:Topology.vertex.GetHashCode">
            <summary>
            gets hashcode
            </summary>
        </member>
        <member name="P:Topology.vertex.Point">
            <summary>
            Vertex Geometry as Point Object
            </summary>
        </member>
        <member name="P:Topology.vertex.Edges">
            <summary>
            Edges connected to Vertex
            </summary>
        </member>
        <member name="P:Topology.vertex.Faces">
            <summary>
            Faces connected to Vertex
            </summary>
        </member>
        <member name="T:Topology.edge">
            <summary>
            Edge: HalfEdge List with reference to faces, vertices, length, name, angle, normal, midpoint, and length
            </summary>
        </member>
        <member name="M:Topology.edge.ByHalfEdges(System.Collections.Generic.IEnumerable{Topology.halfedge})">
            <summary>
            create and Edge object as an array of HalfEdges
            </summary>
            <param name="HalfEdges">HalfEdges</param>
            <returns>Edge</returns>
        </member>
        <member name="M:Topology.edge.GetOtherVertex(Topology.vertex)">
            <summary>
            get other vertex
            </summary>
            <param name="Vertex">Vertex</param>
            <returns>Other Vertex</returns>
        </member>
        <member name="M:Topology.edge.GetAngleNormal(Topology.halfedge,Topology.halfedge)">
            <summary>
            get normal vector to two faces that create an angle
            </summary>
            <param name="eA">HalfEdge A</param>
            <param name="eB">HalfEdge B</param>
            <returns></returns>
        </member>
        <member name="M:Topology.edge.GetLine">
            <summary>
            creates line geometry based on edge
            </summary>
            <returns>Line</returns>
        </member>
        <member name="M:Topology.edge.IsAtCurve(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            checks to see if edge has same geometric properties as given line
            </summary>
            <param name="Line">Line</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Topology.edge.Rename(System.String)">
            <summary>
            rename edge
            </summary>
            <param name="Name"></param>
        </member>
        <member name="P:Topology.edge.Length">
            <summary>
            Edge Length
            </summary>
        </member>
        <member name="P:Topology.edge.Name">
            <summary>
            Edge Name for Label
            </summary>
        </member>
        <member name="P:Topology.edge.Angle">
            <summary>
            Angle between Faces at Edge
            </summary>
        </member>
        <member name="P:Topology.edge.HalfEdges">
            <summary>
            HalfEdge Array
            </summary>
        </member>
        <member name="P:Topology.edge.Normal">
            <summary>
            Normal Vector
            </summary>
        </member>
        <member name="P:Topology.edge.MidPoint">
            <summary>
            Midpoint
            </summary>
        </member>
        <member name="P:Topology.edge.Faces">
            <summary>
            Face List
            </summary>
        </member>
        <member name="P:Topology.edge.Vertices">
            <summary>
            Vertex Array
            </summary>
        </member>
        <member name="T:Topology.spline">
            <summary>
            Spline: HalfEdge List with reference to vertices
            </summary>
        </member>
        <member name="M:Topology.spline.ByHalfEdges(Topology.edge[])">
            <summary>
            creates spline from HalfEdgeList
            </summary>
            <param name="Edges"></param>
            <returns></returns>
        </member>
        <member name="P:Topology.spline.Edges">
            <summary>
            Hlaf Edge List
            </summary>
        </member>
        <member name="P:Topology.spline.Vertices">
            <summary>
            Vertex List
            </summary>
        </member>
        <member name="T:Topology.face">
            <summary>
            Face: HalfEdge List with references to edges, vertices, center, name, angle, normal, midpoint, and length
            </summary>
        </member>
        <member name="M:Topology.face.#ctor">
            <summary>
            default face constructor
            </summary>
        </member>
        <member name="M:Topology.face.#ctor(System.Collections.Generic.IEnumerable{Topology.vertex},Geometry.vector)">
            <summary>
            face constructor from vertex array/list and normal
            </summary>
        </member>
        <member name="M:Topology.face.ByVertices(System.Collections.Generic.IEnumerable{Topology.vertex},Geometry.vector)">
            <summary>
            creates face from ordered vertices and normal
            </summary>
            <param name="Vertices"></param>
            <param name="Normal"></param>
            <returns></returns>
        </member>
        <member name="M:Topology.face.ReOrderVertices(Topology.vertex)">
            <summary>
            reorders vertices based on given start vertex
            </summary>
            <param name="Start"></param>
            <returns></returns>
        </member>
        <member name="M:Topology.face.Rename(System.String)">
            <summary>
            rename face
            </summary>
            <param name="Name">string</param>
        </member>
        <member name="P:Topology.face.Name">
            <summary>
            Name: face label
            </summary>
        </member>
        <member name="P:Topology.face.CS">
            <summary>
            CS: context coordinate system
            </summary>
        </member>
        <member name="P:Topology.face.Center">
            <summary>
            Center: centerpoint of face
            </summary>
        </member>
        <member name="P:Topology.face.Normal">
            <summary>
            Normal: face normal that defines outside
            </summary>
        </member>
        <member name="P:Topology.face.HalfEdges">
            <summary>
            HalfEdges: halfedge list
            </summary>
        </member>
        <member name="P:Topology.face.Vertices">
            <summary>
            Vertices: veterx array
            </summary>
        </member>
        <member name="P:Topology.face.Edges">
            <summary>
            Edges: associated edge array
            </summary>
        </member>
        <member name="P:Topology.face.VertexPoints">
            <summary>
            VertexPoints: array of vertex point geometry 
            </summary>
        </member>
        <member name="P:Topology.face.VertexVectors">
            <summary>
            Vertex Vector Array:
            V1 is normalized vector from vertex in right-hand rule
            V2 is normalized vector from vertex in other direction
            N is face normal ie. V1 x V2 (cross product).
            returns array {V1, V2, V1+V2 (vertex bisector), V1-V2 (ON vector to biscetor and normal), NxV1 + V2xN(exterior bisector)}
            </summary>
        </member>
        <member name="P:Topology.face.Angles">
            <summary>
            Angles: interior angles for face in radians
            </summary>
        </member>
        <member name="P:Topology.face.MinEdgeAngle">
            <summary>
            MinEdgeAngle: sharpest corner made with adjacent face
            </summary>
        </member>
        <member name="T:Topology.triangle">
            <summary>
            triangle mesh face
            </summary>
        </member>
        <member name="M:Topology.triangle.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Topology.triangle.#ctor(System.Collections.Generic.IEnumerable{Topology.vertex},Geometry.vector)">
            <summary>
            constructor from vertex array/list and normal
            </summary>
        </member>
        <member name="M:Topology.triangle.ByVerticesNormal(System.Collections.Generic.IEnumerable{Topology.vertex},Geometry.vector)">
            <summary>
            creates triangle mesh face from given vertex array/list and given normal
            </summary>
        </member>
        <member name="M:Topology.triangle.ByVertices(System.Collections.Generic.IEnumerable{Topology.vertex})">
            <summary>
            creates triangle mesh face from given vertex array/list
            </summary>
        </member>
        <member name="M:Topology.triangle.GetCircumcenter">
            <summary>
            gets circumcenter
            </summary>
        </member>
        <member name="M:Topology.triangle.GetIncenter">
            <summary>
            gets incenter
            </summary>
        </member>
        <member name="M:Topology.triangle.GetOtherVertex(Topology.edge)">
            <summary>
            gets other vertex
            </summary>
        </member>
        <member name="T:Topology.quad">
            <summary>
            quad mesh face
            </summary>
        </member>
        <member name="M:Topology.quad.ByVertices(System.Collections.Generic.IEnumerable{Topology.vertex},Geometry.vector)">
            <summary>
            creates quad object with given vertex list/array and given normal
            </summary>
        </member>
        <member name="M:Topology.quad.FlipDiagonal">
            <summary>
            changes vertex ordering to flip diagonal
            </summary>
        </member>
        <member name="M:Topology.quad.GetDiagonal">
            <summary>
            returns diagonal as Dynamo Line object
            </summary>
        </member>
        <member name="P:Topology.quad.Diagonal">
            <summary>
            diagonal
            </summary>
        </member>
        <member name="T:Topology.mesh">
            <summary>
            Mesh Object with Topology and Geometry
            </summary>
        </member>
        <member name="M:Topology.mesh.BySurfaces(Autodesk.DesignScript.Geometry.Surface[])">
            <summary>
            creates mesh object with given surfaces and derives vertices
            surfaces must be planar but can be concave as well as polygonal
            </summary>
            <param name="Surfaces">Surface Array</param>
            <returns>Mesh Object</returns>
        </member>
        <member name="M:Topology.mesh.GetVertexAtPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            returns topological entity (vertex) at point
            </summary>
            <param name="Point">Vertex Geometry</param>
            <returns>Vertex</returns>
        </member>
        <member name="M:Topology.mesh.GetEdgeAtLine(Autodesk.DesignScript.Geometry.Curve)">
            <summary>
            returns topological entity (edge) at line
            </summary>
            <param name="Line">Edge Geometry</param>
            <returns>Edge</returns>
        </member>
        <member name="M:Topology.mesh.CalculateAngles">
            <summary>
            calculates edge angles based on input geometry
            </summary>
        </member>
        <member name="M:Topology.mesh.FindFaceEdges(Topology.face,System.Int32)">
            <summary>
            looks for Face Edge in Mesh Edge List,
            adds topological information if found
            otherwise creates Edge and adds to Mesh Edge List
            </summary>
            <param name="Face">Face</param>
            <param name="EdgeCount">ExistingEdgeCount</param>
            <returns>NewEdgeCount</returns>
        </member>
        <member name="M:Topology.mesh.FindFaceVertices(Autodesk.DesignScript.Geometry.Surface)">
            <summary>
            looks for Face Vertex in Mesh Vertex List,
            adds topological information if found
            otherwise creates Vertex and adds to Mesh Vertex List
            </summary>
            <param name="Surface"></param>
            <returns></returns>
        </member>
        <member name="M:Topology.mesh.FlipFaceNormals">
            <summary>
            flips face normals
            </summary>
            <returns>Mesh</returns>
        </member>
        <member name="P:Topology.mesh.Faces">
            <summary>
            Face List
            </summary>
        </member>
        <member name="P:Topology.mesh.Edges">
            <summary>
            Edge List
            </summary>
        </member>
        <member name="P:Topology.mesh.EdgesOuter">
            <summary>
            Naked Edge List
            </summary>
        </member>
        <member name="P:Topology.mesh.Vertices">
            <summary>
            Vertex List
            </summary>
        </member>
        <member name="P:Topology.mesh.Splines">
            <summary>
            Spline List
            </summary>
        </member>
        <member name="P:Topology.mesh.Points">
            <summary>
            Point List (Vertex Geometry)
            </summary>
        </member>
        <member name="T:Panelization.panel">
            <summary>
            panel object
            </summary>
        </member>
        <member name="M:Panelization.panel.ByFaceAndParameters(Topology.face,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates panel system based on mesh face and parameters
            </summary>
            <param name="Face"></param>
            <param name="ThicknessFront"></param>
            <param name="ThicknessBack"></param>
            <param name="MinEdgeOffset"></param>
            <param name="CornerOffset"></param>
            <param name="MinFaceAngle"></param>
            <param name="BevelAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Panelization.panel.GetPanelProfile">
            <summary>
            gets panel profile at mesh face as Polycurve
            </summary>
        </member>
        <member name="M:Panelization.panel.GetPanelSurface">
            <summary>
            gets panel surface at mesh face as Surface
            </summary>
        </member>
        <member name="M:Panelization.panel.GetPanelSolid">
            <summary>
            gets panel shape as Solid
            </summary>
        </member>
        <member name="M:Panelization.panel.GetEdgeLabelsBack(System.Double,System.Double,System.String)">
            <summary>
            creates edge labels as polylines on back of panel
            </summary>
            <param name="Scale">Scale</param>
            <param name="Offset">Label Offset from Edge</param>
            <param name="LabelPrefix">Label Prefix</param>
            <returns>Edge Labels on Panel Back</returns>
        </member>
        <member name="M:Panelization.panel.GetEdgeLabelsFront(System.Double,System.Double,System.String)">
            <summary>
            creates edge labels as polylines on front of panel
            </summary>
            <param name="Scale">Scale</param>
            <param name="Offset">Label Offset from Edge</param>
            <param name="LabelPrefix">Label Prefix</param>
            <returns>Edge Labels on Panel Front</returns>
        </member>
        <member name="M:Panelization.panel.GetLabelsBack(System.Double,System.Double,System.String)">
            <summary>
            creates edge and face labels as polylines on back of panel
            </summary>
            <param name="Scale">Scale</param>
            <param name="Offset">Label Offset from Edge</param>
            <param name="LabelPrefix">Label Prefix</param>
            <returns>Labels on Panel Back</returns>
        </member>
        <member name="M:Panelization.panel.GetLabelsFront(System.Double,System.Double,System.String)">
            <summary>
            creates edge and face labels as polylines on front of panel
            </summary>
            <param name="Scale">Scale</param>
            <param name="Offset">Label Offset from Edge</param>
            <param name="LabelPrefix">Label Prefix</param>
            <returns>Labels on Panel Front</returns>
        </member>
        <member name="M:Panelization.panel.GetFaceLabelFront(System.Double,System.String)">
            <summary>
            creates face labels as polylines on front of panel
            </summary>
            <param name="Scale">Scale</param>
            <param name="LabelPrefix">Label Prefix</param>
            <returns>Face Labels on Panel Front</returns>
        </member>
        <member name="M:Panelization.panel.GetFaceLabelBack(System.Double,System.String)">
            <summary>
            creates face labels as polylines on back of panel
            </summary>
            <param name="Scale">Scale</param>
            <param name="LabelPrefix">Label Prefix</param>
            <returns>Face Labels on Panel Back</returns>
        </member>
        <member name="P:Panelization.panel.Face">
            <summary>
            mesh face that defines base plane and panel geometry
            </summary>
        </member>
        <member name="P:Panelization.panel.CS">
            <summary>
            context coordinate system inherited from associated Mesh.Face
            </summary>
        </member>
        <member name="P:Panelization.panel.ArcPoints">
            <summary>
            point array that defines panel geometry
            </summary>
        </member>
        <member name="P:Panelization.panel.EdgeOffset">
            <summary>
            double array that stores edge offsets
            </summary>
        </member>
        <member name="T:Panelization.panelHole">
            <summary>
            panel object with holes that correspond to edge conector placement
            bevels are set to zero for hole addition
            </summary>
        </member>
        <member name="M:Panelization.panelHole.ByFaceAndParameters(Topology.face,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates panel object with holes for connectors, defualt bevel angle is 0
            </summary>
            <param name="Face"></param>
            <param name="ThicknessFront"></param>
            <param name="ThicknessBack"></param>
            <param name="MinEdgeOffset"></param>
            <param name="MinCornerRadius"></param>
            <param name="MinFaceAngle"></param>
            <param name="BevelAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Panelization.panelHole.GetPanelHoleProfile">
            <summary>
            get panel hole geometry data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Panelization.panelHole.GetPanelHoleProfileAsPolyCurve">
            <summary>
            get panel hole geometry data as polycurves
            </summary>
            <returns></returns>
        </member>
        <member name="M:Panelization.panelHole.GetPanelHoleSurface">
            <summary>
            returns solid panel with holes based on flat panel as single Solid
            </summary>
            <returns>Solid by Surface Thickening</returns>
        </member>
        <member name="M:Panelization.panelHole.GetPanelHoleSolidFront">
            <summary>
            get panel solid hole from mesh to panel front
            </summary>
            <returns></returns>
        </member>
        <member name="M:Panelization.panelHole.GetPanelHoleSolid">
            <summary>
            get panel solid hole
            </summary>
        </member>
        <member name="M:Panelization.panelHole.AddHole(Geometry.point,System.Double)">
            <summary>
            add hole with center at closest point on panel to input point with given radius
            </summary>
            <param name="Point">Point is center of hole</param>
            <param name="Radius">Radius of hole</param>
        </member>
        <member name="P:Panelization.panelHole.Holes">
            <summary>
            circle list that contains panel hole geometry
            </summary>
        </member>
        <member name="T:Panelization.panelGradient">
            <summary>
            panel object with minimum edge offset determined by Z-axis elevation
            </summary>
        </member>
        <member name="M:Panelization.panelGradient.ByFaceAndParameters(Topology.face,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates panel object with minimum edge offset determined by Z-axis elevation
            default bevel angle and z-axis contribution to offset is set to 0
            </summary>
            <param name="Face"></param>
            <param name="ThicknessFront"></param>
            <param name="ThicknessBack"></param>
            <param name="MinEdgeOffset"></param>
            <param name="MinCornerRadius"></param>
            <param name="MinFaceAngle"></param>
            <param name="BevelAngle"></param>
            <param name="OffsetBaseZ"></param>
            <returns></returns>
        </member>
        <member name="T:Panelization.connector">
            <summary>
            connectors at edges created for model
            </summary>
        </member>
        <member name="M:Panelization.connector.ByHalfEdgeHeight(Topology.halfedge,Topology.halfedge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given halfedge objects and parameters with spacing being the same as height
            </summary>
        </member>
        <member name="M:Panelization.connector.ByHalfEdge(Topology.halfedge,Topology.halfedge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given halfedge objects and parameters
            </summary>
        </member>
        <member name="M:Panelization.connector.ByEdge(Topology.edge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given edge object and parameters
            </summary>
        </member>
        <member name="M:Panelization.connector.GetConnectorProfileAtMidpoint">
            <summary>
            get connector profile at midpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:Panelization.connector.GetConnectorProfileAtPoint(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            returns profile curve of panel as single Polycurve
            </summary>
            <param name="Point">Point is origin of connector</param>
            <returns>Polycurve of joined Arcs and Lines</returns>
        </member>
        <member name="M:Panelization.connector.GetConnectorSurface(Autodesk.DesignScript.Geometry.PolyCurve)">
            <summary>
            returns flat panel on mesh face as single Surface
            </summary>
        </member>
        <member name="M:Panelization.connector.GetConnectorSolid(Autodesk.DesignScript.Geometry.PolyCurve)">
            <summary>
            returns solid panel based on panel profile as single Solid
            </summary>
        </member>
        <member name="M:Panelization.connector.GetEdgeLabel(Autodesk.DesignScript.Geometry.Point,System.Double,System.String)">
            <summary>
            gets edge labels at edge on triangular mesh face backside as an Polycurve array
            </summary>
        </member>
        <member name="M:Panelization.connector.GetConnectorProfileBevel(Autodesk.DesignScript.Geometry.Point)">
            <summary>
            get connector profile bevel at point
            </summary>
            <param name="Point"></param>
            <returns></returns>
        </member>
        <member name="P:Panelization.connector.Edge">
            <summary>
            gets reference edge in mesh
            </summary>
        </member>
        <member name="P:Panelization.connector.HalfEdges">
            <summary>
            gets halfedges of faces being connected by connector
            </summary>
        </member>
        <member name="P:Panelization.connector.Inset">
            <summary>
            get distance from mesh edge to panel edge
            </summary>
        </member>
        <member name="P:Panelization.connector.InsetAngle">
            <summary>
            get angle between the faces being connected (radians)
            </summary>
        </member>
        <member name="P:Panelization.connector.Profile">
            <summary>
            get profile points as List of Vectors from given point on edge
            </summary>
        </member>
        <member name="P:Panelization.connector.Vectors">
            <summary>
            get Vector Array {X1,Y1,Z1,X2,Y2,Z2,N} 
            (halfedge1 CS),(halfedge1 CS),edge normal
            </summary>
        </member>
        <member name="P:Panelization.connector.Midpoint">
            <summary>
            midpoint of edge
            </summary>
        </member>
        <member name="T:Panelization.connectorGradient">
            <summary>
            edgeConnector object for panel system with edge offset determined by height in Z-axis
            </summary>
        </member>
        <member name="M:Panelization.connectorGradient.ByHalfEdge(Topology.halfedge,Topology.halfedge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given halfedge objects and parameters
            </summary>
        </member>
        <member name="M:Panelization.connectorGradient.ByEdge(Topology.edge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given edge object and parameters
            </summary>
        </member>
        <member name="T:Panelization.connectorHole">
            <summary>
            edgeConnector object for panel system using dowel nuts for assembly
            </summary>
        </member>
        <member name="F:Panelization.connectorHole.Radius">
            <summary>
            dowel nut radius
            </summary>
        </member>
        <member name="F:Panelization.connectorHole.Pockets">
            <summary>
            circle list of dowel nut geometry
            </summary>
        </member>
        <member name="M:Panelization.connectorHole.ByHalfEdge(Topology.halfedge,Topology.halfedge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given halfedge objects and parameters
            </summary>
        </member>
        <member name="M:Panelization.connectorHole.ByEdge(Topology.edge,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates edgeConnector object with given edge object and parameters
            </summary>
        </member>
        <member name="M:Panelization.connectorHole.GetConnectorHoleSurfaces">
            <summary>
            returns connector surface with holes at midpoint
            </summary>
            <returns></returns>
        </member>
        <member name="M:Panelization.connectorHole.GetConnectorHoleSolids">
            <summary>
            gets solid panel with holes based on flat panel as single Solid
            </summary>
        </member>
        <member name="M:Panelization.connectorHole.AddPocket(Geometry.point,System.Double)">
            <summary>
            adds pockets based on edge condition and inset with given radius
            </summary>
            <param name="Point">Point is origin of connector</param>
            <param name="Radius">Radius of pocket</param>
        </member>
        <member name="M:Panelization.connectorHole.GetPockets">
            <summary>
            gets pockets as Dynamo Circle object array
            </summary>
        </member>
        <member name="T:Panelization.panelSystem">
            <summary>
            panel system
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.ByMesh(Topology.mesh)">
            <summary>
            returns default empty panel system with associated mesh
            </summary>
            <param name="Mesh">Mesh Object</param>
            <returns>Panel System</returns>
        </member>
        <member name="M:Panelization.panelSystem.ByMeshParameters(Topology.mesh,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates panel system with clearance bevels
            </summary>
            <param name="Mesh">Mesh Geometry</param>
            <param name="Height">Connector Height</param>
            <param name="Depth">Connector Depth</param>
            <param name="Spacing">Connector Hole Spacing</param>
            <param name="ThicknessFront">Panel Thickness Normal Direction</param>
            <param name="ThicknessBack">Panel Thickness Other Direction</param>
            <param name="MinEdgeOffset">Panel Minimum Edge Offset</param>
            <param name="CornerOffset">Panel Minimum Corner Offset</param>
            <param name="ConnectorFilletRadius">Connector Fillet Radius</param>
            <param name="BevelAngle">Panel Clearance Bevel Angle</param>
            <returns>Panel System with Clearance Bevels</returns>
        </member>
        <member name="M:Panelization.panelSystem.ByMeshParametersGradient(Topology.mesh,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            creates panel system with edge offset based on elevation
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.ByMeshParametersHole(Topology.mesh,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            creates panel system with holes for bolt to dowel nut connection
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.GenerateEdgeConnectors(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            generate edgeconnector geometry based on system inputs
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.GenerateEdgeConnectorsGradient(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            generate edgeconnector geometry based on system inputs
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.GenerateEdgeConnectorsHole(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            generates new Edge/EdgeConnector Dictionary with given parameters
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.GeneratePanels(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            generate panels based on system inputs
            </summary>
            <param name="ThicknessFront"></param>
            <param name="ThicknessBack"></param>
            <param name="MinEdgeOffset"></param>
            <param name="CornerOffset"></param>
            <param name="BevelAngle"></param>
            <returns></returns>
        </member>
        <member name="M:Panelization.panelSystem.GeneratePanelsGradient(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            generate panels based on system inputs
            </summary>
        </member>
        <member name="M:Panelization.panelSystem.GeneratePanelsHole(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            generates new Triangle/TrianglePanel Dictionary with given parameters based on EdgeConnectors
            </summary>
        </member>
        <member name="P:Panelization.panelSystem.Panels">
            <summary>
            panel array
            </summary>
        </member>
        <member name="P:Panelization.panelSystem.Connectors">
            <summary>
            edgeconnector array
            </summary>
        </member>
        <member name="T:Geometry.math">
            <summary>
            additional math functions
            </summary>
        </member>
        <member name="F:Geometry.math.PI">
            <summary>
            PI as double
            </summary>
        </member>
        <member name="M:Geometry.math.Mod(System.Double,System.Double)">
            <summary>
            returns modulo operation on a double
            with given input number and modulus
            also the remainder after Euclidean division
            </summary>
            <param name="Number">Input Number</param>
            <param name="Modulus">Modulus</param>
            <returns>Remainder > 0</returns>
        </member>
        <member name="M:Geometry.math.toRadians(System.Double)">
            <summary>
            takes angle in degrees and converts into radians
            </summary>
            <param name="Angle">Angle in Degrees</param>
            <returns>Angle in Radians</returns>
        </member>
        <member name="M:Geometry.math.toDegrees(System.Double)">
            <summary>
            takes angle in radians and converts into degrees
            </summary>
            <param name="Angle">Angle in Radians</param>
            <returns>Angle in Degrees</returns>
        </member>
        <member name="M:Geometry.math.ScaleSAT(Autodesk.DesignScript.Geometry.Geometry)">
            <summary>
            scale SAT imports (m to ft)
            </summary>
            <param name="Geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.math.Center(Geometry.point[])">
            <summary>
            find center point of point cluster
            </summary>
            <param name="Points"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.math.CenterWeighted(Geometry.point[],System.Double[])">
            <summary>
            find weighted center of point cluster based on given points and weights
            </summary>
            <param name="Points"></param>
            <param name="Weights"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.math.Center(Geometry.vector[])">
            <summary>
            find center vector of vector cluster
            </summary>
            <param name="Vectors"></param>
            <returns></returns>
        </member>
        <member name="M:Geometry.math.Center(Geometry.point,Geometry.point)">
            <summary>
            find midpoint of two points
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="T:Geometry.coordinatesystem">
            <summary>
            coordinate system
            </summary>
        </member>
        <member name="M:Geometry.coordinatesystem.ByOrigin(Geometry.point)">
            <summary>
            creates universal coordinate system with origin at given point
            </summary>
        </member>
        <member name="M:Geometry.coordinatesystem.ByOrigin(System.Double,System.Double,System.Double)">
            <summary>
            creates universal coordinate system with origin at given point
            </summary>
        </member>
        <member name="M:Geometry.coordinatesystem.ByOriginVectors(Geometry.point,Geometry.vector,Geometry.vector,Geometry.vector)">
            <summary>
            creates coordinate system base on given point and vectors
            </summary>
        </member>
        <member name="P:Geometry.coordinatesystem.X">
            <summary>
            x-axis
            </summary>
        </member>
        <member name="P:Geometry.coordinatesystem.Y">
            <summary>
            y-axis
            </summary>
        </member>
        <member name="P:Geometry.coordinatesystem.Z">
            <summary>
            z-axis
            </summary>
        </member>
        <member name="P:Geometry.coordinatesystem.Origin">
            <summary>
            origin
            </summary>
        </member>
        <member name="T:Geometry.arc">
            <summary>
            arc object
            </summary>
        </member>
        <member name="M:Geometry.arc.ByThreePoints(Geometry.coordinates,Geometry.coordinates,Geometry.coordinates)">
            <summary>
            create arc from three points;
            first point determines x-axis with normal derived by righthand rule
            </summary>
        </member>
        <member name="P:Geometry.arc.Radius">
            <summary>
            arc radius
            </summary>
        </member>
        <member name="P:Geometry.arc.Center">
            <summary>
            arc center
            </summary>
        </member>
        <member name="P:Geometry.arc.SweepAngle">
            <summary>
            arc sweep angle in radians
            </summary>
        </member>
        <member name="P:Geometry.arc.Normal">
            <summary>
            arc normal by righthand rule
            </summary>
        </member>
        <member name="P:Geometry.arc.CS">
            <summary>
            context coordinate system with arc start point as x-axis
            </summary>
        </member>
        <member name="T:Geometry.circle">
            <summary>
            circle object
            </summary>
        </member>
        <member name="M:Geometry.circle.ByCenterRadiusNormal(Geometry.point,System.Double,Geometry.vector)">
            <summary>
            creates circle with center at given point with given radius on plane orthogonal to normal
            </summary>
        </member>
        <member name="M:Geometry.circle.ToCircle">
            <summary>
            gets Dynamo Circle object equivalent
            </summary>
        </member>
        <member name="P:Geometry.circle.Radius">
            <summary>
            circle radius
            </summary>
        </member>
        <member name="P:Geometry.circle.Center">
            <summary>
            circle center
            </summary>
        </member>
        <member name="P:Geometry.circle.Normal">
            <summary>
            circle normal set by input
            </summary>
        </member>
        <member name="T:Fabrication.Slicer">
            <summary>
            slicing object
            </summary>
        </member>
        <member name="M:Fabrication.Slicer.#ctor(Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Plane,Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line,System.Double,System.Double)">
            <summary>
            Internal constructor for the class that has all geometric inputs to create sliced model
            </summary>
            <param name="solid">Solid: geometry that is to be parsed</param>
            <param name="plane">Plane: primary cutplane</param>
            <param name="line1">Line1: (optional) defines secondary cutplane</param>
            <param name="line2">Line2: (optional) defines tertiary cutplane</param>
            <param name="thickness">Thickness: the thickness of the slices, or the thickness of the material to be used for the assembly</param>
            <param name="spacing">Spacing: the distance between each slice</param>
        </member>
        <member name="M:Fabrication.Slicer.#ctor(Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Curve,System.Double,System.Double,System.Double)">
            <summary>
            creates slices using a curve as the spine
            </summary>
            <param name="solid">Solid: geometry that is to be parsed</param>
            <param name="curve">Curve: defines the normal used to create cut planes perpendicular to parameter "plane".
            If curve is too short, it will be extended using built-in extend function</param>
            <param name="thickness">Thickness: the thickness of the slices, or the thickness of the material to be used for the assembly</param>
            <param name="spacing">Spacing: the distance between each slice</param>
            <param name="origin">Origin</param>
            <returns>A newly-constructed Slicer object</returns>
        </member>
        <member name="M:Fabrication.Slicer.ByPlane(Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Plane,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="solid"></param>
            <param name="plane"></param>
            <param name="thickness"></param>
            <param name="spacing"></param>
            <returns></returns>
        </member>
        <member name="M:Fabrication.Slicer.ByPlaneAndLines(Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Plane,Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line,System.Double,System.Double)">
            <summary>
            Construct an instance of slicer via a static method.
            This makes vertical stacks of given solid
            with each stack being of specified thickness
            and with given plane as the initial cutplane
            </summary>
            <param name="solid">Solid: geometry that is to be parsed</param>
            <param name="plane">Plane: primary cutplane</param>
            <param name="line1">Line1: (optional) defines secondary cutplane</param>
            <param name="line2">Line2: (optional) defines tertiary cutplane</param>
            <param name="thickness">Thickness: the thickness of the slices, or the thickness of the material to be used for the assembly</param>
            <param name="spacing">Spacing: the distance between each slice</param>
            <returns>A newly-constructed Slicer object</returns>
        </member>
        <member name="M:Fabrication.Slicer.ByCurve(Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Curve,System.Double,System.Double,System.Double)">
            <summary>
            Construct an instance of slicer via a static method.
            This makes vertical stacks of given solid
            with each stack being of specified thickness
            and with given plane as the initial cutplane
            </summary>
            <param name="solid">Solid: geometry that is to be parsed</param>
            <param name="curve">Curve: defines the normal used to create cut planes perpendicular to parameter "plane".
            If curve is too short, it will be extended using built-in extend function</param>
            <param name="thickness">Thickness: the thickness of the slices, or the thickness of the material to be used for the assembly</param>
            <param name="spacing">Spacing: the distance between each slice</param>
            <param name="origin">Curve Parameter (0 - 1)</param>
            <returns>A newly-constructed Slicer object</returns>
        </member>
        <member name="M:Fabrication.Slicer.GetResultsPlaneInscribed(Fabrication.Slicer)">
            <summary>
            Returns results as circles, planar surfaces, and solid slices.
            slices are within input solid so it can be skinned.
            </summary>
            <param name="slicer">slicer object</param>
            <returns>circles, planar surfaces, and solid slices listed by layer then by object</returns>
        </member>
        <member name="M:Fabrication.Slicer.GetResultsPlaneCircumscribed(Fabrication.Slicer)">
            <summary>
            Returns results as circles, planar surfaces, and solid slices.
            Slices contain solid so it can be sanded down.
            </summary>
            <param name="slicer">slicer object</param>
            <returns>circles, planar surfaces, and solid slices listed by layer then by object</returns>
        </member>
        <member name="M:Fabrication.Slicer.GetResultsPlane(Fabrication.Slicer)">
            <summary>
            Returns results as circles, planar surfaces, and solid slices.
            </summary>
            <param name="slicer">slicer object</param>
            <returns>circles, planar surfaces, and solid slices listed by layer then by object</returns>
        </member>
        <member name="M:Fabrication.Slicer.GetResultsLine1(Fabrication.Slicer)">
            <summary>
            Returns surfaces by layer
            </summary>
            <param name="slicer">slicer object</param>
            <returns>list of polycurve arrays</returns>
        </member>
        <member name="M:Fabrication.Slicer.GetResultsLine2(Fabrication.Slicer)">
            <summary>
            Returns surfaces by layer
            </summary>
            <param name="slicer">slicer object</param>
            <returns>list of polycurve arrays</returns>
        </member>
        <member name="M:Fabrication.Slicer.GenerateCutPlanes(Autodesk.DesignScript.Geometry.Plane)">
            <summary>
            This function creates a list of cut planes;
            Initial cut plane is the plane specified in cosntructor
            and the rest of the planes are generated from the initial plane
            and the given spacing.
            </summary>
            <param name="plane">initial plane</param>
            <returns>List containing all cut planes</returns>
        </member>
        <member name="M:Fabrication.Slicer.GenerateCutPlanes(Autodesk.DesignScript.Geometry.Curve,System.Double)">
            <summary>
            This function creates a list of cut planes;
            Initial cut plane is normal plane to curve at given origin
            and the rest of the planes are generated from the initial plane
            and the given spacing.
            </summary>
            <param name="curve"></param>
            <param name="origin"></param>
            <returns>List containing all cut planes</returns>
        </member>
        <member name="M:Fabrication.Slicer.GenerateSurfaces(Autodesk.DesignScript.Geometry.Plane[])">
            <summary>
            Generates a list of arrays of closed result based on cutplanes 
            </summary>
        </member>
        <member name="M:Fabrication.Slicer.GenerateSlices(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface[]})">
            <summary>
            returns solid objects
            </summary>
            <param name="Surfaces"></param>
            <returns></returns>
        </member>
        <member name="M:Fabrication.Slicer.GenerateProfiles(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface[]})">
            <summary>
            Takes a list of surface arrays, and returns perimeters
            </summary>
        </member>
        <member name="M:Fabrication.Slicer.Dispose">
            <summary>
            dispose function
            </summary>
        </member>
        <member name="M:Fabrication.Slicer.Dispose(System.Boolean)">
            <summary>
            protected dispose function
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Fabrication.Slicer.Thickness">
            <summary>
            slice thickness
            </summary>
        </member>
        <member name="P:Fabrication.Slicer.Spacing">
            <summary>
            spacing between slices
            </summary>
        </member>
        <member name="P:Fabrication.Slicer.Solid">
            <summary>
            solid to be sliced
            </summary>
        </member>
        <member name="P:Fabrication.Slicer.CutPlanes">
            <summary>
            List of CutPlane Arrays
            </summary>
        </member>
        <member name="M:Fabrication.DXFLibrary.LineType.AddElement(System.Double)">
            <summary>
            Add a simple section to the pattern. If positive, represents continuous line, if negative, represents space.
            </summary>
            <param name="length">The length of the section added</param>
        </member>
        <member name="M:Fabrication.DXFLibrary.LineType.AddElement(System.Double,System.String,System.Boolean,System.Double)">
            <summary>
            Add a text element to the pattern.
            </summary>
            <param name="length">Dash, dot or space length</param>
            <param name="absoluteRotation">Absolute rotation</param>
            <param name="text">Text string</param>
            <param name="rotation">R = (relative) or A = (absolute) rotation value in radians of embedded text. -1000 value represents no rotation</param>
        </member>
        <member name="M:Fabrication.DXFLibrary.LineType.AddElement(System.Double,System.Int16,System.Boolean,System.Double)">
            <summary>
            Add a shape element to the pattern.
            </summary>
            <param name="length">The length of the added section to the pattern</param>
            <param name="shapeNumber">The SHAPE element number</param>
            <param name="absoluteRotation">absolute rotation</param>
            <param name="rotation">R = (relative) or A = (absolute) rotation value in radians of embedded text. -1000 value represents no rotation</param>
        </member>
        <member name="T:Fabrication.word">
            <summary>
            Word object composed on polycurve letters
            </summary>
        </member>
        <member name="M:Fabrication.word.ByStringOriginVectors(System.String,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            creates word object by string, origin point, orthonormal vectors X, Y
            </summary>
        </member>
        <member name="M:Fabrication.word.ByStringCS(System.String,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            creates word object by string and coordinate system
            </summary>
        </member>
        <member name="M:Fabrication.word.Transform(Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            transform word object to new coordinate system
            </summary>
            <param name="newCS">New Coordinate System</param>
            <returns>Transformed Word</returns>
        </member>
        <member name="M:Fabrication.word.Translate(Autodesk.DesignScript.Geometry.Vector,System.Double)">
            <summary>
            translates word object to new coordinates
            based on vector direction and scalar distance
            </summary>
            <param name="Direction">Direction Vector</param>
            <param name="Distance">Distance</param>
            <returns>Translated Object</returns>
        </member>
        <member name="M:Fabrication.word.Translate(System.Double,System.Double)">
            <summary>
            translates word object by x-amount and y-amount relative to itself
            </summary>
            <returns>Translated Object</returns>
        </member>
        <member name="M:Fabrication.word.Scale(System.Double)">
            <summary>
            scales word about object origin by given scale factor
            </summary>
            <param name="Factor">Scale Factor</param>
            <returns>Scaled Object</returns>
        </member>
        <member name="M:Fabrication.word.Display(System.Double)">
            <summary>
            creates polycurves for text
            </summary>
            <param name="Scale"></param>
            <returns></returns>
        </member>
        <member name="M:Fabrication.word.Dispose">
            <summary>
            dispose function
            </summary>
        </member>
        <member name="M:Fabrication.word.Dispose(System.Boolean)">
            <summary>
            protected dispose function
            </summary>
        </member>
        <member name="P:Fabrication.word.Letters">
            <summary>
            letter array in word
            </summary>
        </member>
        <member name="M:Topology.rigging.GetSortedTriangleIndexByName">
            <summary>
            gets index set of Triangles sorted by angles
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
