<Workspace Version="1.3.3.4651" X="182.178107158029" Y="124.637897848939" zoom="0.44028875215393" ScaleFactor="1" Name="SelectByCategoryAnd3DView from document" Description="Collect elements by category and 3D View from a linked document." ID="9fe45e65-2183-4231-8de1-0018e34084bc" Category="GeniusLoci.Document">
  <NamespaceResolutionMap>
    <ClassMap partialName="DSCore.List" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="7ab83bbc-8b6c-4a90-a1c0-ecc6026c977b" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="721.104865410435" y="352.616837782383" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="5e58fe36-9461-4d4b-a327-ee38983898c7" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="383.807121061555" y="334.279043451884" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="3DView" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="b4048450-96c9-43dd-b406-3e74a7ffef89" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="374.099743638835" y="416.860923131111" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Category" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="393613a1-e871-4421-be66-072c4c1e587b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="118.576286435672" y="494.23680687159" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="////Lacing on Longest for multiple docs&#xD;&#xA;Document" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <PythonNodeModels.PythonNode guid="09e3b435-1f38-48d6-994d-a347f19b928a" type="PythonNodeModels.PythonNode" nickname="Python Script" x="538.167979237151" y="353.30554602009" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="3">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <Script>#Inspired by Einar_Raknes
#From Alban_de_Chasteigner

import clr
clr.AddReference('RevitAPI')
clr.AddReference('System')
clr.AddReference('RevitNodes')
clr.AddReference('RevitServices')
import Revit
import RevitServices
from Autodesk.Revit.DB import *
from System.Collections.Generic import List
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

#Functions for list handling
def ProcessList(_func, _list):
   return map( lambda x: ProcessList(_func, x) if type(x)==list else _func(x), _list )

#Preparing input from dynamo to revit

def Unwrap(item):
    return UnwrapElement(item)

if isinstance(IN[0], list):
    views = ProcessList(Unwrap, IN[0])
else:
    views = [Unwrap(IN[0])]

if isinstance(IN[1], list):
	cats = ProcessList(UnwrapElement, IN[1])
else:
	cats = [UnwrapElement(IN[1])]

if isinstance(IN[2], list):
    docs = ProcessList(Unwrap, IN[2])
else:
    docs = [Unwrap(IN[2])]

viewlist = []

for view in views:
    viewlist.append(view)
    sectionbox = view.GetSectionBox()
    transform = sectionbox.Transform
    sboxoriginx = transform.Origin.X
    sboxoriginy = transform.Origin.Y
    sboxoriginz = transform.Origin.Z
    minx = sectionbox.Min.X + sboxoriginx
    maxx = sectionbox.Max.X + sboxoriginx
    miny = sectionbox.Min.Y + sboxoriginy
    maxy = sectionbox.Max.Y + sboxoriginy
    minz = sectionbox.Min.Z + sboxoriginz
    maxz = sectionbox.Max.Z + sboxoriginz
    bbox = BoundingBoxXYZ()

catlist = []
for cat in cats:
	catlist.append(cat.Id)
filtercats = List[ElementId](catlist)
catfilter = ElementMulticategoryFilter(filtercats)


	
def collectElementsInBB(bbox):
	outline = Outline(XYZ((minx), (miny), (minz)), XYZ((maxx), (maxy), (maxz)))
	bbfilter = BoundingBoxIntersectsFilter(outline)
	andfilter = LogicalAndFilter(catfilter,bbfilter)
	#collect all views in the model
	for doc in docs:
		collector = FilteredElementCollector(doc).WherePasses(andfilter)
	return [e.ToDSType(True) for e in collector]

OUT = ProcessList(collectElementsInBB,docs)[0]</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="5e58fe36-9461-4d4b-a327-ee38983898c7" start_index="0" end="09e3b435-1f38-48d6-994d-a347f19b928a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b4048450-96c9-43dd-b406-3e74a7ffef89" start_index="0" end="09e3b435-1f38-48d6-994d-a347f19b928a" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="393613a1-e871-4421-be66-072c4c1e587b" start_index="0" end="09e3b435-1f38-48d6-994d-a347f19b928a" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="09e3b435-1f38-48d6-994d-a347f19b928a" start_index="0" end="7ab83bbc-8b6c-4a90-a1c0-ecc6026c977b" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>