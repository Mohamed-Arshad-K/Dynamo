<Workspace Version="1.3.3.4651" X="-50.8734538092114" Y="162.164248738771" zoom="0.475182674898477" ScaleFactor="1" Name="Get all views from document" Description="Collects all views from document without the sheets" ID="c8e81411-6f5c-461e-8b9e-4bccecc03328" Category="GeniusLoci.View">
  <NamespaceResolutionMap>
    <ClassMap partialName="DSCore.String" resolvedName="DSCore.String" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="DSCore.List" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="fab8f5fe-ab61-44ff-8533-79955edef9b3" type="PythonNodeModels.PythonNode" nickname="List All Views" x="564.182525428251" y="303.589442116667" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>#Copyright(c) 2015, Konrad Sobon
# @arch_laboratory, http://archi-lab.net

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import DocumentManager and TransactionManager
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference("RevitAPI")
import Autodesk
from Autodesk.Revit.DB import *

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

from System.Collections.Generic import *

# Import ToDSType(bool) extension method
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)

#The inputs to this node will be stored as a list in the IN variable.
dataEnteringNode = IN

def tolist(x):
    if hasattr(x,'__iter__'): return x
    else : return [x]

doc = tolist(IN[0])

#collect all views in the model
for d in doc:
	collector = FilteredElementCollector(d)
views = collector.OfClass(View).ToElements()

#sort views into separate lists based on view type
areaPlans, ceilingPlans, columnSchedules = [], [], []
costReport, details, draftingViews = [], [], []
drawingSheets, elevations, engineetingPlans = [], [], []
floorPlans, internal, legends, loadReports = [], [], [], []
panelSchedules, pressureLossReports, renderings = [], [], []
reports, schedules, sections, threeD = [], [], [], []
undefined, walkthrough = [], []
for i in views:
	if not i.IsTemplate:
		if i.ViewType == ViewType.AreaPlan:
			areaPlans.append(i.ToDSType(True))
		elif i.ViewType == ViewType.CeilingPlan:
			ceilingPlans.append(i.ToDSType(True))
		elif i.ViewType == ViewType.ColumnSchedule:
			columnSchedules.append(i.ToDSType(True))
		elif i.ViewType == ViewType.CostReport:
			costReport.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Detail:
			details.append(i.ToDSType(True))
		elif i.ViewType == ViewType.DraftingView:
			draftingViews.append(i.ToDSType(True))
		elif i.ViewType == ViewType.DrawingSheet:
			drawingSheets.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Elevation:
			elevations.append(i.ToDSType(True))
		elif i.ViewType == ViewType.EngineeringPlan:
			engineetingPlans.append(i.ToDSType(True))
		elif i.ViewType == ViewType.FloorPlan:
			floorPlans.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Internal:
			internal.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Legend:
			legends.append(i.ToDSType(True))
		elif i.ViewType == ViewType.LoadsReport:
			loadReports.append(i.ToDSType(True))
		elif i.ViewType == ViewType.PanelSchedule:
			panelSchedules.append(i.ToDSType(True))
		elif i.ViewType == ViewType.PresureLossReport:
			pressureLossReports.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Rendering:
			renderings.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Report:
			reports.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Schedule:
			schedules.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Section:
			sections.append(i.ToDSType(True))
		elif i.ViewType == ViewType.ThreeD:
			threeD.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Undefined:
			undefined.append(i.ToDSType(True))
		elif i.ViewType == ViewType.Walkthrough:
			walkthrough.append(i.ToDSType(True))
		else:
			continue
#Assign your output to the OUT variable
OUT = areaPlans, ceilingPlans, columnSchedules, costReport, \
	details, draftingViews, elevations, \
	engineetingPlans, floorPlans, internal, \
	loadReports, panelSchedules, pressureLossReports, \
	renderings, reports, sections, threeD, \
	undefined, walkthrough, legends, schedules, drawingSheets</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="ad01594d-42cc-4b97-bcd8-a156c15c8a58" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="750.928974698921" y="300.8" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="x = t0;&#xA;t1 = x[0..18];&#xA;t2 = DSCore.List.Flatten(t1,-1);&#xA;t3 = x[19];&#xA;t4 = x[21];&#xA;t5 = x[20];&#xA;t6 = t5.Name;&#xA;t7 = DSCore.String.Contains(t6, &quot;Revision Schedule&quot;, false);&#xA;t8 = DSCore.List.FilterByBoolMask(t5, t7);&#xA;t9 = __TryGetValueFromNestedDictionaries(t8, &quot;in&quot;);&#xA;t10 = __TryGetValueFromNestedDictionaries(t8, &quot;out&quot;);&#xA;t11 = DSCore.List.Flatten({t2, t3, t10},-1);" ShouldFocus="false">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.CodeBlockNodeModel>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="eca1c882-5346-4658-be6b-85cff15c4235" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="427.802387575838" y="303.236815421463" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Document" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="b60d7c43-9b1c-499f-8f88-ca769265e99a" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1470.86831325426" y="263.571956111145" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="View" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="289c7e7c-191b-4960-9f4d-c5da4900a5c1" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1453.53904714547" y="507.938228391014" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Schedule" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="4a04d310-0a91-4227-a047-30500ec44732" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1468.48265583044" y="340.650647526683" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Legend" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="aab2c751-5099-4b42-83c6-6c4629e30b52" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1462.50135762985" y="425.985615425541" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Sheet" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="d1cf05ce-7926-4531-a6bc-218ceb5251ce" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1449.98854464096" y="585.855604828142" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="(Without Sheet) All Views" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="fab8f5fe-ab61-44ff-8533-79955edef9b3" start_index="0" end="ad01594d-42cc-4b97-bcd8-a156c15c8a58" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ad01594d-42cc-4b97-bcd8-a156c15c8a58" start_index="2" end="b60d7c43-9b1c-499f-8f88-ca769265e99a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ad01594d-42cc-4b97-bcd8-a156c15c8a58" start_index="3" end="4a04d310-0a91-4227-a047-30500ec44732" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ad01594d-42cc-4b97-bcd8-a156c15c8a58" start_index="4" end="aab2c751-5099-4b42-83c6-6c4629e30b52" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ad01594d-42cc-4b97-bcd8-a156c15c8a58" start_index="10" end="289c7e7c-191b-4960-9f4d-c5da4900a5c1" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="ad01594d-42cc-4b97-bcd8-a156c15c8a58" start_index="11" end="d1cf05ce-7926-4531-a6bc-218ceb5251ce" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="eca1c882-5346-4658-be6b-85cff15c4235" start_index="0" end="fab8f5fe-ab61-44ff-8533-79955edef9b3" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>