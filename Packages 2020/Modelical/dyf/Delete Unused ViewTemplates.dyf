<Workspace Version="1.3.0.875" X="0" Y="0" zoom="1" ScaleFactor="1" Name="Delete Unused ViewTemplates" Description="Delete all unused ViewTemplates in your file, except for 3D view templates, as they cannot be converted to work with Dynamo yet." ID="43870fd9-39c1-4a86-9042-e3edc738d02d" Category="Modelical.Cleanup">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="bcb63cbd-805c-4824-9f67-ab7ff2b853e6" type="PythonNodeModels.PythonNode" nickname="Python Script" x="684.234999537651" y="341.267301227187" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script># This node has been made by Modelical
# www.modelical.com

import clr
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
import Autodesk

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from RevitServices.Persistence import DocumentManager

#The inputs to this node will be stored as a list in the IN variables.

bool = IN[0]
output = "Set Toggle to TRUE to delete unused View Templates"

doc = DocumentManager.Instance.CurrentDBDocument
collector = FilteredElementCollector(doc)
allviews = collector.OfClass(View).ToElements()
viewlist = []

for v in allviews:
	if v.ViewType == ViewType.ThreeD:
		if not(v.IsTemplate):
			viewlist.append(v)
	else:
		viewlist.append(v)

views = UnwrapElement(viewlist)

viewTemplates = []
for v in views:
	if v.IsTemplate:
		viewTemplates.append(v)

usedTemplates = []
for v in views:
	if v.ViewTemplateId.IntegerValue != -1:
		usedTemplates.append(v.Document.GetElement(v.ViewTemplateId))

uniqueUsedTemplates = []

if len(usedTemplates) != 0:
	uniqueUsedTemplates.append(usedTemplates[0])
	for used in usedTemplates:
		buffer = False
		for unique in uniqueUsedTemplates:
			if used.Name == unique.Name:
				buffer = False
				break
			else:
				buffer = True
		if buffer:
			uniqueUsedTemplates.append(used)

indexes = []
i = 0
for v in viewTemplates:
	for u in usedTemplates:
		if u.Name == v.Name:
			indexes.append(i)
			break
	i = i + 1

indexes.reverse()

for i in indexes:
	viewTemplates.pop(i)

viewTemplatesID = []
viewTempNames = []

if bool == True:
	for v in viewTemplates:
		viewTemplatesID.append(v.Id)

	TransactionManager.Instance.EnsureInTransaction(doc)

	for v in viewTemplatesID:
		viewTempNames.append(doc.GetElement(v).Name)
		doc.Delete(v)

	TransactionManager.Instance.TransactionTaskDone()
	output = viewTempNames


OUT = output</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="c81d73c7-d127-4d1d-a10b-72f7cb302fc6" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="436" y="342" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Toggle : bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="ce5ce98d-ff1c-435d-b290-15c814073e4a" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="837" y="340" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="out" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="bcb63cbd-805c-4824-9f67-ab7ff2b853e6" start_index="0" end="ce5ce98d-ff1c-435d-b290-15c814073e4a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="c81d73c7-d127-4d1d-a10b-72f7cb302fc6" start_index="0" end="bcb63cbd-805c-4824-9f67-ab7ff2b853e6" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>