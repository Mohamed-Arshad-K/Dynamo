<Workspace Version="1.3.1.1736" X="0" Y="0" zoom="1" ScaleFactor="1" Name="Delete LinePatterns" Description="Delete all the imported Line Patterns from CAD files." ID="79a860a5-2121-4cf1-8237-58293f9ef620" Category="Modelical.Cleanup">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="b29f6847-9d8d-4408-aa40-62949398291e" type="PythonNodeModels.PythonNode" nickname="Python Script" x="714.157558762021" y="295.177590807393" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script># This node has been made by Modelical
# www.modelical.com

import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

#Load Dynamo wrappers
clr.AddReference("RevitNodes")
import Revit
from Revit.Elements import *
clr.ImportExtensions(Revit.GeometryConversion)
clr.ImportExtensions(Revit.Elements)

#Load Revit API
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
import Autodesk

#Load document reference
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

def toList(input):
	if isinstance(input,list) == False:
		return [input]
	else:
		return input

def flatten(x):
    result = []
    for el in x:
        if hasattr(el, "__iter__") and not isinstance(el, basestring):
            result.extend(flatten(el))
        else:
            result.append(el)
    return result

bool = IN[0]
output = "Set Toggle to TRUE to delete imported Line Patterns"

collector = FilteredElementCollector(doc)
allLinePatterns = collector.OfClass(LinePatternElement).ToElements()

linePatternsNames = UnwrapElement(allLinePatterns)

delLinePatternsId = []

if bool == True:
	for l in linePatternsNames:
		if l.Name.startswith("IMPORT"):
			delLinePatternsId.append(l.Id)
	output = str(len(delLinePatternsId)) + " Line Patterns have been deleted"

	TransactionManager.Instance.EnsureInTransaction(doc)

	for l in delLinePatternsId:
		doc.Delete(l)

	TransactionManager.Instance.TransactionTaskDone()

OUT = output</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="40972b5c-3942-4a27-a170-29891a6b1021" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="485.5" y="294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="Toggle : bool = false" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="2bee4a88-9eb0-48ec-a562-5a4b130cdbfd" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="866.335505821584" y="294.241765016323" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="out" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="b29f6847-9d8d-4408-aa40-62949398291e" start_index="0" end="2bee4a88-9eb0-48ec-a562-5a4b130cdbfd" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="40972b5c-3942-4a27-a170-29891a6b1021" start_index="0" end="b29f6847-9d8d-4408-aa40-62949398291e" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>