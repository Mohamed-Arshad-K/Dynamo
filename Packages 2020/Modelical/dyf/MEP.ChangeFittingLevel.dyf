{
  "Uuid": "8f554a75-e18c-41eb-bb70-567ff0b0ceca",
  "IsCustomNode": true,
  "Category": "Modelical.Elements.Actions",
  "Description": "This node allows to change the level of a pipe or a duct fitting, without modifying the position.",
  "Name": "MEP.ChangeFittingLevel",
  "ElementResolver": {
    "ResolutionMap": {
      "Revit.Elements.Level": {
        "Key": "Revit.Elements.Level",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "_ductOrPipeFittings",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Can include ducts or pipes. Their reference level will change"
      },
      "Id": "5fdb34f927194f61bb0b847850bed432",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ed2cc4a164774098a3f061394e9f5673",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "_selectedLevel",
        "TypeName": "Revit.Elements.Level",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": "Selected level or levels."
      },
      "Id": "d068a8f93c3f474c94e74c7d6fcbd0a8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0055e83d2436419196c65c65145cdeae",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "_elements",
      "Id": "aa64d91a4acf47a29ab620559ff9ef6e",
      "Inputs": [
        {
          "Id": "3bebea39f0b4421c9ae380f722d5ec36",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# This node has been made by Modelical\r\n# www.modelical.com\r\n\r\nimport clr\r\nclr.AddReference(\"ProtoGeometry\")\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# This import let's us call / use Dynamo nodes from Python code\r\nclr.AddReference(\"DSCoreNodes\")\r\nfrom DSCore import *\r\n# General API and User Interface API DLL\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.Structure import *\r\n\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.UI import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.ImportExtensions(Revit.Elements)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nuidoc = DocumentManager.Instance.CurrentUIApplication\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\napp = uidoc.Application\r\n\r\n\r\nimport sys\r\nsys.path.append(r\"C:\\Program Files (x86)\\IronPython 2.7\\Lib\")\r\n# Function Helpers\r\ndef Feet2m(value):\r\n\treturn value * 0.3048\r\n\r\ndef toList(input):\r\n    \"\"\"Return iterable if available, a list of 1 otherwise\"\"\"\r\n    if hasattr(input, \"__iter__\") and not isinstance(input, basestring):\r\n        return input\r\n    else:\r\n        return [input]\r\n\r\ndef flatten(x):\r\n    result = []\r\n    for el in x:\r\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\r\n            result.extend(flatten(el))\r\n        else:\r\n            result.append(el)\r\n    return result\r\n    \r\ndef toModelUnits(x):\r\n\tif app.VersionNumber >=2020:\r\n\t\tdocLengthUnit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\treturn UnitUtils.Convert(x,DisplayUnitType.DUT_DECIMAL_FEET,docLengthUnit)\r\n\telif app.VersionNumber <2020:\r\n\t\tdocLengthUnit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\treturn UnitUtils.Convert(x, docLengthUnit, UnitTypeId.FeetFractionalInches)\r\n\t\t\r\ndef toInternalUnits(x):\r\n\tif app.VersionNumber >=2020:\r\n\t\tdocLengthUnit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\treturn UnitUtils.Convert(x,docLengthUnit,DisplayUnitType.DUT_DECIMAL_FEET)\r\n\telif app.VersionNumber <2020:\r\n\t\tdocLengthUnit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\treturn UnitUtils.Convert(x,UnitTypeId.FeetFractionalInches. docLengthUnit)\r\n# Logic starts here\r\nelements = toList(UnwrapElement(IN[0]))\r\ndestinationLevels =toList(UnwrapElement(IN[1]))\r\n\r\n\r\n# Transactions\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nif int(app.VersionNumber) < 2020:\r\n\tif len(destinationLevels) == 1:\r\n\t\tfor f in elements:\r\n\t\t\tif f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_DuctCurves).IntegerValue)) or f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_PipeCurves).IntegerValue)):\r\n\t\t\t\tstartLevel =f.get_Parameter(BuiltInParameter.RBS_START_LEVEL_PARAM).Set(destinationLevels[0].Id)\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tstartLevelId = f.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).AsElementId()\r\n\t\t\t\t\tstartLevelElevation = doc.GetElement(startLevelId).Elevation\r\n\t\t\t\t\tstartOffset = f.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM).AsDouble()\r\n\t\t\t\t\tendLevelElevation = destinationLevels[0].Elevation\r\n\t\t\t\t\tendOffset = (startLevelElevation + startOffset) - endLevelElevation\r\n\t\t\t\t\tendLevelId = destinationLevels[0].Id\r\n\t\t\t\t\t\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM).Set(endOffset)\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).Set(endLevelId)\r\n\t\t\t\t\tf.ToDSType(True)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tNone\t\t\t\r\n\telif len(destinationLevels) > 1:\r\n\t\ti = 0\r\n\t\tfor f in elements:\r\n\t\t\tif f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_DuctCurves).IntegerValue)) or f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_PipeCurves).IntegerValue)):\r\n\t\t\t\r\n\t\t\t\tstartLevel =f.get_Parameter(BuiltInParameter.RBS_START_LEVEL_PARAM).Set(destinationLevels[i].Id)\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tstartLevelId = f.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).AsElementId()\r\n\t\t\t\t\tstartLevelElevation = doc.GetElement(startLevelId).Elevation\r\n\t\t\t\t\tstartOffset = f.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM).AsDouble()\r\n\t\t\t\t\tendLevelElevation = destinationLevels[i].Elevation\r\n\t\t\t\t\tendOffset = (startLevelElevation + startOffset) - endLevelElevation\r\n\t\t\t\t\tendLevelId = destinationLevels[i].Id\r\n\t\t\t\t\t\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM).Set(endOffset)\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).Set(endLevelId)\r\n\t\t\t\t\tf.ToDSType(True)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tNone\r\n\t\t\ti+=1\r\n\r\nelif int(app.VersionNumber) >= 2020:\r\n\tif len(destinationLevels) == 1:\r\n\r\n\t\tfor f in elements:\r\n\t\t\tif f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_DuctCurves).IntegerValue)) or f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_PipeCurves).IntegerValue)):\r\n\t\t\t\r\n\t\t\t\tstartLevel =f.get_Parameter(BuiltInParameter.RBS_START_LEVEL_PARAM).Set(destinationLevels[0].Id)\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tstartLevelId = f.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).AsElementId()\r\n\t\t\t\t\tstartLevelElevation = doc.GetElement(startLevelId).Elevation\r\n\t\t\t\t\tstartOffset = f.get_Parameter(BuiltInParameter.INSTANCE_ELEVATION_PARAM).AsDouble()\r\n\t\t\t\t\tendLevelElevation = destinationLevels[0].Elevation\r\n\t\t\t\t\tendOffset = (startLevelElevation + startOffset) - endLevelElevation\r\n\t\t\t\t\tendLevelId = destinationLevels[0].Id\r\n\t\t\t\t\t\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).Set(endLevelId)\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.INSTANCE_ELEVATION_PARAM).Set(endOffset)\r\n\t\t\t\t\tf.ToDSType(True)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tNone\r\n\t\t\t\t\t\t\t\t\t\r\n\telif len(destinationLevels) > 1:\r\n\t\ti = 0\r\n\t\tfor f in elements:\r\n\t\t\t\r\n\t\t\tif f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_DuctCurves).IntegerValue)) or f.Category.Name == str(Revit.Elements.Category.ById(ElementId(BuiltInCategory.OST_PipeCurves).IntegerValue)):\r\n\t\t\t\r\n\t\t\t\tstartLevel =f.get_Parameter(BuiltInParameter.RBS_START_LEVEL_PARAM).Set(destinationLevels[i].Id)\r\n\t\t\t\t\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tstartLevelId = f.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).AsElementId()\r\n\t\t\t\t\ttest.append(startLevelId)\r\n\t\t\t\t\t\r\n\t\t\t\t\tstartLevelElevation = doc.GetElement(startLevelId).Elevation\r\n\t\t\t\t\tstartOffset = f.get_Parameter(BuiltInParameter.INSTANCE_FREE_HOST_OFFSET_PARAM).AsDouble()\r\n\t\t\t\t\tendLevelElevation = destinationLevels[i].Elevation\r\n\t\t\t\t\tendOffset = (startLevelElevation + startOffset) - endLevelElevation\r\n\t\t\t\t\tendLevelId = destinationLevels[i].Id\r\n\t\t\t\t\t\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.FAMILY_LEVEL_PARAM).Set(endLevelId)\r\n\t\t\t\t\tf.get_Parameter(BuiltInParameter.INSTANCE_ELEVATION_PARAM).Set(endOffset)\r\n\t\t\t\t\tf.ToDSType(True)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tNone\r\n\t\t\ti+=1\r\n\t\r\n\r\n# Your code\r\nTransactionManager.Instance.TransactionTaskDone()\r\n# Output\r\nOUT = elements",
      "VariableInputPorts": true,
      "Id": "b972de219f1a460db31c4f5323295626",
      "Inputs": [
        {
          "Id": "f805368cd09f44c697730bd22bd58726",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e1e7a6775f4c4e08879dfdeb40b4fa87",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "97a2a2f80dfa45ec802e3b0a0056a90e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "ed2cc4a164774098a3f061394e9f5673",
      "End": "f805368cd09f44c697730bd22bd58726",
      "Id": "d91680cc74b4431d806e5f072e20a1f8"
    },
    {
      "Start": "0055e83d2436419196c65c65145cdeae",
      "End": "e1e7a6775f4c4e08879dfdeb40b4fa87",
      "Id": "0203124d1e394e7a943c25e7c2d4f27e"
    },
    {
      "Start": "97a2a2f80dfa45ec802e3b0a0056a90e",
      "End": "3bebea39f0b4421c9ae380f722d5ec36",
      "Id": "ada7b581257148bc8d0c0e8677857294"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -2.098557710647583,
      "EyeY": 31.850404739379883,
      "EyeZ": 11.33758544921875,
      "LookX": 2.0737299919128418,
      "LookY": -30.312234878540039,
      "LookZ": -12.1453857421875,
      "UpX": 0.1387057900428772,
      "UpY": 0.56640625,
      "UpZ": -0.81236982345581055
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "5fdb34f927194f61bb0b847850bed432",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 86.797538524753577,
        "Y": 327.60062383984695
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "d068a8f93c3f474c94e74c7d6fcbd0a8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 88.130683694090919,
        "Y": 413.89926011164937
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "aa64d91a4acf47a29ab620559ff9ef6e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 934.11906276033881,
        "Y": 384.31819445041185
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b972de219f1a460db31c4f5323295626",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 780.54563209991989,
        "Y": 383.12383354987219
      }
    ],
    "Annotations": [],
    "X": -98.045591206157951,
    "Y": -225.52621534063644,
    "Zoom": 1.4682621285355542
  }
}