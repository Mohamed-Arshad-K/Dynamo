<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProrubimCommonKit</name>
    </assembly>
    <members>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.RenameAssemblyType(System.String)">
            <summary>
            Rename assembly type (this node is like AssemblyType.Rename)
            </summary>
            <param name="newName">New name for AssemblyType</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.ChangeAssemblyType(Prorubim.Common.Revit.Elements.AssemblyType)">
            <summary>
            Change assembly type for current assembly instance
            </summary>
            <param name="newAssemblyType">AssemblyType object for assigning</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.ReplaceMembersInAllInstances(System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Replace assembly members in all same assembly instances with option for deleting or detaching old elements. If option is "false" then old elements will be only detached from assembly. If "true" then old elements will be deleted from project.
            </summary>
            <param name="elements">New members for replacement</param>
            <param name="deleteOldElements">Deleting old elements from project option.</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.RemoveMembersInAllInstances(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Remove assembly members in all same assembly instances. Elements will stay in the project.
            </summary>
            <param name="elements">Members for removing</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.AddMembersInAllInstances(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Add new assembly members in all same assembly instances.
            </summary>
            <param name="elements">New members for adding</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.SyncAssemblyInstance(Prorubim.Common.Revit.Elements.AssemblyInstance)">
            <summary>
            Change assembly type in target assembly instance. Will be assigned assembly type from current assembly instance.
            </summary>
            <param name="synchedInstance">Target assembly instance for type changing</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.CastFromElement(Revit.Elements.Element)">
            <summary>
            Convert Element object to AssemblyInstance object if it`s possible for further using 
            </summary>
            <param name="element">Casting Element</param>
            <returns>Converted AssemblyInstance object</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.ReplaceMembers(System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Replace assembly members in current assembly instance with option for deleting or detaching old elements. If option is "false" then old elements will be only detached from assembly. If "true" then old elements will be deleted from project.
            </summary>
            <param name="elements">New members for replacement</param>
            <param name="deleteOldElements">Deleting old elements from project option.</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.AddMembers(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Add new assembly members in current assembly instance
            </summary>
            <param name="elements">New members for adding</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.RemoveMembers(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Remove assembly members in current assembly instance
            </summary>
            <param name="members">Ðœembers for removing</param>
            <returns>Passing AssemblyInstance</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.Disassemble">
            <summary>
            Disassemble all members
            </summary>
            <returns>Disassembled members</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyInstance.Create(Revit.Elements.Element[])">
            <summary>
            Create new assembly in the project from existing elements list
            </summary>
            <param name="elements">Elements list for new assembly</param>
            <returns>New AssemblyInstance object</returns>
        </member>
        <member name="P:Prorubim.Common.Revit.Elements.AssemblyInstance.AssemblyType">
            <summary>
            Get assembly type for current assembly instance
            </summary>
        </member>
        <member name="P:Prorubim.Common.Revit.Elements.AssemblyInstance.Members">
            <summary>
            Get members in current assembly
            </summary>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyType.ByName(System.String)">
            <summary>
            Get existing AssemblyType by it`s name
            </summary>
            <param name="name">AssemblyType name</param>
            <returns>AssemblyType object</returns>
        </member>
        <member name="P:Prorubim.Common.Revit.Elements.AssemblyType.AllInstances">
            <summary>
            Get all assembly instances objects of this assemply type
            </summary>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyType.Rename(System.String)">
            <summary>
            Rename AssemblyType
            </summary>
            <param name="newName">Assembly type new name</param>
            <returns>Renamed assemblyType object</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.AssemblyType.CastFromElement(Revit.Elements.Element)">
            <summary>
            Convert Element object to AssemblyType object if it`s possible for further using 
            </summary>
            <param name="element">Casting Element</param>
            <returns>Converted AssemblyType object</returns>
        </member>
        <member name="T:Prorubim.Common.Revit.Elements.ImageType">
            <summary>
            ImageType class
            </summary>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.ImageType.ByPath(System.String)">
            <summary>
            Get ImageType in current project by it`s source path
            </summary>
            <param name="path">ImageType source path</param>
            <returns>ImageType object</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.ImageType.Load(System.String)">
            <summary>
            Load image using it`s path into current project
            </summary>
            <param name="path">Image source path</param>
            <returns>ImageType object</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.LegendView.ByName(System.String)">
            <summary>
            Get a Revit LegendView by it's name
            </summary>
            <param name="name">Name of the legend view</param>
            <returns>The legend view</returns>
        </member>
        <member name="T:Prorubim.Common.Revit.Elements.View">
            <summary>
            View class
            </summary>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.View.ViewName(Revit.Elements.Views.View)">
            <summary>
            Get a Revit view name by view
            </summary>
            <param name="view">View object</param>
            <returns>The view name</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.View.ExportObjectsAsImage(Revit.Elements.Views.View,Revit.Elements.Element[],System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Export objects on view as image to file
            </summary>
            <param name="view">View object</param>
            <param name="elements">Exported elements list</param>
            <param name="imagePath">Image path</param>
            <param name="imageSize">Image size in pixels</param>
            <param name="loadImage">Is image should be loaded into the project after export</param>
            <param name="deleteImageFile">Is image file should be deleted after export</param>
            <returns>Image path and (or) ImageType element</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.Element.FindNeighbourElements(Revit.Elements.Element,Revit.Elements.Element,System.Double)">
            <summary>
            Find neighbour elements for base element using it`s bounding box with some additional offset
            </summary>
            <param name="element">Base element for neighbours searching</param>
            <param name="offset">Additional offset area for neighbours detecting</param>
            <param name="view">View for neighbours searching</param>
            <returns>Found neighbour elements</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.Element.FindSimilarElements(Revit.Elements.Element)">
            <summary>
            Find similar elements by same category and type as base element
            </summary>
            <param name="element">Base element for similar elements searching</param>
            <returns>Found similar elements</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Elements.LegendElement.ByFamilyType(Revit.Elements.Element)">
            <summary>
            Get LegendElement in some existing LegendView by it`s FamilyType
            </summary>
            <param name="familyType">FamilyType for searching legend elements</param>
            <returns>Found legend elements list</returns>
        </member>
        <member name="M:Prorubim.Common.Revit.Scattering.Elements.ScatterAndAlign(Revit.Elements.Element,Revit.Elements.Element,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Scatter element, assembly or group in many locations and orientations using reference alignment element and elements array as locations list
            </summary>
            <param name="scatteredElement">Element, assembly or group for scattering</param>
            <param name="alignmentElement">Reference alignment element for base location</param>
            <param name="elementsArray">Elements array for new scattered objects locations</param>
            <returns>Scattered elements list</returns>
        </member>
    </members>
</doc>
